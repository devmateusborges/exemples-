class BorMov(generic_model, db.Model):
    __tablename__ = 'bor_mov'
    __table_args__ = {'comment': 'Bordo-Movimento'}

    id_tipo = db.Column(db.String(36),  index=True, comment='ID do Tipo da Movimento')
    numero_serie = db.Column(db.String(50),  index=True, comment='Numero Sério Dispositivo')
    ibutton_rfid = db.Column(db.String(50), index=True, comment='Numero IButton ou RFid')
    dthr_track = db.Column(db.TIMESTAMP(),  index=True, comment='Data/Hora Movimento')
    gps_altitude = db.Column(db.String(50), comment='GPS - Altitude')
    gps_altitude_status = db.Column(db.String(50), comment='GPS - Status da Altitude')
    gps_lat = db.Column(db.String(50), comment='GPS - Latitude X')
    gps_long = db.Column(db.String(50), comment='GPS - Longitude Y')
    gps_angulo_norte = db.Column(db.String(50), comment='GPS - Angulo Norte')
    gps_posicao_status = db.Column(db.String(50), comment='GPS - Status da Posição')
    gps_velocidade = db.Column(db.String(50), comment='GPS - Velocidade')
    gps_velocidade_media = db.Column(db.String(50), comment='GPS - Velocidade Média')
    equipamento_ignicao = db.Column(db.String(50), comment='Equipamento - Ignição')
    equipamento_bateria = db.Column(db.String(50), comment='Equipamento - Bateria')
    equipamento_odometro = db.Column(db.String(50), comment='Equipamento - Odometro')
    equipamento_rpm = db.Column(db.String(50), comment='Equipamento - RPM')
    equipamento_veloc = db.Column(db.String(50), comment='Equipamento - Velocidade')
    equipamento_veloc_odom = db.Column(db.String(50), comment='Equipamento - Velocidade Odometro')
    equipamento_veloc_odom_media = db.Column(db.String(50), comment='Equipamento - Velocidade Média Odometro')
    geom = db.Column(NullType, index=True, comment='Geometria')
    ope_centro2_equip_id_1 = db.Column(db.String(36), comment='ID do Centro Nível 2 - Equipamento 1')
    ope_centro2_equip_id_2 = db.Column(db.String(36), comment='ID do Centro Nível 2 - Equipamento 2')
    ope_centro2_pessoa_id = db.Column(db.String(36), comment='ID do Centro Nível 2 - Pessoa')
    ger_empresa_id = db.Column(db.String(36), comment='ID da Empresa')
    ope_centro2_area_id = db.Column(db.String(36), comment='ID do Centro Nível 2 - Area')
    geom_circle = db.Column(NullType, index=True, comment='Geometria - Criculo Click')
    id_realtime = db.Column(db.String(100), comment='ID RealTime - Redis')
    buzzer = db.Column(db.String(4), comment='Sirene')
    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    status = db.Column(db.String(2), comment='Status OK-Processada com sucesso, NP-Não processada, EP-Em processamento')
    dthr_status = db.Column(db.TIMESTAMP(), comment='Data do status')
    ope_atividade_id = db.Column(db.String(36), comment='ID da Atividade')
    qnt_ha_trab = db.Column(db.Numeric(18, 6),  comment='Quantidade de hectares trabalhados')
    geom_line = db.Column(NullType, comment='Geometria - Line')
    duracao = db.Column(db.Numeric(18, 6), comment='Duração')


class BorMovAtual(generic_model, db.Model):
    __tablename__ = 'bor_mov_atual'
    __table_args__ = {'comment': 'Bordo-Movimento Atual'}

    ope_centro2_equip_id = db.Column(db.String(36),  comment='ID do Centro Nível 2 - Equipamento 1')
    id_tipo = db.Column(db.String(50),  index=True, comment='ID do Tipo da Movimento')
    numero_serie = db.Column(db.String(50),  index=True, comment='Numero Sério Dispositivo')
    ibutton_rfid = db.Column(db.String(50), index=True, comment='Numero IButton ou RFid')
    dthr_track = db.Column(db.TIMESTAMP(),  index=True, comment='Data/Hora Movimento')
    gps_altitude = db.Column(db.String(50), comment='GPS - Altitude')
    gps_altitude_status = db.Column(db.String(50), comment='GPS - Status da Altitude')
    gps_lat = db.Column(db.String(50), comment='GPS - Latitude X')
    gps_long = db.Column(db.String(50), comment='GPS - Longitude Y')
    gps_angulo_norte = db.Column(db.String(50), comment='GPS - Angulo Norte')
    gps_posicao_status = db.Column(db.String(50), comment='GPS - Status da Posição')
    gps_velocidade = db.Column(db.String(50), comment='GPS - Velocidade')
    gps_velocidade_media = db.Column(db.String(50), comment='GPS - Velocidade Média')
    equipamento_ignicao = db.Column(db.String(50), comment='Equipamento - Ignição')
    equipamento_bateria = db.Column(db.String(50), comment='Equipamento - Bateria')
    equipamento_odometro = db.Column(db.String(50), comment='Equipamento - Odometro')
    equipamento_rpm = db.Column(db.String(50), comment='Equipamento - RPM')
    equipamento_veloc = db.Column(db.String(50), comment='Equipamento - Velocidade')
    equipamento_veloc_odom = db.Column(db.String(50), comment='Equipamento - Velocidade Odometro')
    equipamento_veloc_odom_media = db.Column(db.String(50), comment='Equipamento - Velocidade Média Odometro')
    geom = db.Column(NullType, index=True, comment='Geometria')
    ope_centro2_pessoa_id = db.Column(db.String(36), comment='ID do Centro Nível 2 - Pessoa')
    ger_empresa_id = db.Column(db.String(36), comment='ID da Empresa')
    ope_centro2_area_id = db.Column(db.String(36), comment='ID do Centro Nível 2 - Area')
    unit_id = db.Column(db.String(36), comment='ID da Unidade')
    dthr_ignicao_last_off = db.Column(db.TIMESTAMP(), comment='Ultima data de desligamento da Ignição')


class BorMsg(generic_model, db.Model):
    __tablename__ = 'bor_msg'
    __table_args__ = {'comment': 'Bordo-Mensagens'}

    id_tipo = db.Column(db.String(50),  comment='ID do Tipo da Movimento')
    numero_serie = db.Column(db.String(50),  comment='Numero Série Dispositivo')
    dthr_trans_msg_rast = db.Column(db.TIMESTAMP(),  comment='Data e Hora Que O Rastreador Trasmitiu a Mensagem ')
    dthr_msg_gerada = db.Column(db.TIMESTAMP(),  comment='Data e Hora Que A Mensagem Foi Gerada')
    grupo_msg = db.Column(db.String(30),  comment='Grupo Mensagem')
    index_msg = db.Column(db.String(30),  comment='Índice do formulário na memória do terminal')
    dthr_posicao = db.Column(db.TIMESTAMP(),  comment='Data e Hora da posição')
    latitude = db.Column(db.String(50),  comment='Valor da latitude em graus')
    longitude = db.Column(db.String(50),  comment='Valor da longitude em graus.')
    qualidade_posi = db.Column(db.String(10),  comment='Qualida Da Posição OK-Boa;BAD-Ruim)')
    valor_msg = db.Column(db.String(100),  comment='Texto da Msg')
    status_msg = db.Column(db.String(50), server_default=text("'NP'::character varying"), comment='Status OK-Processada com sucesso, NP-Não processada, EP-Em processamento')
    dthr_status = db.Column(db.TIMESTAMP(), comment='Data  do status ')
    ger_empresa_id = db.Column(db.String(36), comment='ID da Empresa')
    ope_centro2_equip_id_1 = db.Column(db.String(50), comment='ID do Centro Nível 2 - Equipamento 1')
    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    corpo_msg = db.Column(db.String(250), comment='Corpo da Mensagem')
    ope_atividade_id = db.Column(db.String(36), comment='ID da Atividade')


class BorTel(generic_model, db.Model):
    __tablename__ = 'bor_tel'
    __table_args__ = {'comment': 'Bordo-Telemetria'}

    id_tipo = db.Column(db.String(50),  comment='ID do Tipo da Movimento')
    numero_serie = db.Column(db.String(50),  comment='Numero Serie Dispositivo')
    dthr_msg = db.Column(db.String(50), comment='Data e Hora de geração da mensagem pelo rastreador')
    dthr_fim = db.Column(db.String(50), comment='Data Final de Trabalho')
    dthr_inicio = db.Column(db.String(50), comment='Data Inicio de Trabalho')
    acel_viagem_m_s2 = db.Column(db.String(50), comment='Aceleração da Viagem Em Metro Por Segundo Ao Quadrado')
    freadas_bruscas_acum = db.Column(db.String(50), comment='Freadas Bruscas Acumuladas')
    freadas_bruscas_viagem = db.Column(db.String(50), comment='Freadas Bruscas  Na Viagem')
    gps_qual_acel_max_viagem = db.Column(db.String(50), comment='Qualidade da Aceleração Maxima na Viagem')
    gps_qual_desacel_max_viagem = db.Column(db.String(50), comment='Qualidade da Desaceleração Maxima na Viagem')
    gps_qual_rot_motor_max_viagem = db.Column(db.String(50), comment='Qualidade da Maxima da Rotação do Motor Na Viagem')
    gps_qual_vel_max_viagem_tac = db.Column(db.String(50), comment='Qualidade da Velocidade Maxima do Motor Na Viagem Tacografo ')
    id_ibutton = db.Column(db.String(50), comment='Numero IButton')
    lat_acel_max_viagem = db.Column(db.String(50), comment='Latitude de Aceleração Maxima de Viagem')
    lat_desacel_max_viagem = db.Column(db.String(50), comment='Latitude de Desaceleração Maxima de Viagem')
    lat_max_tempo_marcha_lenta_viagem = db.Column(db.String(50), comment='Latitude Tempo Maximo Em Marcha Lenta Na Viagem')
    lat_rot_motor_max_viagem = db.Column(db.String(50), comment='Latitude Rotação Maxima do Motor Na Viagem')
    lat_vel_max_banguela = db.Column(db.String(50), comment='Latitude Velocidade Maxima Na Banguela')
    lat_vel_max_viagem_gps = db.Column(db.String(50), comment='Latitude Velocidade Maxima De Viagem Gps')
    lat_vel_max_viagem_tac = db.Column(db.String(50), comment='Latitude da Velocidade Maxima de Viagem Tacografo')
    long_acel_max_viagem = db.Column(db.String(50), comment='Longitude da Aceleração Maxima na Viagem ')
    long_desacel_max_viagem = db.Column(db.String(50), comment='Longitude da Desaceleração Maxima de Viagem')
    long_max_tempo_marcha_lenta_viagem = db.Column(db.String(50), comment='Longitude Maxima Tempo Marcha Lenta Na Viagem')
    long_rot_motor_max_viagem = db.Column(db.String(50), comment='Longitude da Rotação Maxima do Motor Na Viagem')
    long_vel_max_banguela = db.Column(db.String(50), comment='Longitude da Velocidade Maxima Banguela')
    long_vel_max_viagem_gps = db.Column(db.String(50), comment='Longitude da Velocidade Maxima Na Viagem GPS')
    long_vel_max_viagem_tac = db.Column(db.String(50), comment='Longitude da Velocidade Maxima de Viagem Tacografo')
    maior_tempo_banguela_viagem = db.Column(db.String(50), comment='Maior Tempo de Banguela Na Viagem')
    maior_vel_banguela = db.Column(db.String(50), comment='Maior Velocidade de Banguela')
    media_acel_brusca_m_s2_acum = db.Column(db.String(50), comment='Media de Aceleração Brusca Em Metro Por Segundo ao Quadrado Acumuladas')
    media_acel_brusca_viage_m_s2 = db.Column(db.String(50), comment='Media de Aceleração Brusca Em Metro Por Segundo ao Quadrado')
    media_freadas_m_s2_acum = db.Column(db.String(50), comment='Media de Freadas Em Metro Por Segundo ao Quadrado Acumulada')
    media_freadas_viagem_m_s2 = db.Column(db.String(50), comment='Media de Freadas na Viagem Em Metro Por Segundo Ao Quadrado')
    nm_marcha_lenta_acum = db.Column(db.String(50), comment='Numero de Marcha Lenta Acumuladas')
    nm_marcha_lenta_viagem = db.Column(db.String(50), comment='Numero de Marcha Lenta Acumuladas Na Viagem')
    num_arranc_bruscas_acum = db.Column(db.String(50), comment='Numero de Arrancadas Bruscas Acumuladas')
    num_arranc_bruscas_viagem = db.Column(db.String(50), comment='Numero de Arrancadas Bruscas Na Viagem')
    num_banguela_acum = db.Column(db.String(50), comment='Numero de Banguelas Acumuladas')
    num_banguela_viagem = db.Column(db.String(50), comment='Numero de Banguelas na Viagem')
    num_freio_motor_acum = db.Column(db.String(50), comment='Numero de freio Motor Acumulado')
    num_rpm_acima_acum = db.Column(db.String(50), comment='Numero de Rpm Acima Acumulados')
    num_rpm_acima_parcial = db.Column(db.String(50), comment='Numero de Rpm Acima Parcial')
    num_vezes_banguela_viagem = db.Column(db.String(50), comment='Numero de Vezes Banguela Viagem ')
    num_vezes_vel_acima_acum = db.Column(db.String(50), comment='Numero de Vezes Velocidade Acima Esta Acumulado')
    num_vezes_vel_acima_parcial = db.Column(db.String(50), comment='Numero de Vezes Velocidade Acima Parcial')
    odo_acum_gps_dec_km = db.Column(db.String(50), comment='Odometro Acumulado GPS (decimos de Km) ')
    odo_acum_tac_dec_km = db.Column(db.String(50), comment='Odometro acumulado Tacografo (decimos de Km) ')
    odo_viagem_gps_dec_km = db.Column(db.String(50), comment='Odometro de Viagem GPS(decimos de Km) ')
    odo_viagem_tac_dec_km = db.Column(db.String(50), comment='Odometro de Viagem Tacografo (decimos de Km) ')
    rot_motor_max_viagem = db.Column(db.String(50), comment='Rotação Maxima Motor Na Viagem')
    rot_motor_med_viagem = db.Column(db.String(50), comment='Rotação Media do Motor Na Viagem')
    tensao_batt_bkp_med_dec_volts = db.Column(db.String(50), comment='Tensão da Bateria de Backup na Viagem (media(decimos de Volt 5 = 0,5V)')
    tensao_batt_veic_med_dec_volts = db.Column(db.String(50), comment='Tensão da Bateria do Veiculo na Viagem (decimos de Volt 5 = 0,5V)')
    dthr_acel_max_viagem = db.Column(db.String(50), comment='TimeStamp da Aceleração Maxima Na Viagem')
    dthr_desacel_max_viagem = db.Column(db.String(50), comment='TimeStamp da Desaceleração Maxima Na Viagem')
    dthr_max_tempo_marcha_lenta_viagem = db.Column(db.String(50), comment='TimeStamp do Tempo Maximo de Marchar Lenta Na Viagem')
    dthr_rot_motor_max_viagem = db.Column(db.String(50), comment='TimeStamp da Rotação Maxima Do Motor Na Viagem')
    dthr_vel_max_banguela = db.Column(db.String(50), comment='TimeStamp da Velocidade Maxima Banguela')
    dthr_vel_max_viagem_gps = db.Column(db.String(50), comment='TimeStamp da Velocidade Maxima Viagem Gps')
    dthr_vel_max_viagem_tac = db.Column(db.String(50), comment='TimeStamp da Velocidade Maxima Viagem Tacografo')
    tempo_faixa_amarela_acum = db.Column(db.String(50), comment='Tempo de faixa Amarela Acumulada')
    tempo_faixa_amarela_parcial = db.Column(db.String(50), comment='Tempo de Faixa Amarela Parcial')
    tempo_faixa_azul_acum = db.Column(db.String(50), comment='Tempo de Faixa Azul Acumulada')
    tempo_faixa_azul_parcial = db.Column(db.String(50), comment='Tempo de Faixa Azul Parcial')
    tempo_faixa_verde_acum = db.Column(db.String(50), comment='Tempo de Faixa Verde Acumulada')
    tempo_faixa_verde_parcial = db.Column(db.String(50), comment='Tempo de Faixa Verde Parcial')
    tempo_faixa_vermelha_acum = db.Column(db.String(50), comment='Tempo de Faixa Vermelha Acumulada')
    tempo_faixa_vermelha_parcial = db.Column(db.String(50), comment='Tempo de Faixa Vermelha Parcial')
    tempo_freio_motor_acum = db.Column(db.String(50), comment='Tempo de Freio Motor Acumulado')
    tempo_marcha_lenta_acum = db.Column(db.String(50), comment='Tempo de Marcha Lenta Acumulado')
    tempo_marcha_lenta_viagem = db.Column(db.String(50), comment='Tempo de Marcha Lenta Acumulado Na Viagem')
    tempo_max_marcha_lenta_viagem = db.Column(db.String(50), comment='Tempo Maximo de Marcha Lenta Na Viagem')
    tempo_medio_marcha_lenta_viagem = db.Column(db.String(50), comment='Tempo Medio de Marcha Lenta Na Viagem')
    tempo_pedal_freio_acionado_viagem = db.Column(db.String(50), comment='Tempo em Que O Pedal de Freio Foi Acionado Na Viagem')
    tempo_perm_bang_acum_secs = db.Column(db.String(50), comment='Tempo de Permanência em Banguela Acumulado (segundos)')
    tempo_perm_bang_viagem_secs = db.Column(db.String(50), comment='Tempo de Permanência em Banguela na Viagem (segundos)')
    tempo_rpm_acima_acum = db.Column(db.String(50), comment='Tempo Acumulado de Rpm Acima')
    tempo_rpm_acima_parcial = db.Column(db.String(50), comment='Tempo Parcial de Rpm Acima')
    tempo_uso_acum_em_movimento_secs = db.Column(db.String(50),  comment='Tempo Acumulado de Uso em Movimento')
    tempo_uso_acum_parado_secs = db.Column(db.String(50), comment='Tempo de Uso Parado Acumulado em(segundos)')
    tempo_uso_acum_total_secs = db.Column(db.String(50), comment='Tempo de Uso Total Acumulado (segundos)')
    tempo_uso_viagem_em_movto_secs = db.Column(db.String(50), comment='Tempo de Uso Na Viagem Em Movimento(segundos)')
    tempo_uso_viagem_parado_secs = db.Column(db.String(50), comment='Tempo de Uso Na Viagem Parado(segundos)')
    tempo_uso_viagem_total_secs = db.Column(db.String(50), comment='Tempo de Uso Total Na Viagem (segundos)')
    tempo_veic_deslig_acum_secs = db.Column(db.String(50), comment='Tempo Acumulado Veiculo Desligado(segundos)')
    tempo_veic_desl_entre_viagens_secs = db.Column(db.String(50), comment='Tempo Veiculo Foi Desligado Entre Viagens(segundos)')
    tempo_vel_acima_acum = db.Column(db.String(50), comment='Tempo Velocidade Acima Acumulado')
    tempo_vel_acima_parcial = db.Column(db.String(50), comment='Tempo Velocidade Acima Parcial')
    vel_final_frenagem_brusca = db.Column(db.String(50), comment='Velocidade Final de Frenagem Bruscas')
    vel_final_max_acel_brusca = db.Column(db.String(50), comment='Velocidade Maxima Final de Aceleração Bruscas')
    vel_inicial_frenagem_brusca = db.Column(db.String(50), comment='Velocidade Inicial de Frenagem Bruscas')
    vel_inicial_max_acel_brusca = db.Column(db.String(50), comment='Velocidade Maxima Inicial de Aceleração Brusca')
    vel_max_viagem_gps = db.Column(db.String(50), comment='Velocidade Maxima de Viagem GPS')
    vel_max_viagem_tac = db.Column(db.String(50), comment='Velocidade Max Viagem Tacografo')
    vel_media_gps_acum = db.Column(db.String(50), comment='Velocidade Media GPS Acumulado')
    vel_media_tac_acum = db.Column(db.String(50), comment='Velocidade Media Tacografo Acumulado')
    vel_med_viagem_gps = db.Column(db.String(50), comment='Velocidade Media na Viagem GPS')
    vel_med_viagem_tac = db.Column(db.String(50), comment='Velocidade Media Viagem Com Tacografo')
    id_reatime = db.Column(db.String(100), comment='ID RealTime - Redis')
    status_msg = db.Column(db.String(50), comment='Status Msg')
    dthr_status = db.Column(db.TIMESTAMP(), comment='Data de Status')
    ger_empresa_id = db.Column(db.String(36), comment='ID da Empresa')
    ope_centro2_pessoa_id = db.Column(db.String(36), comment='ID do Centro Nível 2 - Pessoa')
    ope_centro2_equip_id_1 = db.Column(db.String(50), comment='ID do Centro Nível 2 - Equipamento 1')
    unit_id = db.Column(db.String(36),  comment='ID da Unidade')


class CtbVersao(generic_model, db.Model):
    __tablename__ = 'ctb_versao'
    __table_args__ = {'comment': 'Contábil-Versão Contábil / Previsão'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_versao = db.Column(db.String(50),  comment='Sigla do Versão Conta Contábil')
    tipo_rp = db.Column(db.String(1),  comment='Tipo: R-Real, P-Previsto')
    versao_atual = db.Column(String,   comment='Versão Atual')
    data_per_ini = db.Column(Date,  comment='Data Período Inicial')
    data_per_fin = db.Column(Date,  comment='Data Período Final')


class FinRecibo(generic_model, db.Model):
    __tablename__ = 'fin_recibo'
    __table_args__ = {'comment': 'Financeiro-Recibo'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    data_recibo = db.Column(Date, comment='Data do Recibo')
    conteudo = db.Column(Text,  comment='Conteudo do Recido')
    valor = db.Column(db.Numeric(18, 2),  comment='Valor')
    ger_pessoa_endereco_id = db.Column(db.String(36), comment='ID do Endereço da Pessoa')
    nome_pessoa = db.Column(db.String(100), comment='Nome - Pessoa')
    nr_doc_pessoa = db.Column(db.String(50), comment='Número do Documento - Pessoa')
    tipo_doc_pessoa = db.Column(db.String(50), comment='Tipo do Documento - Pessoa')
    status = db.Column(db.String(2),  comment='Status: PD-Pendente, AS-Assinado, EA-Enviado para Assinatura')
    status_observacao = db.Column(db.String(250), comment='Observação do Status')


class FisCest(generic_model, db.Model):
    __tablename__ = 'fis_cest'
    __table_args__ = {'comment': 'Fiscal-Cest'}

    nr_cest = db.Column(db.String(50),  comment='Numero CEST')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    data_validade = db.Column(Date,  comment='Data Validade')


class FisCfop(generic_model, db.Model):
    __tablename__ = 'fis_cfop'
    __table_args__ = {'comment': 'Fiscal-Cfop'}

    nr_cfop = db.Column(db.String(50),  comment='Numero Cfop')
    nome = db.Column(db.String(100),  comment='Nome Cfop')
    ativo = db.Column(db.String(1),  comment='Ativo')
    data_validade = db.Column(Date,  comment='Data Validade')


class FisDocTipo(generic_model, db.Model):
    __tablename__ = 'fis_doc_tipo'
    __table_args__ = {'comment': 'Fiscal-Tipo de Documento'}

    modelo = db.Column(db.String(50),  comment='Modelo')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')


class FisNb(generic_model, db.Model):
    __tablename__ = 'fis_nbs'
    __table_args__ = {'comment': 'Fiscal-Nbs'}

    nr_nbs = db.Column(db.String(50),  comment='Numero NBS')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    data_validade = db.Column(Date,  comment='Data Validade')


class FisNcm(generic_model, db.Model):
    __tablename__ = 'fis_ncm'
    __table_args__ = {'comment': 'Fiscal-Ncm'}

    nr_ncm = db.Column(db.String(50),  comment='Numero NCM')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    data_validade = db.Column(Date,  comment='Data Validade')


class FisTributo(generic_model, db.Model):
    __tablename__ = 'fis_tributo'
    __table_args__ = {'comment': 'Fiscal-Tributo'}

    nr_tributo = db.Column(db.String(50),  comment='Numero do Tributo')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')


class GerItemservComposTipo(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_compos_tipo'
    __table_args__ = {'comment': 'Geral-Tipo de Composição do Item/Serviço'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')


class GerMarca(generic_model, db.Model):
    __tablename__ = 'ger_marca'
    __table_args__ = {'comment': 'Geral-Marca'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')


class GerPais(generic_model, db.Model):
    __tablename__ = 'ger_pais'
    __table_args__ = {'comment': 'Geral-País'}

    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nr_pais = db.Column(db.String(50),  comment='Numero País')
    sigla_pais = db.Column(db.String(50), comment='Sigla Pais')


class GerUmedida(generic_model, db.Model):
    __tablename__ = 'ger_umedida'
    __table_args__ = {'comment': 'Geral-U.Medida'}

    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_umedida = db.Column(db.String(50),  comment='Sigla da U.Medida')
    nr_umedida = db.Column(db.String(50), comment='Numero da U.Medida')


class IndCjd(generic_model, db.Model):
    __tablename__ = 'ind_cjd'
    __table_args__ = {'comment': ' Indicador-Conjuntos de Dados'}

    nome = db.Column(db.String(250), comment='Nome')
    ativo = db.Column(db.String(1), comment='Ativo')
    nome_tecnico = db.Column(db.String(50), comment='Nome técnico')


class IndCnd(generic_model, db.Model):
    __tablename__ = 'ind_cnd'
    __table_args__ = {'comment': 'Indicador-Conexão de Ind/Rel'}

    nome = db.Column(db.String(250), comment='Nome')
    ativo = db.Column(db.String(1), comment='Ativo')
    tipo = db.Column(db.String(2), comment='Tipo: S1-SQL postgres - Externo, S2-SQL postrgres - Interno')
    config_cnd = db.Column(Text, comment='Configuração Conexão (JSON)')


class IndPnl(generic_model, db.Model):
    __tablename__ = 'ind_pnl'
    __table_args__ = {'comment': 'Indicador-Painel de Relatórios'}

    nome = db.Column(db.String(250), comment='Nome')
    tipo = db.Column(db.String(1), comment='Tipo: 1-Painel de Relatórios')
    icon = db.Column(db.String(50), comment='Icone do Painel')


class IndPrm(generic_model, db.Model):
    __tablename__ = 'ind_prm'
    __table_args__ = {'comment': 'Indicador-Parametros de Ind/Rel'}

    nome = db.Column(db.String(250), comment='Nome')
    ativo = db.Column(db.String(1), comment='Ativo')
    nome_tecnico = db.Column(db.String(100), comment='Nome Técnico')
    tipo_dado = db.Column(db.String(2),  comment='Tipo de Dados: TX-Texto, DT-Data, NM-Numero')
    tipo_entrada = db.Column(db.String(2), comment='Tipo Entrada: IS-Input Simples, CS-Combo Simples, CF-Combo Fonte de Dados, SP-Separador, VL-Variável')
    internal = db.Column(db.String(1),  comment='Acesso - Interno')
    busca_tabela = db.Column(db.String(50), comment='Busca - Tabela')
    busca_campo_nome = db.Column(db.String(50), comment='Busca - Campo Nome')
    busca_campo_id = db.Column(db.String(50), comment='Busca - Campo ID')
    busca_valores = db.Column(db.String(250), comment='Busca - Valores')
    obrigatorio = db.Column(db.String(1), comment='Obrigatório: S-Sim, N-Não')
    valor_padrao = db.Column(Text, comment='Valor Padrão')
    visivel = db.Column(db.String(1), comment='Visível: S-Sim, N-Não')
    busca_tabela_classe = db.Column(db.String(50), comment='Busca - Tabela - Classe')
    busca_campo_nome_classe = db.Column(db.String(50), comment='Busca - Campo Nome - Classe')
    busca_campo_id_classe = db.Column(db.String(50), comment='Busca - Campo ID - Classe')
    valor_prefixo = db.Column(db.String(250), comment='Valor Prefixo')
    valor_sufixo = db.Column(db.String(250), comment='Valor Sufixo')


class MovTipo(generic_model, db.Model):
    __tablename__ = 'mov_tipo'
    __table_args__ = {'comment': 'Movimentação-Tipo de Movimento'}

    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_mov_tipo = db.Column(db.String(50),  comment='Sigla do Tipo do Movimento')
    tipo_mov = db.Column(db.String(10),  comment='Tipo do Movimento')
    configuracao = db.Column(Text, comment='Configuração da Tipo de Operação')


class OpeCentroTipo(generic_model, db.Model):
    __tablename__ = 'ope_centro_tipo'
    __table_args__ = {'comment': 'Operação-Tipo de Centro Entrada/Saída'}

    nome = db.Column(db.String(100),  comment='Nome')
    tipo_es = db.Column(db.String(1),  comment='Tipo de Entrada/Saída')














class Test1(generic_model, db.Model):
    __tablename__ = 'test1'

    log_date_ins = db.Column(DateTime)
    log_date_upd = db.Column(DateTime)
    dt_nascimento = db.Column(DateTime, nullable=False)


class BorUnitParam(generic_model, db.Model):
    __tablename__ = 'bor_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class BovUnitParam(generic_model, db.Model):
    __tablename__ = 'bov_unit_param'
    __table_args__ = {'comment': 'Parâmetros da pecuaria'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class CrmAviso(generic_model, db.Model):
    __tablename__ = 'crm_aviso'
    __table_args__ = {'comment': 'Atendimento-Avisos'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    descritivo = db.Column(Text,  comment='descritivo')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_aviso = db.Column(db.String(50),  comment='Sigla do Aviso')

    


class CrmChatGrupo(generic_model, db.Model):
    __tablename__ = 'crm_chat_grupo'
    __table_args__ = {'comment': 'Atendimento-Grupo de Chat'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_chat_grupo = db.Column(db.String(50),  comment='Sigla da Classificação')
    sys_user_id_orig = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário - Origem')
    sys_user_id_orig_obj = db.relationship('')
    sys_user_id_dest = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário - Destino')
    sys_user_id_dest_obj = db.relationship('')
    tipo = db.Column(db.String(1),  comment='Tipo: G-Grupo, U-Usuário')
    senha = db.Column(db.String(100), comment='Senha')
    acesso_privado = db.Column(db.String(1),  comment='Acesso Privado')

    sys_user = relationship('SysUser', primaryjoin='CrmChatGrupo.sys_user_id_dest == SysUser.id')
    sys_user1 = relationship('SysUser', primaryjoin='CrmChatGrupo.sys_user_id_orig == SysUser.id')
    


class CrmClassGrupo(generic_model, db.Model):
    __tablename__ = 'crm_class_grupo'
    __table_args__ = {'comment': 'Atendimento-Grupo de Classificação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_class_grupo = db.Column(db.String(50),  comment='Sigla do Grupo de Classificação')

    


class CrmEtapa(generic_model, db.Model):
    __tablename__ = 'crm_etapa'
    __table_args__ = {'comment': 'Atendimento-Etapa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_etapa = db.Column(db.String(50),  comment='Sigla da Etapa')

    


class CrmOrg(generic_model, db.Model):
    __tablename__ = 'crm_org'
    __table_args__ = {'comment': 'Atendimento-Organização'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_org = db.Column(db.String(50),  comment='Sigla da Organização')
    ger_visual_user = db.Column(db.String(1),   comment='Gerente visualiza atendimento de outros usuários')
    user_visual_user = db.Column(db.String(1),   comment='Usuário visualiza atendimento de outros usuários')

    


class CrmPrioridade(generic_model, db.Model):
    __tablename__ = 'crm_prioridade'
    __table_args__ = {'comment': 'Atendimento-Prioridade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_prioridade = db.Column(db.String(50),  comment='Sigla do Grupo de Classificação')

    


class CrmResposta(generic_model, db.Model):
    __tablename__ = 'crm_resposta'
    __table_args__ = {'comment': 'Atendimento-Resposta'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    descritivo = db.Column(Text,  comment='descritivo')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_resposta = db.Column(db.String(50),  comment='Sigla da Resposta')

    


class CrmStatu(generic_model, db.Model):
    __tablename__ = 'crm_status'
    __table_args__ = {'comment': 'Atendimento-Status'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_status = db.Column(db.String(50),  comment='Sigla do Status')
    tipo_status = db.Column(db.String(2),  comment='Tipo Status: AB-Aberto, PE-Pendente, AI-Andamento, AT-Andamento Transf., FN-Finalizado, CA-Cancelado')
    obrig_motivo = db.Column(db.String(1),  comment='Obriga Motivo: S-Sim, N-Não')

    


class CrmTag(generic_model, db.Model):
    __tablename__ = 'crm_tag'
    __table_args__ = {'comment': 'Atendimento-Tag'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    descritivo = db.Column(Text,  comment='descritivo')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_tag = db.Column(db.String(50),  comment='Sigla do Tag')

    


class CrmUnitParam(generic_model, db.Model):
    __tablename__ = 'crm_unit_param'
    __table_args__ = {'comment': 'Parâmetros da atendimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class CtbCentroGrupo(generic_model, db.Model):
    __tablename__ = 'ctb_centro_grupo'
    __table_args__ = {'comment': 'Contábil-Grupo de Centro'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_centro_grupo = db.Column(db.String(50),  comment='Sigla do Centro do Grupo')

    


class CtbCompGrupo(generic_model, db.Model):
    __tablename__ = 'ctb_comp_grupo'
    __table_args__ = {'comment': 'Contábil-Grupo de Componente'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_comp_grupo = db.Column(db.String(50),  comment='Sigla do Grupo de Componente')

    


class CtbContaVersao(generic_model, db.Model):
    __tablename__ = 'ctb_conta_versao'
    __table_args__ = {'comment': 'Contábil-Versão de Conta'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_versao = db.Column(db.String(50),  comment='Sigla do Versão Conta Contábil')
    versao_atual = db.Column(String,   comment='Versão Atual')
    data_valid_ini = db.Column(Date,  comment='Data Validade Inicial')

    


class CtbHistorico(generic_model, db.Model):
    __tablename__ = 'ctb_historico'
    __table_args__ = {'comment': 'Contábil-Histórico'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_historico = db.Column(db.String(50),  comment='Sigla do Histórico Contábil')

    


class CtbLote(generic_model, db.Model):
    __tablename__ = 'ctb_lote'
    __table_args__ = {'comment': 'Contábil-Lote'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_lote = db.Column(db.String(50),  comment='Sigla do Lote Contábil')

    


class CtbTipoSaldo(generic_model, db.Model):
    __tablename__ = 'ctb_tipo_saldo'
    __table_args__ = {'comment': 'Contábil-Tipo Saldo'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_tipo_saldo = db.Column(db.String(50),  comment='Sigla do Tipo Saldo')
    mes_ini_fechamento = db.Column(SmallInteger,   comment='Mês Inicial de Fechamento')
    mes_fin_fechamento = db.Column(SmallInteger,  comment='Mês Final de Fechamento')

    


class CtbUnitParam(generic_model, db.Model):
    __tablename__ = 'ctb_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class FinBanco(generic_model, db.Model):
    __tablename__ = 'fin_banco'
    __table_args__ = {'comment': 'Financeiro-Banco'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nr_banco = db.Column(db.String(50),  comment='Numero do Banco')

    


class FinClas(generic_model, db.Model):
    __tablename__ = 'fin_class'
    __table_args__ = {'comment': 'Financeiro-Classificação Financeira'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    tipo_es = db.Column(db.String(1),  comment='Tipo Entrada/Saída')
    tipo_fluxo = db.Column(db.String(2),  comment='Considerado como Pag ou Rec: PR-Pagamento / Recebimento, TR-Transfência')
    fixo_variavel = db.Column(db.String(1),  comment='F-Fixo, V-Variável')
    sigla_class = db.Column(db.String(15), comment='Sigla da Classificação')
    tipo_prev = db.Column(db.String(1), comment='Tipo Previsão: S-Sim, N-Não')

    


class FinClassAgrup(generic_model, db.Model):
    __tablename__ = 'fin_class_agrup'
    __table_args__ = {'comment': 'Financeiro-Grupo de Classificação Financeira'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    padrao = db.Column(db.String(1),  comment='Padrão')

    


class FinClassGrupo(generic_model, db.Model):
    __tablename__ = 'fin_class_grupo'
    __table_args__ = {'comment': 'Financeiro-Grupo de Classificação Financeira'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    estrutura = db.Column(db.String(50),  comment='Estrutura')
    sigla_class_grupo = db.Column(db.String(255), comment='Sigla da Classificação do Grupo')

    


class FinCondPagrec(generic_model, db.Model):
    __tablename__ = 'fin_cond_pagrec'
    __table_args__ = {'comment': 'Financeiro-Condiçao de Pagamento/Recebimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_cond_pagamento = db.Column(db.String(50),  comment='Sigla da Condiçao de Pag/Rec')
    considera_feriado = db.Column(db.String(1),  comment='Considera Feriado: S-Sim, N-Não')
    considera_final_sem = db.Column(db.String(1),  comment='Considera Final de Semana: S-Sim, N-Não')
    qnt_dia_ini = db.Column(Integer,  comment='Quantidade Dias Inicial')
    observacao = db.Column(db.String(250), comment='Observação')
    tipo_prazo = db.Column(db.String(1), comment='À prazo: S-Sim, N-Não')

    


class FinPagrecTipo(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_tipo'
    __table_args__ = {'comment': 'Financeiro-Tipo de Pag/Rec'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    aceita_entrada = db.Column(db.String(1),  comment='Aceita Entrada')
    aceita_saida = db.Column(db.String(1),  comment='Aceita Saida')

    


class FinPagrecVersao(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_versao'
    __table_args__ = {'comment': 'Financeiro-Pag/Rec Versão'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_versao = db.Column(db.String(50),  comment='Sigla Versão Pag/Rec')
    data_per_ini = db.Column(Date,  comment='Data Período Inicial')
    data_per_fin = db.Column(Date,  comment='Data Período Final')
    versao_atual = db.Column(db.String(1),   comment='Versão Atual')
    tipo_per = db.Column(db.String(1),  , comment='Tipo Período: D-Diário, M-Mensal, A-Anual')

    


class FinReciboTipo(generic_model, db.Model):
    __tablename__ = 'fin_recibo_tipo'
    __table_args__ = {'comment': 'Financeiro-Tipo de Recibo'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    padrao = db.Column(db.String(1),  comment='Padrão')

    


class FinTipoVariacao(generic_model, db.Model):
    __tablename__ = 'fin_tipo_variacao'
    __table_args__ = {'comment': 'Financeiro-Tipo de Variação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    tipo = db.Column(db.String(1),  comment='Tipo de Baixa: J-Juros; D-Descontos; A-Abatimento; M-Multa')
    valor_positivo = db.Column(db.String(1),  comment='Valor Positivo')

    


class FinUnitParam(generic_model, db.Model):
    __tablename__ = 'fin_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class FisCertificado(generic_model, db.Model):
    __tablename__ = 'fis_certificado'
    __table_args__ = {'comment': 'Fiscal-Certificado de Transmissão'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nome_arq_certificado = db.Column(db.String(250), comment='Arquivo do Certificado')
    senha = db.Column(db.String(50), comment='Senha')

    


class FisCestNcm(generic_model, db.Model):
    __tablename__ = 'fis_cest_ncm'
    __table_args__ = {'comment': 'Fiscal-Cest x Ncm'}

    fis_cest_id = db.Column(db.ForeignKey('fis_cest.id'),  comment='ID do CEST')
    fis_cest_id_obj = db.relationship('')
    fis_ncm_id = db.Column(db.ForeignKey('fis_ncm.id'),  comment='ID do NCM')
    fis_ncm_id_obj = db.relationship('')

    fis_cest = relationship('FisCest')
    fis_ncm = relationship('FisNcm')


class FisOb(generic_model, db.Model):
    __tablename__ = 'fis_obs'
    __table_args__ = {'comment': 'Fiscal-Observação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    observacao = db.Column(Text,  comment='Observação')

    


class FisUnitParam(generic_model, db.Model):
    __tablename__ = 'fis_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class GerDevice(generic_model, db.Model):
    __tablename__ = 'ger_device'
    __table_args__ = {'comment': 'Geral-Device'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_device = db.Column(db.String(50),  comment='Sigla Device')

    


class GerEmpresaGrupo(generic_model, db.Model):
    __tablename__ = 'ger_empresa_grupo'
    __table_args__ = {'comment': 'Geral-Grupo de Empresa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')

    


class GerEstNivel(generic_model, db.Model):
    __tablename__ = 'ger_est_nivel'
    __table_args__ = {'comment': 'Geral-Nivel de Estoque'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    observacao = db.Column(db.String(250), comment='Observação')
    bloq_mov_solic = db.Column(db.String(1),  comment='Bloqueia Movimento de Solicitação')
    bloq_mov_pedido = db.Column(db.String(1),  comment='Bloqueia Movimento de Pedido')

    


class GerIndex(generic_model, db.Model):
    __tablename__ = 'ger_index'
    __table_args__ = {'comment': 'Geral-Index'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_index = db.Column(db.String(50),  comment='Sigla Index')

    


class GerItemservGrupo(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_grupo'
    __table_args__ = {'comment': 'Geral-Grupo de Item/Serviço'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')

    


class GerItemservLote(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_lote'
    __table_args__ = {'comment': 'Geral-Lote do Item/Serviço'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    data_ini = db.Column(Date,  comment='Data Inicial')
    data_fin = db.Column(Date, comment='Data Final')
    observacao = db.Column(db.String(250), comment='Observação')
    data_validade = db.Column(Date, comment='Data Validade')

    


class GerMarcaModelo(generic_model, db.Model):
    __tablename__ = 'ger_marca_modelo'
    __table_args__ = {'comment': 'Geral-Marca x Modelo'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ger_marca_id = db.Column(db.ForeignKey('ger_marca.id', ondelete='CASCADE'),  comment='ID da Marca')
    ger_marca_id_obj = db.relationship('')

    ger_marca = relationship('GerMarca')
    


class GerNumeracao(generic_model, db.Model):
    __tablename__ = 'ger_numeracao'
    __table_args__ = {'comment': 'Geral-Numeração'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    serie = db.Column(db.String(3),  comment='Série')
    ultimo_nr = db.Column(Integer,  comment='Ultimo Número')

    


class GerPer(generic_model, db.Model):
    __tablename__ = 'ger_per'
    __table_args__ = {'comment': 'Geral-Períodos'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    data_dia_inicial = db.Column(Date, comment='Dia')
    dia_nome = db.Column(db.String(50), comment='Nome do Dia')
    data_semana_inicial = db.Column(Date, comment='Dia Inicial da Semana')
    semana_nome = db.Column(db.String(50), comment='Nome da Semana')
    data_quinzena_inicial = db.Column(Date, comment='Dia Inicial da Quinzena')
    quinzena_nome = db.Column(db.String(50), comment='Nome da Quinzena')
    data_mes_inicial = db.Column(Date, comment='Dia Inicial da Mês')
    mes_nome = db.Column(db.String(50), comment='Nome da Mês')
    data_bimestre_inicial = db.Column(Date, comment='Dia Inicial da Bimestre')
    bimestre_nome = db.Column(db.String(50), comment='Nome da Bimestre')
    data_trimestre_inicial = db.Column(Date, comment='Dia Inicial da Trimestre')
    trimestre_nome = db.Column(db.String(50), comment='Nome da Trimestre')
    data_quadrimestre_inicial = db.Column(Date, comment='Dia Inicial da Quadrimestre')
    quadrimestre_nome = db.Column(db.String(50), comment='Nome da Quadrimestre')
    data_semestre_inicial = db.Column(Date, comment='Dia Inicial da Semestre')
    semestre_nome = db.Column(db.String(50), comment='Nome da Semestre')
    data_ano_inicial = db.Column(Date, comment='Dia Inicial da Ano')
    ano_nome = db.Column(db.String(50), comment='Nome da Ano')

    


class GerPessoa(generic_model, db.Model):
    __tablename__ = 'ger_pessoa'
    __table_args__ = {'comment': 'Geral-Pessoa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    razao_social = db.Column(db.String(100),  comment='Razão Social')
    ativo = db.Column(db.String(1),  comment='Ativo')
    doc_cnpj = db.Column(db.String(50), comment='Doc. CNPJ')
    doc_cpf = db.Column(db.String(50), comment='Doc. CPF')
    doc_ie = db.Column(db.String(50), comment='Doc. Ins.Estadual')
    doc_im = db.Column(db.String(50), comment='Doc. Ins.Municipal')
    doc_cnae = db.Column(db.String(50), comment='Doc. CNAE')
    data_abertura = db.Column(db.String(50), comment='Data Abertura')
    doc_junta = db.Column(db.String(50), comment='Doc. Junta')
    fis_regime = db.Column(db.String(50), comment='Regime')
    fone_1 = db.Column(db.String(100), comment='Tefone 1')
    fone_2 = db.Column(db.String(100), comment='Tefone 2')
    fone_3 = db.Column(db.String(100), comment='Tefone 3')
    contato_1 = db.Column(db.String(100), comment='Contato 1')
    contato_2 = db.Column(db.String(100), comment='Contato 2')
    contato_3 = db.Column(db.String(100), comment='Contato 3')
    contrib_icms = db.Column(Integer,  comment='Tipo de Contribuinte ICMS')
    nr_rntrc = db.Column(db.String(8), comment='Numero RNTRC ')
    doc_rg = db.Column(db.String(50), comment='Doc. R.G')
    doc_rg_org_exp = db.Column(db.String(50), comment='Doc. R.G Orgão Exp.')
    doc_crc = db.Column(db.String(50), comment='Doc. C.R.C')
    doc_crc_seq = db.Column(db.String(50), comment='Doc. C.R.C Seq.')
    doc_crc_org_exp = db.Column(db.String(50), comment='Doc. C.R.C Orgão Exp.')
    sigla_pes = db.Column(db.String(50), comment='Sigla')
    nr_registro_est_cte = db.Column(db.String(50), comment='Número do registro estadual de CTE')
    doc_taf = db.Column(db.String(50), comment='Termo de autorização de fretamento')
    data_valid = db.Column(Date, comment='Data de Validação')

    


class GerUf(generic_model, db.Model):
    __tablename__ = 'ger_uf'
    __table_args__ = {'comment': 'Geral-Unidade Federação'}

    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nr_uf = db.Column(db.String(50),  comment='Numero Uf')
    ger_pais_id = db.Column(db.ForeignKey('ger_pais.id'),  comment='ID do Pais')
    ger_pais_id_obj = db.relationship('')
    sigla_uf = db.Column(db.String(50),  comment='Sigla da Uf')

    ger_pais = relationship('GerPais')


class GerUmedidaConv(generic_model, db.Model):
    __tablename__ = 'ger_umedida_conv'
    __table_args__ = {'comment': 'Geral-U.Medida - Conversão'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ger_umedida_id_de = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID de U.Medida - De')
    ger_umedida_id_de_obj = db.relationship('')
    ger_umedida_id_para = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID de U.Medida - Para')
    ger_umedida_id_para_obj = db.relationship('')
    fator_mult = db.Column(db.Numeric(18, 6),  comment='Fator Multiplacao')

    ger_umedida = relationship('GerUmedida', primaryjoin='GerUmedidaConv.ger_umedida_id_de == GerUmedida.id')
    ger_umedida1 = relationship('GerUmedida', primaryjoin='GerUmedidaConv.ger_umedida_id_para == GerUmedida.id')
    


class GerUnitParam(generic_model, db.Model):
    __tablename__ = 'ger_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class Ind(generic_model, db.Model):
    __tablename__ = 'ind'
    __table_args__ = {'comment': 'Indicador-Configuração de Indicadores'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    sigla_ind = db.Column(db.String(50), comment='Sigla Indicador')
    nome = db.Column(db.String(100), comment='Nome')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'), comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    casas_dec = db.Column(Integer, comment='Casas Decimais')
    campo_ordenacao = db.Column(db.String(50), comment='Campo Ordenação')
    metodo_ordenacao = db.Column(Integer, comment='Metodo: 1-Crescente: 2-Descrescente')
    totalizador_atributo = db.Column(Integer, comment='1-Nenhum; 2-Soma; 3-Média')
    exibir_media_real = db.Column(db.String(1), comment='Exibir Media do Valor Real')
    exibir_media_meta = db.Column(db.String(1), comment='Exibir Media do Valor Meta')
    exibir_dia = db.Column(db.String(1), comment='Exibir Dia')
    exibir_semana = db.Column(db.String(1), comment='Exibir Semana')
    exibir_quinzena = db.Column(db.String(1), comment='Exibir Quinzena')
    exibir_mes = db.Column(db.String(1), comment='Exibir Mês')
    exibir_bimestre = db.Column(db.String(1), comment='Exibir Bimestre')
    exibir_trimestre = db.Column(db.String(1), comment='Exibir Trimestre')
    exibir_quadrimestre = db.Column(db.String(1), comment='Exibir Quadrimestre')
    exibir_semestre = db.Column(db.String(1), comment='Exibir Semestre')
    exibir_ano = db.Column(db.String(1), comment='Exibir Ano')
    acumular_semana = db.Column(db.String(1), comment='Acumular Valores na Semana')
    acumular_quinzena = db.Column(db.String(1), comment='Acumular Valores na Quinzena')
    acumular_mes = db.Column(db.String(1), comment='Acumular Valores na Mês')
    acumular_bimestre = db.Column(db.String(1), comment='Acumular Valores na Bimestre')
    acumular_trimestre = db.Column(db.String(1), comment='Acumular Valores na Trimestre')
    acumular_quadrimestre = db.Column(db.String(1), comment='Acumular Valores na Quadrimestre')
    acumular_semestre = db.Column(db.String(1), comment='Acumular Valores na Semestre')
    acumular_ano = db.Column(db.String(1), comment='Acumular Valores na Ano')
    tipo_acumulo = db.Column(Integer, comment='Tipo de Acumulo: 1-Manual; 2-Soma; 3-Média; 4-Media Ponderada; 5-Ultimo; 6-Maior; 7-Menor')
    ind_id_ponderacao = db.Column(db.ForeignKey('ind.id'), comment='ID do Indicador para Ponderação')
    ind_id_ponderacao_obj = db.relationship('')
    grafico_tipo_atributo = db.Column(Integer, comment='Tipo de Grafico para Atributos: 1-Coluna; 2-Linha; 3-Area')
    grafico_valor_vazio_zero = db.Column(db.String(1), comment='Exibir Zero para valores vazios do Gráfico')
    grafico_tipo_ind = db.Column(Integer, comment='Tipo de Gráfico para Indicador: 1-Coluna; 2-Pizza')

    ger_umedida = relationship('GerUmedida')
    parent = relationship('Ind', remote_side=[id])
    


class IndFtd(generic_model, db.Model):
    __tablename__ = 'ind_ftd'
    __table_args__ = {'comment': 'Indicador-Fonte de Dados de Ind/Rel'}

    nome = db.Column(db.String(250), comment='Nome')
    ativo = db.Column(db.String(1), comment='Ativo')
    ind_cnd_id = db.Column(db.ForeignKey('ind_cnd.id'), comment='ID da Conexão de Ind/Rel   ')
    ind_cnd_id_obj = db.relationship('')
    config_ftd = db.Column(Text, comment='Configuração SQL,Etc (JSON)')
    nome_tecnico = db.Column(db.String(50), comment='Nome técnico')

    ind_cnd = relationship('IndCnd')


class IndGrupo(generic_model, db.Model):
    __tablename__ = 'ind_grupo'
    __table_args__ = {'comment': 'Indicador-Grupo'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ordem_exibicao = db.Column(Integer,  comment='Ordem_Exibição')
    sigla_grupo = db.Column(db.String(50),  comment='Sigla do Grupo')

    


class IndSubgrupo(generic_model, db.Model):
    __tablename__ = 'ind_subgrupo'
    __table_args__ = {'comment': 'Indicador-Sub-Grupo'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ordem_exibicao = db.Column(Integer,  comment='Ordem_Exibição')
    sigla_subgrupo = db.Column(db.String(50),  comment='Sigla do Sub-Grupo')

    


class IndUnitParam(generic_model, db.Model):
    __tablename__ = 'ind_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class MobUnitParam(generic_model, db.Model):
    __tablename__ = 'mob_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class MovStatu(generic_model, db.Model):
    __tablename__ = 'mov_status'
    __table_args__ = {'comment': 'Movimentação-Status do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_mov_status = db.Column(db.String(50),  comment='Sigla do Status do Movimento')
    tipo_status = db.Column(db.String(1),  comment='Tipo do Status (F - Finalizado; P - Pendente; C - Cancelado, E-Erro)')

    


class MovUnitParam(generic_model, db.Model):
    __tablename__ = 'mov_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class OpeAtividadeGrupo(generic_model, db.Model):
    __tablename__ = 'ope_atividade_grupo'
    __table_args__ = {'comment': 'Operação-Grupo de Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_atividade_grupo = db.Column(db.String(50),  comment='Sigla de Grupo de Atividade')
    ordem = db.Column(db.String(3),  comment='Ordem')

    


class OpeAtividadeSistema(generic_model, db.Model):
    __tablename__ = 'ope_atividade_sistema'
    __table_args__ = {'comment': 'Operação-Sistema da Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_atividade_grupo = db.Column(db.String(50), comment='Sigla do Sistema da Atividade')

    


class OpeCentro2OrdStatu(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord_status'
    __table_args__ = {'comment': 'Operação-Status da Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ord_status = db.Column(db.String(50),  comment='Sigla do Status da Ordem de Operação')
    tipo_status = db.Column(db.String(1),  comment='Tipo do Status (L - Liquidada; F - Finalizado; P - Pendente; C - Cancelado, A-Andamento)')

    


class OpeCentro2OrdTipo(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord_tipo'
    __table_args__ = {'comment': 'Operação-Tipo da Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ord_tipo = db.Column(db.String(50),  comment='Sigla do Tipo da Ordem')
    valida_saldo_area_aberta = db.Column(db.String(1),  comment='Valida saldo Área em aberto: S-Sim, N-Não, A-Aviso')
    valida_prev_itemserv = db.Column(db.String(1),  comment='Valida previsão Item/Serviço: S-Sim, N-Não, A-Aviso')
    valida_prev_rec = db.Column(db.String(1),  comment='Valida previsão Recurso: S-Sim, N-Não, A-Aviso')
    valida_regra_config = db.Column(db.String(1),  comment='Valida regra configurável: S-Sim, N-Não, A-Aviso')
    valida_tipo_executor = db.Column(db.String(2),  comment='Valida tipo executor: SP-Sim-Próprio, ST-Sim-Terceiro, N-Não, AP-Aviso-Próprio, AT-Aviso-Terceiro')
    valida_rec_equip = db.Column(db.String(1),  comment='Valida Recurso - Equipamento: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_rec_pessoa = db.Column(db.String(1),  comment='Obriga Recurso - Pessoa: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_itemserv_i = db.Column(db.String(1),  comment='Obriga Item: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_itemserv_s = db.Column(db.String(1),  comment='Obriga Serviço: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_tipo_prop_rec_equip = db.Column(db.String(2),  comment='Valida tipo prop. Recurso - Equipamento: SP-Sim-Próprio, ST-Sim-Terceiro, N-Não, AP-Aviso-Próprio, AT-Aviso-Terceiro')
    valida_tipo_prop_rec_pessoa = db.Column(db.String(2),  comment='Valida tipo prop. Recurso - Pessoa: SP-Sim-Próprio, ST-Sim-Terceiro, N-Não, AP-Aviso-Próprio, AT-Aviso-Terceiro')

    


class OpeCentroSubtipo(generic_model, db.Model):
    __tablename__ = 'ope_centro_subtipo'
    __table_args__ = {'comment': 'Operação-Sub-Tipo de Centro Entrada/Saída'}

    nome = db.Column(db.String(100),  comment='Nome')
    ope_centro_tipo_id = db.Column(db.ForeignKey('ope_centro_tipo.id'),  comment='ID do Tipo de Centro Entrada/Saída')
    ope_centro_tipo_id_obj = db.relationship('')
    tipo_destinacao = db.Column(db.String(1), comment='Tipo destinação: P-Pessoa, E-Equipamento, T-Estoque, A-Area')

    ope_centro_tipo = relationship('OpeCentroTipo')


class OpeCentroVersao(generic_model, db.Model):
    __tablename__ = 'ope_centro_versao'
    __table_args__ = {'comment': 'Operação-Versão da Operação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_versao = db.Column(db.String(50),  comment='Sigla da Versão da Operação')
    versao_atual = db.Column(db.String(1),  comment='Versão Atual')
    data_per_ini = db.Column(Date,  comment='Data Período Inicial')
    data_per_fin = db.Column(Date,  comment='Data Período Final')
    tipo_per = db.Column(db.String(1),  comment='Tipo Período: D-Diário, M-Mensal, A-Anual')

    


class OpeCicloVar(generic_model, db.Model):
    __tablename__ = 'ope_ciclo_var'
    __table_args__ = {'comment': 'Operação-Ciclo da Variedade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ope_ciclo_var = db.Column(db.String(50), comment='Sigla do Cliclo da Variedade')

    


class OpeCompartGrupo(generic_model, db.Model):
    __tablename__ = 'ope_compart_grupo'
    __table_args__ = {'comment': 'Operação-Grupo do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_grupo = db.Column(db.String(50),  comment='Sigla de Grupo do Compartimento')

    


class OpeCompartMedida(generic_model, db.Model):
    __tablename__ = 'ope_compart_medida'
    __table_args__ = {'comment': 'Operação-Medida do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_medida = db.Column(db.String(50),  comment='Sigla da Medida do Compartimento')

    


class OpeCompartPosicao(generic_model, db.Model):
    __tablename__ = 'ope_compart_posicao'
    __table_args__ = {'comment': 'Operação-Posição do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_posicao = db.Column(db.String(50),  comment='Sigla da Posição do Compartimento')
    numero_eixo = db.Column(SmallInteger,   comment='Numero Eixo')
    posicao = db.Column(db.String(1),  comment='Posição: D-Dianteiro, T-Traseiro')
    banda_montagem = db.Column(db.String(1),  comment='Banda Montagem: I-Interna, E-Externa')
    lado_montagem = db.Column(db.String(1),  comment='Lado Montagem: D-Direito, E-Esquerdo, C-Central')

    


class OpeCompartStatu(generic_model, db.Model):
    __tablename__ = 'ope_compart_status'
    __table_args__ = {'comment': 'Operação-Status do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_status = db.Column(db.String(50),  comment='Sigla do Status do Compartimento')
    tipo_status = db.Column(db.String(1),  comment='Tipo do Status: M-Montado/Utilizando, D-Desmontado/Parado, C-Cancelado/Eliminado')

    


class OpeEspac(generic_model, db.Model):
    __tablename__ = 'ope_espac'
    __table_args__ = {'comment': 'Operação-Espaçamento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_espac = db.Column(db.String(50), comment='Sigla do Espacamento')

    


class OpeEstagio(generic_model, db.Model):
    __tablename__ = 'ope_estagio'
    __table_args__ = {'comment': 'Operação-Estágio'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_estagio = db.Column(db.String(50),  comment='Sigla do Estágio')

    


class OpeOcorGrupo(generic_model, db.Model):
    __tablename__ = 'ope_ocor_grupo'
    __table_args__ = {'comment': 'Operação-Grupo de Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ocor_grupo = db.Column(db.String(50),  comment='Sigla de Grupo de Ocorrência')

    


class OpeOcorStatu(generic_model, db.Model):
    __tablename__ = 'ope_ocor_status'
    __table_args__ = {'comment': 'Operação-Status da Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ocor_status = db.Column(db.String(50),  comment='Sigla do Status da Ocorrência')
    tipo_status = db.Column(db.String(1),  comment='Tipo do Status: A-Aberta, N-Andamento,F-Solucionada,C-Cancelada')

    


class OpeOcorTipo(generic_model, db.Model):
    __tablename__ = 'ope_ocor_tipo'
    __table_args__ = {'comment': 'Operação-Tipo de Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ocor_tipo = db.Column(db.String(50),  comment='Sigla de Tipo de Ocorrência')
    tipo = db.Column(db.String(1),  comment='Tipo: A-Área, E-Equipamento')
    obrig_ope_compart = db.Column(db.String(1),  comment='Obriga Compartimento: N-Não, S-Sim, O-Opcional')

    


class OpePeriodo(generic_model, db.Model):
    __tablename__ = 'ope_periodo'
    __table_args__ = {'comment': 'Operação-Período'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_periodo = db.Column(db.String(50),  comment='Sigla da Período da Operação')
    data_ini = db.Column(Date,  comment='Data Inicial')
    data_fin = db.Column(Date,  comment='Data Final')

    


class OpeRegiao(generic_model, db.Model):
    __tablename__ = 'ope_regiao'
    __table_args__ = {'comment': 'Operação-Região'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_regiao = db.Column(db.String(50), comment='Sigla do Espacamento')

    


class OpeTipoSolo(generic_model, db.Model):
    __tablename__ = 'ope_tipo_solo'
    __table_args__ = {'comment': 'Operação-Tipo de Solo'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_tipo_solo = db.Column(db.String(50), comment='Sigla do Tipo de Solo')

    


class OpeUnitParam(generic_model, db.Model):
    __tablename__ = 'ope_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class PtoMedidor(generic_model, db.Model):
    __tablename__ = 'pto_medidor'
    __table_args__ = {'comment': 'Ponto-Medidor / Relógio'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_medidor = db.Column(db.String(50), comment='Sigla do Medidor / Relógio')

    


class PtoUnitParam(generic_model, db.Model):
    __tablename__ = 'pto_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class RhmUnitParam(generic_model, db.Model):
    __tablename__ = 'rhm_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class SysAccessLog(generic_model, db.Model):
    __tablename__ = 'sys_access_log'
    __table_args__ = {'comment': 'System-Log de Acesso'}

    login_time = db.Column(db.TIMESTAMP(), server_default=text("now()"), comment='Hora de Login')
    access_ip = db.Column(db.String(45), comment='IP de Acesso')
    system_user_id = db.Column(db.ForeignKey('sys_user.id'), nullable=False)
    system_user_id_obj = db.relationship('')
    unit_id = db.Column(db.ForeignKey('sys_unit.id'), nullable=False)
    system_id = db.Column(db.ForeignKey('sys.id'), nullable=False)
    system_id_obj = db.relationship('')

    system = relationship('Sy')
    system_user = relationship('SysUser')
    


class SysModule(generic_model, db.Model):
    __tablename__ = 'sys_module'
    __table_args__ = {'comment': 'System-Modulos'}

    name = db.Column(db.String(100),  comment='Nome')
    sigla_module = db.Column(db.String(50),  comment='Sigla do Modulo')
    sys_id = db.Column(db.ForeignKey('sys.id'),  comment='ID do Sistema')
    sys_id_obj = db.relationship('')
    icon = db.Column(db.String(50),  comment='Icone do Modulo')
    color = db.Column(db.String(50),  comment='Cor do Modulo')

    sys = relationship('Sy')


class SysParam(generic_model, db.Model):
    __tablename__ = 'sys_param'
    __table_args__ = (
        Index('idx_sys_param', 'paramkey', 'sys_id'),
        {'comment': 'System-Parâmetro do Sistema'}
    )

    type = db.Column(db.String(250),  comment='Tipo: TX-Texto,DT-Data,VR-Valor')
    sys_id = db.Column(db.ForeignKey('sys.id'),  comment='ID do Sistema')
    sys_id_obj = db.relationship('')
    paramkey = db.Column(db.String(255),  comment='Chave do Parametro')
    paramvalue = db.Column(Text,  comment='Valor da Parâmetro')

    sys = relationship('Sy')


class SysPlan(generic_model, db.Model):
    __tablename__ = 'sys_plan'
    __table_args__ = {'comment': 'System-Plano de Utilização do Sistema'}

    name = db.Column(db.String(100), comment='Nome')
    type_plan = db.Column(db.String(2),  comment='Tipo: FR-Free, TR-Trial, PG-Pago')
    sys_id = db.Column(db.ForeignKey('sys.id'),  comment='ID do Sistema')
    sys_id_obj = db.relationship('')
    description = db.Column(Text,  comment='Descrição do Plano')

    sys = relationship('Sy')


class SysProcessLog(generic_model, db.Model):
    __tablename__ = 'sys_process_log'
    __table_args__ = {'comment': 'System-Log de Processo'}

    type_process = db.Column(db.String(50),  comment='Tipo do Processo')
    unit_id = db.Column(db.ForeignKey('sys_unit.id'), comment='ID da Unidade')
    date_ini_process = db.Column(TIMESTAMP(precision=6),  server_default=text("now()"), comment='Data Inicial do Processo')
    date_fin_process = db.Column(TIMESTAMP(precision=6), comment='Data Final do Processo')
    param_process = db.Column(Text,  comment='Parametros do Processo')
    sys_user_id = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    reversed = db.Column(db.String(1),   comment='Estornado')

    sys_user = relationship('SysUser')
    


class SysUnitParam(generic_model, db.Model):
    __tablename__ = 'sys_unit_param'
    __table_args__ = {'comment': 'Parâmetros da unidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')

    


class SysUserGroup(generic_model, db.Model):
    __tablename__ = 'sys_user_group'
    __table_args__ = {'comment': 'System-Usuário x Grupo de Acesso'}

    sys_user_id = db.Column(db.ForeignKey('sys_user.id'), index=True, comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    sys_group_id = db.Column(db.ForeignKey('sys_group.id'), index=True, comment='ID do Grupo de Acesso')
    sys_group_id_obj = db.relationship('')

    sys_group = relationship('SysGroup')
    sys_user = relationship('SysUser')


class SysUserIndPnl(generic_model, db.Model):
    __tablename__ = 'sys_user_ind_pnl'
    __table_args__ = {'comment': 'System-Usuário x Relatórios Ind/Rel'}

    sys_user_id = db.Column(db.ForeignKey('sys_user.id', ondelete='CASCADE'), index=True, comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    ind_pnl_id = db.Column(db.ForeignKey('ind_pnl.id'), index=True, comment='ID do Painel Ind/Rel')
    ind_pnl_id_obj = db.relationship('')

    ind_pnl = relationship('IndPnl')
    sys_user = relationship('SysUser')


class SysUserPreference(generic_model, db.Model):
    __tablename__ = 'sys_user_preference'
    __table_args__ = {'comment': 'System-Preferência do Usuário'}

    value = db.Column(Text, comment='Valor')
    sys_user_id = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    object_type = db.Column(db.String(36),  comment='Tipo do Objeto')
    object_id = db.Column(db.String(36),  comment='ID do Objeto')
    preference_description = db.Column(db.String(50),  comment='Descrição da Preferência')
    defaultd = db.Column(db.String(1), comment='Padrão: S-Sim, N-Não')

    sys_user = relationship('SysUser')


class SysUserUnit(generic_model, db.Model):
    __tablename__ = 'sys_user_unit'
    __table_args__ = {'comment': 'System-Usuário x Unidade (Base de Clientes)'}

    sys_user_id = db.Column(db.ForeignKey('sys_user.id', ondelete='CASCADE'), comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    unit_id = db.Column(db.ForeignKey('sys_unit.id', ondelete='CASCADE'), comment='ID da Unidade')
    owner = db.Column(db.String(1),  comment='Dono')

    sys_user = relationship('SysUser')
    


class Test1Child(generic_model, db.Model):
    __tablename__ = 'test1_child'

    log_date_ins = db.Column(DateTime)
    log_date_upd = db.Column(DateTime)
    valor_total = db.Column(db.Numeric(18, 2), nullable=False)
    valor_unit = db.Column(db.Numeric(18, 2), nullable=False)
    test1_id = db.Column(db.ForeignKey('test1.id'), nullable=False)
    test1_id_obj = db.relationship('')

    test1 = relationship('Test1')


class CrmAvisoOrg(generic_model, db.Model):
    __tablename__ = 'crm_aviso_org'
    __table_args__ = {'comment': 'Atendimento-Avisos x Organização'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    crm_aviso_id = db.Column(db.ForeignKey('crm_aviso.id'),  comment='ID do Aviso')
    crm_aviso_id_obj = db.relationship('')
    crm_org_id = db.Column(db.ForeignKey('crm_org.id'),  comment='ID da Organização')
    crm_org_id_obj = db.relationship('')

    crm_aviso = relationship('CrmAviso')
    crm_org = relationship('CrmOrg')
    


class CrmChatMsg(generic_model, db.Model):
    __tablename__ = 'crm_chat_msg'
    __table_args__ = {'comment': 'Atendimento-Mensagens do Chat'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    corpo = db.Column(Text, comment='Nome')
    sys_user_id_orig = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário - Admin')
    sys_user_id_orig_obj = db.relationship('')
    data_msg = db.Column(Date, comment='Data da Mensagem')

    crm_chat_grupo = relationship('CrmChatGrupo')
    sys_user = relationship('SysUser')
    


class CrmClassSubgrupo(generic_model, db.Model):
    __tablename__ = 'crm_class_subgrupo'
    __table_args__ = {'comment': 'Atendimento-Sub-Grupo de Classificação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_class_subgrupo = db.Column(db.String(50),  comment='Sigla do Sub-Grupo de Classificação')
    crm_class_grupo_id = db.Column(db.ForeignKey('crm_class_grupo.id'),  comment='ID do Grupo de Classificação')
    crm_class_grupo_id_obj = db.relationship('')

    crm_class_grupo = relationship('CrmClassGrupo')
    


class CrmEtapaProx(generic_model, db.Model):
    __tablename__ = 'crm_etapa_prox'
    __table_args__ = {'comment': 'Atendimento-Próximo Etapa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    crm_etapa_id = db.Column(db.ForeignKey('crm_etapa.id'),  comment='ID da Etapa')
    crm_etapa_id_obj = db.relationship('')
    crm_etapa_id_prox = db.Column(db.ForeignKey('crm_etapa.id'),  comment='ID da Etapa - Próximo')
    crm_etapa_id_prox_obj = db.relationship('')
    ordem = db.Column(SmallInteger,   comment='Ordem')

    crm_etapa = relationship('CrmEtapa', primaryjoin='CrmEtapaProx.crm_etapa_id == CrmEtapa.id')
    crm_etapa1 = relationship('CrmEtapa', primaryjoin='CrmEtapaProx.crm_etapa_id_prox == CrmEtapa.id')
    


class CrmMov(generic_model, db.Model):
    __tablename__ = 'crm_mov'
    __table_args__ = {'comment': 'Atendimento-Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    crm_etapa_id = db.Column(db.ForeignKey('crm_etapa.id'),  comment='ID da Etapa')
    crm_etapa_id_obj = db.relationship('')
    numero = db.Column(db.String(10),  comment='Número')
    data_mov = db.Column(Date,  server_default=text("now()"), comment='Data do Movimento')
    envia_email_ext = db.Column(db.String(1),   comment='Envia Email Externo')
    descritivo_ext = db.Column(Text,  comment='Descritivo Externo')
    descritivo_int = db.Column(Text, comment='Descritivo Interno')
    crm_status_id = db.Column(db.ForeignKey('crm_status.id'),  comment='ID do Status')
    crm_status_id_obj = db.relationship('')
    data_status = db.Column(Date,  server_default=text("now()"), comment='Data do Status')
    crm_prioridade_id = db.Column(db.ForeignKey('crm_prioridade.id'),  comment='ID da Prioridade')
    crm_prioridade_id_obj = db.relationship('')
    sys_user_id_solic = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário Solicitante')
    sys_user_id_solic_obj = db.relationship('')
    sys_user_id_atend_atu = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Atendente Atual')
    sys_user_id_atend_atu_obj = db.relationship('')
    sys_user_id_atend_ant = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Atendente Anterior')
    sys_user_id_atend_ant_obj = db.relationship('')
    titulo = db.Column(db.String(200), comment='Título da movimentação')

    crm_etapa = relationship('CrmEtapa')
    crm_prioridade = relationship('CrmPrioridade')
    crm_status = relationship('CrmStatu')
    sys_user = relationship('SysUser', primaryjoin='CrmMov.sys_user_id_atend_ant == SysUser.id')
    sys_user1 = relationship('SysUser', primaryjoin='CrmMov.sys_user_id_atend_atu == SysUser.id')
    sys_user2 = relationship('SysUser', primaryjoin='CrmMov.sys_user_id_solic == SysUser.id')
    


class CrmStatusProx(generic_model, db.Model):
    __tablename__ = 'crm_status_prox'
    __table_args__ = {'comment': 'Atendimento-Próximo Status'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    crm_status_id = db.Column(db.ForeignKey('crm_status.id'),  comment='ID do Status')
    crm_status_id_obj = db.relationship('')
    crm_status_id_prox = db.Column(db.ForeignKey('crm_status.id'),  comment='ID do Status - Próximo')
    crm_status_id_prox_obj = db.relationship('')
    ordem = db.Column(SmallInteger,   comment='Ordem')
    tipo_status_ant = db.Column(db.String(2), comment='Tipo Status Anterior')

    crm_status = relationship('CrmStatu', primaryjoin='CrmStatusProx.crm_status_id == CrmStatu.id')
    crm_statu = relationship('CrmStatu', primaryjoin='CrmStatusProx.crm_status_id_prox == CrmStatu.id')
    


class CtbCentro(generic_model, db.Model):
    __tablename__ = 'ctb_centro'
    __table_args__ = {'comment': 'Contábil-Centro'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_centro = db.Column(db.String(50),  comment='Sigla Centro Contábil')
    ctb_centro_grupo_id = db.Column(db.ForeignKey('ctb_centro_grupo.id'),  comment='ID do Grupo do Centro Contábil')
    ctb_centro_grupo_id_obj = db.relationship('')

    ctb_centro_grupo = relationship('CtbCentroGrupo')
    


class CtbComp(generic_model, db.Model):
    __tablename__ = 'ctb_comp'
    __table_args__ = {'comment': 'Contábil-Componente'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_comp = db.Column(db.String(50),  comment='Sigla do Componente Contábil')
    ctb_comp_grupo_id = db.Column(db.ForeignKey('ctb_comp_grupo.id'),  comment='ID do Grupo do Componente')
    ctb_comp_grupo_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    ctb_comp_id_calc_orig = db.Column(db.String(36), comment='ID do Componente Contábil - Cálculo Origem')
    fator_calc_origem = db.Column(db.Numeric(18, 6),  comment='Fator Cálculo Origem')

    ctb_comp_grupo = relationship('CtbCompGrupo')
    ger_umedida = relationship('GerUmedida')
    


class CtbContaGrupo(generic_model, db.Model):
    __tablename__ = 'ctb_conta_grupo'
    __table_args__ = {'comment': 'Contábil-Grupo de Contas'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_conta_grupo = db.Column(db.String(50),  comment='Sigla do Grupo de Conta')
    estrutura = db.Column(db.String(50),  comment='Estrutura')
    ctb_conta_versao_id = db.Column(db.ForeignKey('ctb_conta_versao.id'),  comment='ID do Versao Conta Contábil')
    ctb_conta_versao_id_obj = db.relationship('')

    ctb_conta_versao = relationship('CtbContaVersao')
    


class FinClassAgrupGrupo(generic_model, db.Model):
    __tablename__ = 'fin_class_agrup_grupo'
    __table_args__ = {'comment': 'Financeiro-Agrupamento x Grupo Classif. Financeira'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_class_grupo_id = db.Column(db.ForeignKey('fin_class_grupo.id'),  comment='ID de Grupo Classificação Financeira')
    fin_class_grupo_id_obj = db.relationship('')
    fin_class_id = db.Column(db.ForeignKey('fin_class.id'),  comment='ID de Classificação Financeira')
    fin_class_id_obj = db.relationship('')
    fin_class_agrup_id = db.Column(db.ForeignKey('fin_class_agrup.id'),  comment='ID do Grupo de Classificação Financeira')
    fin_class_agrup_id_obj = db.relationship('')

    fin_class_agrup = relationship('FinClassAgrup')
    fin_class_grupo = relationship('FinClassGrupo')
    fin_class = relationship('FinClas')
    


class FinCondPagrecConfig(generic_model, db.Model):
    __tablename__ = 'fin_cond_pagrec_config'
    __table_args__ = {'comment': 'Financeiro-Configuração de Condiçao de Pagamento/Recebimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    qnt_dia = db.Column(Integer,  comment='Quantidade Dias')
    fin_cond_pag_rec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'),  comment='ID da Condiçao de Pag/Rec')
    fin_cond_pag_rec_id_obj = db.relationship('')

    fin_cond_pag_rec = relationship('FinCondPagrec')
    


class FinDocTipo(generic_model, db.Model):
    __tablename__ = 'fin_doc_tipo'
    __table_args__ = {'comment': 'Financeiro-Tipo de Documento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nr_doc = db.Column(db.String(50), comment='Numero Documento')
    ger_numeracao_id = db.Column(db.ForeignKey('ger_numeracao.id', onupdate='CASCADE'), comment='ID da Numeração')
    ger_numeracao_id_obj = db.relationship('')

    ger_numeracao = relationship('GerNumeracao')
    


class FisIbpt(generic_model, db.Model):
    __tablename__ = 'fis_ibpt'
    __table_args__ = {'comment': 'Fiscal-Ibpt'}

    data_validade_ini = db.Column(Date,  comment='Data Validade Inicial')
    data_validade_fin = db.Column(Date,  comment='Data Validade Final')
    fis_nbs_id = db.Column(db.ForeignKey('fis_nbs.id'), comment='ID do NBS')
    fis_nbs_id_obj = db.relationship('')
    fis_ncm_id = db.Column(db.ForeignKey('fis_ncm.id'), comment='ID da NCM')
    fis_ncm_id_obj = db.relationship('')
    ger_uf_id = db.Column(db.ForeignKey('ger_uf.id'),  comment='ID da Uf')
    ger_uf_id_obj = db.relationship('')
    perc_nacional = db.Column(db.Numeric(18, 6),   comment='Percentual Aliquota Nacional')
    perc_importado = db.Column(db.Numeric(18, 6),   comment='Percentual Aliquota Importado')
    perc_municipal = db.Column(db.Numeric(18, 6),   comment='Percentual Aliquota Municipal')

    fis_nbs = relationship('FisNb')
    fis_ncm = relationship('FisNcm')
    ger_uf = relationship('GerUf')


class GerCidade(generic_model, db.Model):
    __tablename__ = 'ger_cidade'
    __table_args__ = {'comment': 'Geral-Cidade'}

    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nr_cidade = db.Column(db.String(50),  comment='Numero Cidade')
    ger_uf_id = db.Column(db.ForeignKey('ger_uf.id'),  comment='ID da Uf')
    ger_uf_id_obj = db.relationship('')

    ger_uf = relationship('GerUf')


class GerDeviceParam(generic_model, db.Model):
    __tablename__ = 'ger_device_param'
    __table_args__ = {'comment': 'Geral-Parâmetros do Device'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    sigla_param = db.Column(db.String(50),  comment='Sigla do Parametro')
    ger_device_id = db.Column(db.ForeignKey('ger_device.id', ondelete='CASCADE'),  comment='ID da Empresa')
    ger_device_id_obj = db.relationship('')
    valor_tx = db.Column(db.String(250), comment='Valor Texto')
    valor_dt = db.Column(Date, comment='Valor Data')
    valor_nm = db.Column(db.Numeric(18, 6), comment='Valor Numero')
    observacao = db.Column(db.String(250), comment='Observação')

    ger_device = relationship('GerDevice')
    


class GerIndexMov(generic_model, db.Model):
    __tablename__ = 'ger_index_mov'
    __table_args__ = {'comment': 'Geral-Movimento de Index'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    data_mov = db.Column(Date,  comment='Data Movimento')
    ger_index_id = db.Column(db.ForeignKey('ger_index.id'),  comment='ID do Index')
    ger_index_id_obj = db.relationship('')
    valor1 = db.Column(db.Numeric(18, 6),   comment='Valor 1')
    valor2 = db.Column(db.Numeric(18, 6),   comment='Valor 2')

    ger_index = relationship('GerIndex')
    


class GerItemservSubgrupo(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_subgrupo'
    __table_args__ = {'comment': 'Geral-Grupo de Item/Serviço'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ger_grupo_id = db.Column(db.ForeignKey('ger_itemserv_grupo.id'),  comment='ID do Grupo de Item/Serviço')
    ger_grupo_id_obj = db.relationship('')
    ctb_comp_id = db.Column(db.String(36), comment='ID do Componente Contábil')

    ger_grupo = relationship('GerItemservGrupo')


class GerItemservVar(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_var'
    __table_args__ = {'comment': 'Geral-Variação do Item/Serviço'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_itemserv_var = db.Column(db.String(50), comment='Sigla da Variação do Item/Serviço')
    ope_ciclo_var_id = db.Column(db.ForeignKey('ope_ciclo_var.id'), comment='ID do Cliclo da Variedade')
    ope_ciclo_var_id_obj = db.relationship('')

    ope_ciclo_var = relationship('OpeCicloVar')
    


class GerMarcaPessoa(generic_model, db.Model):
    __tablename__ = 'ger_marca_pessoa'
    __table_args__ = {'comment': 'Geral-Marca x Pessoa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_marca_id = db.Column(db.ForeignKey('ger_marca.id', ondelete='CASCADE', onupdate='CASCADE'),  comment='ID da Marca')
    ger_marca_id_obj = db.relationship('')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')

    ger_marca = relationship('GerMarca')
    ger_pessoa = relationship('GerPessoa')
    


class GerPessoaContaBanco(generic_model, db.Model):
    __tablename__ = 'ger_pessoa_conta_banco'
    __table_args__ = {'comment': 'Geral-Conta Bancária da Pessoa'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    fin_banco_id = db.Column(db.ForeignKey('fin_banco.id'),  comment='ID do Banco')
    fin_banco_id_obj = db.relationship('')
    agencia = db.Column(db.String(100),  comment='Agência')
    conta = db.Column(db.String(100),  comment='Conta')
    observacao = db.Column(db.String(250),  comment='Observacao')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')

    fin_banco = relationship('FinBanco')
    ger_pessoa = relationship('GerPessoa')


class IndCjdRelacFtd(generic_model, db.Model):
    __tablename__ = 'ind_cjd_relac_ftd'
    __table_args__ = {'comment': 'Indicador-Conjunto de Dados x Fonte de Dados Ind/Rel'}

    ind_cjd_id = db.Column(db.ForeignKey('ind_cjd.id'), comment='ID do Conjunto de Dados Ind/Rel')
    ind_cjd_id_obj = db.relationship('')
    ind_ftd_id = db.Column(db.ForeignKey('ind_ftd.id'), comment='ID da Fonte de Dados Ind/Rel')
    ind_ftd_id_obj = db.relationship('')

    ind_cjd = relationship('IndCjd')
    ind_ftd = relationship('IndFtd')


class IndFtdRelacPrm(generic_model, db.Model):
    __tablename__ = 'ind_ftd_relac_prm'
    __table_args__ = {'comment': 'Indicador-Fonte de Dados x Parâmetros Ind/Rel'}

    ind_prm_id = db.Column(db.ForeignKey('ind_prm.id'), comment='ID do Parâmetro Ind/Rel')
    ind_prm_id_obj = db.relationship('')
    ind_ftd_id = db.Column(db.ForeignKey('ind_ftd.id'), comment='ID da Fonte de Dados Ind/Rel')
    ind_ftd_id_obj = db.relationship('')

    ind_ftd = relationship('IndFtd')
    ind_prm = relationship('IndPrm')


class IndGrupoRelacSub(generic_model, db.Model):
    __tablename__ = 'ind_grupo_relac_sub'
    __table_args__ = {'comment': 'Indicador-Relacionamento de Grupo x Sub-Grupo de Indicadores'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ind_id_grupo = db.Column(db.ForeignKey('ind_grupo.id'),  comment='ID do Grupo de Indicador')
    ind_id_grupo_obj = db.relationship('')
    ind_id_subgrupo = db.Column(db.ForeignKey('ind_subgrupo.id'),  comment='ID do Sub-Grupo de Indicador')
    ind_id_subgrupo_obj = db.relationship('')

    ind_grupo = relationship('IndGrupo')
    ind_subgrupo = relationship('IndSubgrupo')
    


class IndRel(generic_model, db.Model):
    __tablename__ = 'ind_rel'
    __table_args__ = {'comment': 'Indicador-Relatórios'}

    nome = db.Column(db.String(250), comment='Nome')
    ativo = db.Column(db.String(1), comment='Ativo')
    nome_tecnico = db.Column(db.String(100), comment='Nome Técnico')
    ind_cjd_id = db.Column(db.ForeignKey('ind_cjd.id'), comment='ID do Conjunto de Dados Ind/Rel')
    ind_cjd_id_obj = db.relationship('')
    tipo = db.Column(db.String(1), server_default=text("'R'::character varying"), comment='Tipo: R-Report, D-Dashboard, C-Report Config, L-Lista Simples, F-Fonte de Dados')
    ind_ftd_id = db.Column(db.ForeignKey('ind_ftd.id'), comment='ID da Fonte de Dados Ind/Rel')
    ind_ftd_id_obj = db.relationship('')

    ind_cjd = relationship('IndCjd')
    ind_ftd = relationship('IndFtd')


class IndRelac(generic_model, db.Model):
    __tablename__ = 'ind_relac'
    __table_args__ = {'comment': 'Indicador-Relacionamento de Indicadores'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ind_id = db.Column(db.ForeignKey('ind.id'),  comment='ID do Indicador')
    ind_id_obj = db.relationship('')
    ind_id_relac = db.Column(db.ForeignKey('ind.id'),  comment='ID do Indicador - Relacionado')
    ind_id_relac_obj = db.relationship('')

    ind = relationship('Ind', primaryjoin='IndRelac.ind_id == Ind.id')
    ind1 = relationship('Ind', primaryjoin='IndRelac.ind_id_relac == Ind.id')
    


class MovOperacao(generic_model, db.Model):
    __tablename__ = 'mov_operacao'
    __table_args__ = {'comment': 'Movimentação-Operação do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_mov_operacao = db.Column(db.String(50),  comment='Sigla do Operação do Movimento')
    mov_tipo_id = db.Column(db.ForeignKey('mov_tipo.id'),  comment='ID do Tipo Movimento')
    mov_tipo_id_obj = db.relationship('')
    ger_numeracao_id = db.Column(db.ForeignKey('ger_numeracao.id'),  comment='ID de Numeração')
    ger_numeracao_id_obj = db.relationship('')
    finalidade_doc = db.Column(Integer,  comment='(1-NF-e normal,2-NF-e complementar,3-NF-e de ajuste,4-Devolução de mercadoria)')
    tipo_es = db.Column(db.String(1), comment='Tipo: E-Entrada, S-Saída, T-Transferência')
    configuracao = db.Column(Text, comment='Configuração da Operação')

    ger_numeracao = relationship('GerNumeracao')
    mov_tipo = relationship('MovTipo')
    


class OpeAtividade(generic_model, db.Model):
    __tablename__ = 'ope_atividade'
    __table_args__ = {'comment': 'Operação-Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_atividade = db.Column(db.String(50),  comment='Sigla da Atividade')
    ope_atividade_grupo_id = db.Column(db.ForeignKey('ope_atividade_grupo.id'),  comment='ID da Grupo da Atividade')
    ope_atividade_grupo_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    parada = db.Column(db.String(1),  comment='Parada: S-Sim, N-Não')
    index_bor = db.Column(db.String(50), comment='Index Atividade Bordo')
    largura = db.Column(db.Numeric(18, 6),  comment='Largura (Mt) da Operação')
    valida_seq_medicao_trab_centro = db.Column(db.String(1),  comment='Valida sequencia medição do centro trabalho: S-Sim, N-Não, A-Aviso')
    valida_saldo_area_aberta = db.Column(db.String(1),  comment='Valida saldo Área em aberto: S-Sim, N-Não, A-Aviso')
    valida_prev_itemserv = db.Column(db.String(1),  comment='Valida previsão Item/Serviço: S-Sim, N-Não, A-Aviso')
    valida_prev_rec = db.Column(db.String(1),  comment='Valida previsão Recurso: S-Sim, N-Não, A-Aviso')
    valida_regra_config = db.Column(db.String(1),  comment='Valida regra configurável: S-Sim, N-Não, A-Aviso')
    valida_tipo_executor = db.Column(db.String(2), server_default=text("'SP'::character varying"), comment='Valida tipo executor: SP-Sim-Próprio, ST-Sim-Terceiro, N-Não, AP-Aviso-Próprio, AT-Aviso-Terceiro')
    valida_rec_equip = db.Column(db.String(1),  comment='Obriga Recurso - Equipamento: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_rec_pessoa = db.Column(db.String(1),  comment='Obriga Recurso - Pessoa: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_itemserv_i = db.Column(db.String(1),  comment=' Obriga Item: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_itemserv_s = db.Column(db.String(1),  comment='Obriga Serviço: S-Sim, N-Não, A-Aviso, B-Bloqueia')
    valida_tipo_prop_rec_equip = db.Column(db.String(2), server_default=text("'SP'::character varying"), comment='Valida tipo prop. Recurso - Equipamento: SP-Sim-Próprio, ST-Sim-Terceiro, N-Não, AP-Aviso-Próprio, AT-Aviso-Terceiro')
    valida_tipo_prop_rec_pessoa = db.Column(db.String(2), server_default=text("'SP'::character varying"), comment='Valida tipo prop. Recurso - Pessoa: SP-Sim-Próprio, ST-Sim-Terceiro, N-Não, AP-Aviso-Próprio, AT-Aviso-Terceiro')
    valida_tot_area_acum_per_centro_plan = db.Column(db.String(1),  comment='Valida total de area/prod acumulada periodo por centro - Planejamento: S-Sim, N-Não, A-Aviso ')
    valida_tot_area_acum_per_centro_exec = db.Column(db.String(1),  comment='Valida total de area/prod acumulada periodo por centro - Execução: S-Sim, N-Não, A-Aviso ')
    valida_tot_area_ord_exec = db.Column(db.String(1),  comment='Valida total de area/prod por ordem - Execução: S-Sim, N-Não, A-Aviso ')

    ger_umedida = relationship('GerUmedida')
    ope_atividade_grupo = relationship('OpeAtividadeGrupo')
    


class OpeCentroGrupo(generic_model, db.Model):
    __tablename__ = 'ope_centro_grupo'
    __table_args__ = {'comment': 'Operação-Grupo de Centro Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_centro_grupo = db.Column(db.String(50),  comment='Sigla do Grupo de Centro Entrada/Saída')
    ope_centro_subtipo_id = db.Column(db.ForeignKey('ope_centro_subtipo.id'),  comment='ID do Sub-Tipo de Centro Entrada/Saída')
    ope_centro_subtipo_id_obj = db.relationship('')

    ope_centro_subtipo = relationship('OpeCentroSubtipo')
    


class OpeCentroRatTipo(generic_model, db.Model):
    __tablename__ = 'ope_centro_rat_tipo'
    __table_args__ = {'comment': 'Operação-Tipo de Rateio de Centro de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    tipo_ps = db.Column(db.String(1),  server_default=text("'P'::character varying"), comment='Tipo (P-Primario,S-Secundario)')
    observacao = db.Column(db.String(250), comment='Observação')
    tipo_apur = db.Column(db.String(1),  server_default=text("'P'::character varying"), comment='Tipo Apuração: R-Rateio, A-Apontado, V-Valor Direto')
    sigla_centro_rat_tipo = db.Column(db.String(50), comment='Sigla do Tipo de Rateio de Centro de Entrada/Saída')
    ope_centro_versao_id = db.Column(db.ForeignKey('ope_centro_versao.id'), comment='ID da Versão da Operação')
    ope_centro_versao_id_obj = db.relationship('')

    ope_centro_versao = relationship('OpeCentroVersao')
    


class OpeCompartOcor(generic_model, db.Model):
    __tablename__ = 'ope_compart_ocor'
    __table_args__ = {'comment': 'Operação-Ocorrência do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_ocor = db.Column(db.String(50),  comment='Sigla da Ocorrência de Compartimento')
    tipo_ocor = db.Column(db.String(1),  comment='Tipo da Ocorrência: M-Movimentação, D-Medidação')
    ope_compart_status_id = db.Column(db.ForeignKey('ope_compart_status.id'),  comment='ID do Status do Compartimento')
    ope_compart_status_id_obj = db.relationship('')

    ope_compart_status = relationship('OpeCompartStatu')
    


class OpeCompartSubgrupo(generic_model, db.Model):
    __tablename__ = 'ope_compart_subgrupo'
    __table_args__ = {'comment': 'Operação-Sub-Grupo do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_subgrupo = db.Column(db.String(50),  comment='Sigla de Grupo do Compartimento')
    ope_compart_grupo_id = db.Column(db.ForeignKey('ope_compart_grupo.id'),  comment='ID do Grupo de Compartimento')
    ope_compart_grupo_id_obj = db.relationship('')

    ope_compart_grupo = relationship('OpeCompartGrupo')
    


class OpeCompartTipo(generic_model, db.Model):
    __tablename__ = 'ope_compart_tipo'
    __table_args__ = {'comment': 'Operação-Tipo do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart_tipo = db.Column(db.String(50),  comment='Sigla da Ocorrência de Compartimento')
    tipo_compart = db.Column(db.String(1),  comment='Tipo do Compartimento: P-Pneu, O-Outro')
    qnt_lonas = db.Column(db.Numeric(18, 3),  server_default=text("1"), comment='Quantidade Lonas')
    qnt_sulco_min = db.Column(db.Numeric(18, 3),   comment='Quantidade Sulco Mínimo')
    qnt_sulco_max = db.Column(db.Numeric(18, 3),  comment='Quantidade Sulco Máximo')
    ope_compart_medida_id = db.Column(db.ForeignKey('ope_compart_medida.id'),  comment='ID da Medida do Compartimento')
    ope_compart_medida_id_obj = db.relationship('')

    ope_compart_medida = relationship('OpeCompartMedida')
    


class OpeOcor(generic_model, db.Model):
    __tablename__ = 'ope_ocor'
    __table_args__ = {'comment': 'Operação-Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_ocor = db.Column(db.String(50),  comment='Sigla de Ocorrência')
    ope_ocor_grupo_id = db.Column(db.ForeignKey('ope_ocor_grupo.id'),  comment='ID do Grupo de Ocorrência')
    ope_ocor_grupo_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    icon = db.Column(db.String(50),  comment='Icone da Ocorrência')
    tipo = db.Column(db.String(1),  comment='Tipo: A-Área, E-Equipamento')
    tipo_lanc = db.Column(db.String(1),  comment='Tipo Lancamento:1-Quantidade, 2-Percentual,3-Sim/Não,4-Nota')

    ger_umedida = relationship('GerUmedida')
    ope_ocor_grupo = relationship('OpeOcorGrupo')
    


class PtoMarcacao(generic_model, db.Model):
    __tablename__ = 'pto_marcacao'
    __table_args__ = {'comment': 'Ponto-Marcações'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    pto_medidor_id = db.Column(db.ForeignKey('pto_medidor.id'), comment='ID do Medidor / Relógio')
    pto_medidor_id_obj = db.relationship('')
    marc_data = db.Column(db.TIMESTAMP(), comment='Data - Marcação')
    marc_dia = db.Column(Integer, comment='Dia - Marcação')
    marc_mes = db.Column(Integer, comment='Mes - Marcação')
    marc_ano = db.Column(Integer, comment='Ano - Marcação')
    marc_hora = db.Column(Integer, comment='Hora - Marcação')
    marc_minuto = db.Column(Integer, comment='Minuto - Marcação')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')

    process = relationship('SysProcessLog')
    pto_medidor = relationship('PtoMedidor')
    




class SysPlanRestriction(generic_model, db.Model):
    __tablename__ = 'sys_plan_restriction'
    __table_args__ = {'comment': 'System-Plano de Utilização x Restrição'}

    sys_plan_id = db.Column(db.ForeignKey('sys_plan.id'),  comment='ID do Plano de Utilização do Sistema')
    sys_plan_id_obj = db.relationship('')
    sys_restriction_id = db.Column(db.ForeignKey('sys_restriction.id'),  comment='ID da Restrição do Sistema')
    sys_restriction_id_obj = db.relationship('')
    value_restriction = db.Column(Integer,  server_default=text("1"), comment='Valor da Restrição')

    sys_plan = relationship('SysPlan')
    sys_restriction = relationship('SysRestriction')


class SysProgram(generic_model, db.Model):
    __tablename__ = 'sys_program'
    __table_args__ = {'comment': 'System-Programa'}

    name = db.Column(db.String(100),  comment='Nome')
    controller = db.Column(db.String(100),  unique=True, comment='Controller')
    menu = db.Column(db.String(1),  comment='Exbir no Menu: S-Sim, N-Não')
    type_program = db.Column(db.String(1),  comment='Tipo: T-Tabelas, L-Lançamento, P-Processamento, U-Utilitário')
    module_id = db.Column(db.ForeignKey('sys_module.id'),  comment='ID do Modulo')
    module_id_obj = db.relationship('')
    icon = db.Column(db.String(50), comment='Icone do Programa')
    admin = db.Column(db.String(1),  comment='Acesso Administrador: S-Sim,N-Não')

    module = relationship('SysModule')


class SysUserChatGrupo(generic_model, db.Model):
    __tablename__ = 'sys_user_chat_grupo'
    __table_args__ = {'comment': 'System- Usuário x Grupo do Chat'}

    sys_user_id = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    crm_chat_grupo_id = db.Column(db.ForeignKey('crm_chat_grupo.id'),  comment='ID da Grupo do Chat')
    crm_chat_grupo_id_obj = db.relationship('')

    crm_chat_grupo = relationship('CrmChatGrupo')
    sys_user = relationship('SysUser')


class CrmClas(generic_model, db.Model):
    __tablename__ = 'crm_class'
    __table_args__ = {'comment': 'Atendimento-Classificação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_class = db.Column(db.String(50),  comment='Sigla da Classificação')
    crm_class_subgrupo_id = db.Column(db.ForeignKey('crm_class_subgrupo.id'),  comment='ID do Sub-Grupo de Classificação')
    crm_class_subgrupo_id_obj = db.relationship('')

    crm_class_subgrupo = relationship('CrmClassSubgrupo')
    


class CrmMovHist(generic_model, db.Model):
    __tablename__ = 'crm_mov_hist'
    __table_args__ = {'comment': 'Atendimento-Histórico do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    crm_mov_id = db.Column(db.ForeignKey('crm_mov.id'),  comment='ID da Movimento')
    crm_mov_id_obj = db.relationship('')
    data_hist = db.Column(Date,  comment='Data do Histórico')
    descritivo = db.Column(Text,  comment='Descritivo')
    visual_ext = db.Column(db.String(1),   comment='Visualização Externa')
    envia_email_ext = db.Column(db.String(1),  comment='Envia Email Externo')
    sys_user_id_hist = db.Column(db.ForeignKey('sys_user.id'),  comment='ID do Usuário do Histórico')
    sys_user_id_hist_obj = db.relationship('')

    crm_mov = relationship('CrmMov')
    sys_user = relationship('SysUser')
    


class CrmMovTag(generic_model, db.Model):
    __tablename__ = 'crm_mov_tag'
    __table_args__ = {'comment': 'Atendimento-Tag do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    crm_mov_id = db.Column(db.ForeignKey('crm_mov.id'),  comment='ID da Movimento')
    crm_mov_id_obj = db.relationship('')

    crm_mov = relationship('CrmMov')
    


class CtbConta(generic_model, db.Model):
    __tablename__ = 'ctb_conta'
    __table_args__ = {'comment': 'Contábil-Conta'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_conta = db.Column(db.String(50),  comment='Sigla Conta')
    ctb_conta_grupo_id = db.Column(db.ForeignKey('ctb_conta_grupo.id'),  comment='ID do Grupo do Conta Contábil')
    ctb_conta_grupo_id_obj = db.relationship('')
    tipo_variacao = db.Column(db.String(1),  comment='Tipo: F-Fixo, V-Variável, I-Investimento')
    tipo_dc = db.Column(db.String(1),  comment='Tipo: D-Débito, C-Crédito')
    tipo_conta = db.Column(db.String(2),  comment='Tipo Conta: 01-Ativo, 02-Passivo, 03-P.Liquido, 04-Resultado, 05-Compensação')
    ctb_conta_versao_id = db.Column(db.ForeignKey('ctb_conta_versao.id'),  comment='ID do Versao Conta Contábil')
    ctb_conta_versao_id_obj = db.relationship('')

    ctb_conta_grupo = relationship('CtbContaGrupo')
    ctb_conta_versao = relationship('CtbContaVersao')
    


class GerEmpresa(generic_model, db.Model):
    __tablename__ = 'ger_empresa'
    __table_args__ = {'comment': 'Geral-Empresa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    razao_social = db.Column(db.String(100),  comment='Razao Social')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_empresa = db.Column(db.String(50),  comment='Sigla da Empresa')
    doc_cnpj = db.Column(db.String(50), comment='Doc. CNPJ')
    doc_cpf = db.Column(db.String(50), comment='Doc. CPF')
    doc_ie = db.Column(db.String(50), comment='Doc. Ins.Estadual')
    doc_im = db.Column(db.String(50), comment='Doc. Ins.Municipal')
    doc_cnae = db.Column(db.String(50), comment='Doc. CNAE')
    data_abertura = db.Column(Date, comment='Data de Abertura')
    doc_junta = db.Column(db.String(50), comment='Doc. Junta Comercial')
    fis_regime = db.Column(db.String(50), comment='Tipo Regime: 1-Simples Nacional, 2-Simples Nacional-Excesso Rec.Bruta,3-Regime Normal ')
    data_validade_a3 = db.Column(Date, comment='Data Validade Certificado A3')
    data_validade_a1 = db.Column(Date, comment='Data Validade Certificado A1')
    end_logradouro = db.Column(db.String(100), comment='Endereço - Logradouro')
    end_logradouro_nr = db.Column(db.String(10), comment='Endereço - Numero')
    end_bairro = db.Column(db.String(100), comment='Endereço - Bairro')
    end_complemento = db.Column(db.String(100), comment='Endereço - Complemento')
    end_cep = db.Column(db.String(100), comment='Endereço - Cep')
    end_ger_cidade_id = db.Column(db.ForeignKey('ger_cidade.id'),  comment='Endereço - ID da Cidade')
    end_ger_cidade_id_obj = db.relationship('')
    fone_1 = db.Column(db.String(100), comment='Telefone 1')
    fone_2 = db.Column(db.String(100), comment='Telefone 2')
    fone_3 = db.Column(db.String(100), comment='Telefone 3')
    contato_1 = db.Column(db.String(100), comment='Contato 1')
    contato_2 = db.Column(db.String(100), comment='Contato 2')
    contato_3 = db.Column(db.String(100), comment='Contato 3')
    email_1 = db.Column(db.String(255), comment='Email 1')
    doc_rntrc = db.Column(db.String(100), comment='Doc. RNTRC')
    fis_certificado_id = db.Column(db.ForeignKey('fis_certificado.id'), comment='ID do Certificado')
    fis_certificado_id_obj = db.relationship('')
    ger_empresa_grupo_id = db.Column(db.ForeignKey('ger_empresa_grupo.id'), comment='ID do Grupo de Empresa')
    ger_empresa_grupo_id_obj = db.relationship('')
    fis_dfe_ambiente = db.Column(db.String(1), comment='Ambiente Transmissão DFE')
    fis_dfe_api_token = db.Column(Text, comment='Token da API de DFE ')
    fis_regime_trib_nfs = db.Column(db.String(1), comment='Regime Tributação da NFS: 1 – Microempresa Municipal, 2 – Estimativa, 3 – Sociedade de Profissionais, 4 – Cooperativa, 5 – Microempresário Individual (MEI), 6 – Microempresário e Empresa de Pequeno Porte (ME EPP)')
    fis_provedor_nfs = db.Column(db.String(1), comment='Provedor emissão NFS: 1-Fiorilli, 2-Ginfes')
    fis_incent_cultura = db.Column(db.String(1), comment='Incentiva Cultura: S-Sim, N-Não')
    fis_incent_fiscal_nfs = db.Column(db.String(1), comment='Possue incentivo fiscal da NFS')

    end_ger_cidade = relationship('GerCidade')
    fis_certificado = relationship('FisCertificado')
    ger_empresa_grupo = relationship('GerEmpresaGrupo')
    


class GerItemserv(generic_model, db.Model):
    __tablename__ = 'ger_itemserv'
    __table_args__ = {'comment': 'Geral-Item/Serviço'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    referencia1 = db.Column(db.String(50), comment='Referência 1')
    referencia2 = db.Column(db.String(50), comment='Referência 2')
    referencia3 = db.Column(db.String(50), comment='Referência 3')
    ger_itemserv_subgrupo_id = db.Column(db.ForeignKey('ger_itemserv_subgrupo.id'),  comment='ID do Item/Serviço do Sub-grupo')
    ger_itemserv_subgrupo_id_obj = db.relationship('')
    fis_ncm_id = db.Column(db.ForeignKey('fis_ncm.id'), comment='ID da NCM')
    fis_ncm_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    tipo = db.Column(db.String(1),  comment='Tipo (I-Item; S-Serviço)')
    tipo_ctb_comp = db.Column(db.String(1),  comment='Tipo Componente Contábil: C-Código, S-Sub-Grupo')
    origem_fiscal = db.Column(Integer,  comment='Origem Fiscal')
    fis_cest_id = db.Column(db.ForeignKey('fis_cest.id'),  comment='ID do CEST')
    fis_cest_id_obj = db.relationship('')
    fis_nbs_id = db.Column(db.ForeignKey('fis_nbs.id'), comment='ID do NBS')
    fis_nbs_id_obj = db.relationship('')
    nome_alternativo = db.Column(db.String(100), comment='Nome alternativo Ex: Insumos em relatórios')
    tipo_composicao = db.Column(db.String(1),  comment='Tipo de Composição: N-Nehum, K-Kit')
    fis_sigla_servico = db.Column(db.String(50), comment='Sigla do Item/Serv - Fiscal')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'), comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    fis_doc_cnae_nfs = db.Column(db.String(50), comment='Documento Cnae da NFS')
    fis_sigla_servico_municipio = db.Column(db.String(50), comment='Sigla do Item/Serv - Fiscal do Municipio')
    sigla_itemserv = db.Column(db.String(15), comment='Sigla do Item/Serviço')

    ctb_comp = relationship('CtbComp')
    fis_cest = relationship('FisCest')
    fis_nbs = relationship('FisNb')
    fis_ncm = relationship('FisNcm')
    ger_itemserv_subgrupo = relationship('GerItemservSubgrupo')
    ger_umedida = relationship('GerUmedida')
    


class GerPessoaEndereco(generic_model, db.Model):
    __tablename__ = 'ger_pessoa_endereco'
    __table_args__ = {'comment': 'Geral-Endereço da Pessoa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID de Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    ativo = db.Column(db.String(1),  comment='Ativo')
    tipo = db.Column(db.String(1),  comment='Tipo (F-Fiscal; C-Cobrança; E-Entrega)')
    padrao = db.Column(db.String(1),  comment='Padrão (S-Sim; N-Não)')
    end_logradouro = db.Column(db.String(100), comment='Endereço - Logradouro')
    end_logradouro_nr = db.Column(db.String(10), comment='Endereço - Logradouro Numero')
    end_bairro = db.Column(db.String(100), comment='Endereço - Logradouro Bairro')
    end_complemento = db.Column(db.String(100), comment='Endereço - Logradouro Complemento')
    end_cep = db.Column(db.String(100), comment='Endereço - Logradouro Cep')
    end_ger_cidade_id = db.Column(db.ForeignKey('ger_cidade.id'),  comment='Endereço - ID da Cidade')
    end_ger_cidade_id_obj = db.relationship('')
    fone = db.Column(db.String(100), comment='Telefone')
    email = db.Column(db.String(100), comment='Email')
    contato = db.Column(db.String(100), comment='Contato')

    end_ger_cidade = relationship('GerCidade')
    ger_pessoa = relationship('GerPessoa')
    


class IndPnlRelacRel(generic_model, db.Model):
    __tablename__ = 'ind_pnl_relac_rel'
    __table_args__ = {'comment': 'Indicador-Painel x Relatório Ind/Rel'}

    ind_pnl_id = db.Column(db.ForeignKey('ind_pnl.id'), comment='ID do Painel Ind/Rel')
    ind_pnl_id_obj = db.relationship('')
    ind_rel_id = db.Column(db.ForeignKey('ind_rel.id'), comment='ID do Relatório')
    ind_rel_id_obj = db.relationship('')

    ind_pnl = relationship('IndPnl')
    ind_rel = relationship('IndRel')


class IndRelRelacPrm(generic_model, db.Model):
    __tablename__ = 'ind_rel_relac_prm'
    __table_args__ = {'comment': 'Indicador-Relatório x Parâmetros Ind/Rel'}

    ind_prm_id = db.Column(db.ForeignKey('ind_prm.id'),  comment='ID do Parâmetro Ind/Rel')
    ind_prm_id_obj = db.relationship('')
    ind_rel_id = db.Column(db.ForeignKey('ind_rel.id'),  comment='ID do Relatório')
    ind_rel_id_obj = db.relationship('')
    ordem_exib = db.Column(Integer,  comment='Ordem Exibição')
    valor_padrao = db.Column(JSON, comment='Valor Padrão')

    ind_prm = relationship('IndPrm')
    ind_rel = relationship('IndRel')


class IndRelVar(generic_model, db.Model):
    __tablename__ = 'ind_rel_var'
    __table_args__ = {'comment': 'Indicador-Relatório x Variáveis'}

    ind_rel_id = db.Column(db.ForeignKey('ind_rel.id'),  comment='ID do Relatório')
    ind_rel_id_obj = db.relationship('')
    var_nome_tecnico = db.Column(db.String(50),  comment='Nome da Variável - Técnico')
    var_nome_descritivo = db.Column(db.String(50),  comment='Nome da Variável - Descritivo')
    var_agrupavel = db.Column(db.String(1),  comment='Agrupável')
    ordem_padrao = db.Column(Integer,   comment='Ordem Padrão')
    largura = db.Column(db.Numeric(18, 2), comment='Largura')
    visivel = db.Column(db.String(1), comment='Visível: S-Sim,N-Não')
    var_nome_tecnico_prefixo = db.Column(db.String(50), comment='Prefixo do Nome Técnico')

    ind_rel = relationship('IndRel')


class MovOperacaoStatu(generic_model, db.Model):
    __tablename__ = 'mov_operacao_status'
    __table_args__ = {'comment': 'Movimentação-Operação x Status do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_operacao_id = db.Column(db.ForeignKey('mov_operacao.id'),  comment='ID da Operação do Movimento')
    mov_operacao_id_obj = db.relationship('')
    mov_status_id = db.Column(db.ForeignKey('mov_status.id'),  comment='ID do Status do Movimento')
    mov_status_id_obj = db.relationship('')
    mov_status_id_prox = db.Column(db.ForeignKey('mov_status.id'), comment='ID do Status do Movimento - Próximo')
    mov_status_id_prox_obj = db.relationship('')
    mov_operacao_id_prox = db.Column(db.ForeignKey('mov_operacao.id'), comment='ID do Status do Movimento - Próximo')
    mov_operacao_id_prox_obj = db.relationship('')

    mov_operacao = relationship('MovOperacao', primaryjoin='MovOperacaoStatu.mov_operacao_id == MovOperacao.id')
    mov_operacao1 = relationship('MovOperacao', primaryjoin='MovOperacaoStatu.mov_operacao_id_prox == MovOperacao.id')
    mov_status = relationship('MovStatu', primaryjoin='MovOperacaoStatu.mov_status_id == MovStatu.id')
    mov_statu = relationship('MovStatu', primaryjoin='MovOperacaoStatu.mov_status_id_prox == MovStatu.id')
    


class OpeAtividadeRelacProd(generic_model, db.Model):
    __tablename__ = 'ope_atividade_relac_prod'
    __table_args__ = {'comment': 'Operação-Relacionamento de Atividade Produtivas'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'),  comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    ope_atividade_id_prod = db.Column(db.ForeignKey('ope_atividade.id'),  comment='ID da Atividade de Produção')
    ope_atividade_id_prod_obj = db.relationship('')
    ordem_visual = db.Column(db.String(1),  comment='Ordem Visualização: 1,2,3')

    ope_atividade = relationship('OpeAtividade', primaryjoin='OpeAtividadeRelacProd.ope_atividade_id == OpeAtividade.id')
    ope_atividade1 = relationship('OpeAtividade', primaryjoin='OpeAtividadeRelacProd.ope_atividade_id_prod == OpeAtividade.id')
    


class OpeCentro1(generic_model, db.Model):
    __tablename__ = 'ope_centro1'
    __table_args__ = {'comment': 'Operação-Centro Nível 1 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_centro1 = db.Column(db.String(50),  comment='Sigla do Centro 1 Entrada/Saída')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    ope_centro_subtipo_id = db.Column(db.ForeignKey('ope_centro_subtipo.id'),  comment='ID do Sub-Tipo de Centro Entrada/Saída')
    ope_centro_subtipo_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'), comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    ctb_comp = relationship('CtbComp')
    ger_pessoa = relationship('GerPessoa')
    ope_centro_subtipo = relationship('OpeCentroSubtipo')
    


class OpeCentroRatPeriodo(generic_model, db.Model):
    __tablename__ = 'ope_centro_rat_periodo'
    __table_args__ = {'comment': 'Operação-Período de Rateio de Centro de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    data_ini = db.Column(Date,  comment='Data Inicial')
    ope_centro_rat_tipo_id = db.Column(db.ForeignKey('ope_centro_rat_tipo.id'),  comment='ID do Tipo de Rateio de Centro de Entrada/Saída')
    ope_centro_rat_tipo_id_obj = db.relationship('')
    tipo_rp = db.Column(db.String(1), comment='Tipo: R-Real, P-Previsto')

    ope_centro_rat_tipo = relationship('OpeCentroRatTipo')
    


class OpeCentroRend(generic_model, db.Model):
    __tablename__ = 'ope_centro_rend'
    __table_args__ = {'comment': 'Operação-Rendimentos por Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'),  server_default=text("'P'::character varying"), comment='Tipo (P-Primario,S-Secundario)')
    ope_atividade_id_obj = db.relationship('')
    ope_centro_versao_id = db.Column(db.ForeignKey('ope_centro_versao.id'),  comment='ID da Versão da Operação')
    ope_centro_versao_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')

    ope_atividade = relationship('OpeAtividade')
    ope_centro_versao = relationship('OpeCentroVersao')
    


class OpeCentroSubgrupo(generic_model, db.Model):
    __tablename__ = 'ope_centro_subgrupo'
    __table_args__ = {'comment': 'Operação-Sub-Grupo de Centro Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_centro_subgrupo = db.Column(db.String(50),  comment='Sigla do Sub-Grupo de Centro Entrada/Saída')
    ope_centro_grupo_id = db.Column(db.ForeignKey('ope_centro_grupo.id'),  comment='ID do Grupo de Centro Entrada/Saída')
    ope_centro_grupo_id_obj = db.relationship('')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'), comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    icon = db.Column(db.String(50), comment='Icone para Relatórios')

    ctb_comp = relationship('CtbComp')
    ope_centro_grupo = relationship('OpeCentroGrupo')
    


class OpeCompart(generic_model, db.Model):
    __tablename__ = 'ope_compart'
    __table_args__ = {'comment': 'Operação-Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_compart = db.Column(db.String(50),  comment='Sigla do Compartimento')
    capacidade = db.Column(db.Numeric(18, 6),   comment='Capacidade - Padrão')
    valida_itemserv = db.Column(db.String(1),  comment='Valida Item/Serviço')
    medicao_trab_centro = db.Column(db.String(1),   comment='Medicao de Trabalho: P-Principal, S-Secundário, N-Nenhum')
    ope_compart_subgrupo_id = db.Column(db.ForeignKey('ope_compart_subgrupo.id'), comment='ID do Sub-Grupo do Compartimento')
    ope_compart_subgrupo_id_obj = db.relationship('')
    data_aquisicao = db.Column(db.String(255), comment='Data de Aquisição')
    data_baixa = db.Column(db.String(255), comment='Data da Baixa')
    ope_compart_status_id = db.Column(db.ForeignKey('ope_compart_status.id'), comment='ID do Status do Compartimento')
    ope_compart_status_id_obj = db.relationship('')
    data_status = db.Column(Date, comment='Data do Status')
    observacao = db.Column(db.String(250), comment='Observação')
    valor_aquisicao = db.Column(db.Numeric(18, 2),   comment='Valor Aquisição')
    numero_serie = db.Column(db.String(100), comment='Número Série')

    ope_compart_status = relationship('OpeCompartStatu')
    ope_compart_subgrupo = relationship('OpeCompartSubgrupo')
    





class CtbLanc(generic_model, db.Model):
    __tablename__ = 'ctb_lanc'
    __table_args__ = {'comment': 'Contábil-Lançamentos'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    numero_lanc = db.Column(db.String(50),  comment='Ativo')
    data_lanc = db.Column(Date,  comment='Data Lançamento')
    ctb_lote_id = db.Column(db.ForeignKey('ctb_lote.id'),  comment='ID do Lote Contábil')
    ctb_lote_id_obj = db.relationship('')
    ctb_historico_id = db.Column(db.ForeignKey('ctb_historico.id'),  comment='ID do Histórico Contábil')
    ctb_historico_id_obj = db.relationship('')
    historico = db.Column(db.String(250),  comment='Histórico')
    status = db.Column(db.String(2),  server_default=text("'PD'::character varying"), comment='Satus: PD-Pendente, EA-Em analise, CD-Consciliado')
    status_observacao = db.Column(db.String(250), comment='Observação do Status')
    ctb_versao_id = db.Column(db.ForeignKey('ctb_versao.id'), comment='ID da Versão Contábil / Previsão')
    ctb_versao_id_obj = db.relationship('')

    ctb_historico = relationship('CtbHistorico')
    ctb_lote = relationship('CtbLote')
    ctb_versao = relationship('CtbVersao')
    ger_empresa = relationship('GerEmpresa')
    


class FinConta(generic_model, db.Model):
    __tablename__ = 'fin_conta'
    __table_args__ = {'comment': 'Financeiro-Conta Bancária'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    fin_banco_id = db.Column(db.ForeignKey('fin_banco.id'),  comment='ID do Banco')
    fin_banco_id_obj = db.relationship('')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    nr_agencia = db.Column(db.String(50),  comment='Numero Agência')
    nr_conta = db.Column(db.String(50),  comment='Numero Conta')

    fin_banco = relationship('FinBanco')
    ger_empresa = relationship('GerEmpresa')
    


class FinLote(generic_model, db.Model):
    __tablename__ = 'fin_lote'
    __table_args__ = {'comment': 'Financeiro-Lote'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    nome = db.Column(db.String(100),  comment='Nome')
    data_lote = db.Column(Date,  comment='Data do Lote')

    ger_empresa = relationship('GerEmpresa')
    


class FinPagrec(generic_model, db.Model):
    __tablename__ = 'fin_pagrec'
    __table_args__ = {'comment': 'Financeiro-Titulos Pag / Rec'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'),  comment='ID da Condiçao de Pag/Rec')
    fin_cond_pagrec_id_obj = db.relationship('')
    numero_parc_total = db.Column(Integer,  server_default=text("1"), comment='Numero Total de Parcelas')
    tipo_es = db.Column(db.String(1),  comment='Tipo: E-Entrada; S-Saída')
    fin_pagrec_tipo_id = db.Column(db.ForeignKey('fin_pagrec_tipo.id'),  comment='ID do Tipo de Pag/Rec')
    fin_pagrec_tipo_id_obj = db.relationship('')
    numero_doc_pagrec = db.Column(db.String(50),  comment='Numero Documento do Pag/Rec')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    ger_pessoa_id_pagrec = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa - Pag/Rec')
    ger_pessoa_id_pagrec_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    data_mov = db.Column(Date,  comment='Data Movimento')
    valor_pagrec = db.Column(db.Numeric(18, 2),   comment='Valor do Pag/Rec')
    ope_centro_rat_tipo_id = db.Column(db.ForeignKey('ope_centro_rat_tipo.id'), comment='ID do Tipo de Rateio de Centro de Entrada/Saída')
    ope_centro_rat_tipo_id_obj = db.relationship('')
    fin_doc_tipo_id = db.Column(db.ForeignKey('fin_doc_tipo.id'), comment='ID do Tipo de Documento')
    fin_doc_tipo_id_obj = db.relationship('')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_cond_pagrec = relationship('FinCondPagrec')
    fin_doc_tipo = relationship('FinDocTipo')
    fin_pagrec_tipo = relationship('FinPagrecTipo')
    ger_empresa = relationship('GerEmpresa')
    ger_pessoa = relationship('GerPessoa', primaryjoin='FinPagrec.ger_pessoa_id == GerPessoa.id')
    ger_pessoa1 = relationship('GerPessoa', primaryjoin='FinPagrec.ger_pessoa_id_pagrec == GerPessoa.id')
    ope_centro_rat_tipo = relationship('OpeCentroRatTipo')
    process = relationship('SysProcessLog')
    


class FinPagrecPrev(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_prev'
    __table_args__ = {'comment': 'Financeiro-Pag/Rec Previsto'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    data_per = db.Column(Date,  comment='Data do Período')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    fin_class_id = db.Column(db.ForeignKey('fin_class.id'),  comment='ID do Classificação')
    fin_class_id_obj = db.relationship('')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    fin_pagrec_versao_id = db.Column(db.ForeignKey('fin_pagrec_versao.id'),  comment='ID da Versão Pag/Rec')
    fin_pagrec_versao_id_obj = db.relationship('')
    valor01 = db.Column(db.Numeric(18, 2),   comment='Valor 01')
    valor02 = db.Column(db.Numeric(18, 2),   comment='Valor 02')
    valor03 = db.Column(db.Numeric(18, 2),   comment='Valor 03')
    valor04 = db.Column(db.Numeric(18, 2),   comment='Valor 04')
    valor05 = db.Column(db.Numeric(18, 2),   comment='Valor 05')
    valor06 = db.Column(db.Numeric(18, 2),   comment='Valor 06')
    valor07 = db.Column(db.Numeric(18, 2),   comment='Valor 07')
    valor08 = db.Column(db.Numeric(18, 2),   comment='Valor 08')
    valor09 = db.Column(db.Numeric(18, 2),   comment='Valor 09')
    valor10 = db.Column(db.Numeric(18, 2),   comment='Valor 10')
    valor11 = db.Column(db.Numeric(18, 2),   comment='Valor 11')
    valor12 = db.Column(db.Numeric(18, 2),   comment='Valor 12')
    valor13 = db.Column(db.Numeric(18, 2),   comment='Valor 13')
    valor14 = db.Column(db.Numeric(18, 2),   comment='Valor 14')
    valor15 = db.Column(db.Numeric(18, 2),   comment='Valor 15')
    valor16 = db.Column(db.Numeric(18, 2),   comment='Valor 16')
    valor17 = db.Column(db.Numeric(18, 2),   comment='Valor 17')
    valor18 = db.Column(db.Numeric(18, 2),   comment='Valor 18')
    valor19 = db.Column(db.Numeric(18, 2),   comment='Valor 19')
    valor20 = db.Column(db.Numeric(18, 2),   comment='Valor 20')
    valor21 = db.Column(db.Numeric(18, 2),   comment='Valor 21')
    valor22 = db.Column(db.Numeric(18, 2),   comment='Valor 22')
    valor23 = db.Column(db.Numeric(18, 2),   comment='Valor 23')
    valor24 = db.Column(db.Numeric(18, 2),   comment='Valor 24')
    valor25 = db.Column(db.Numeric(18, 2),   comment='Valor 25')
    valor26 = db.Column(db.Numeric(18, 2),   comment='Valor 26')
    valor27 = db.Column(db.Numeric(18, 2),   comment='Valor 27')
    valor28 = db.Column(db.Numeric(18, 2),   comment='Valor 28')
    valor29 = db.Column(db.Numeric(18, 2),   comment='Valor 29')
    valor30 = db.Column(db.Numeric(18, 2),   comment='Valor 30')
    valor31 = db.Column(db.Numeric(18, 2),   comment='Valor 31')
    tipo_es = db.Column(db.String(1), comment='Tipo: E-Entrada; S-Saída')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_class = relationship('FinClas')
    fin_pagrec_versao = relationship('FinPagrecVersao')
    ger_empresa = relationship('GerEmpresa')
    ger_pessoa = relationship('GerPessoa')
    process = relationship('SysProcessLog')
    


class GerEmpresaParam(generic_model, db.Model):
    __tablename__ = 'ger_empresa_param'
    __table_args__ = {'comment': 'Geral-Parâmetros da Empresa'}

    unit_id = db.Column(db.String(36),  comment='ID da Unidade')
    sigla_param = db.Column(db.String(50),  comment='Sigla do Parametro')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    valor_tx = db.Column(db.String(250),  comment='Valor Texto')
    valor_dt = db.Column(Date,  comment='Valor Data')
    valor_nm = db.Column(db.Numeric(18, 6),  comment='Valor Numero')
    observacao = db.Column(db.String(250),  comment='Observação')

    ger_empresa = relationship('GerEmpresa')


class GerEmpresaPessoa(generic_model, db.Model):
    __tablename__ = 'ger_empresa_pessoa'
    __table_args__ = {'comment': 'Geral-Pessoas da Empresa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    tipo = db.Column(db.String(50),  comment='Tipo: 1-Contador,2-Responsável')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    observacao = db.Column(db.String(250),  comment='Observação')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')

    ger_empresa = relationship('GerEmpresa')
    ger_pessoa = relationship('GerPessoa')
    


class GerItemservBarra(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_barra'
    __table_args__ = {'comment': 'Geral-Código de Barra do Item/Serv'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    codigo_barra = db.Column(db.String(100),  comment='Código de Barra')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')

    ger_itemserv = relationship('GerItemserv')
    


class GerItemservCompo(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_compos'
    __table_args__ = {'comment': 'Geral-Item/Serviço x Composição'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID de Unidade')
    ger_itemserv_compos_tipo_id = db.Column(db.ForeignKey('ger_itemserv_compos_tipo.id'),  comment='ID do Tipo de Composição do Item/Serviço')
    ger_itemserv_compos_tipo_id_obj = db.relationship('')
    ger_itemserv_id_de = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço - De')
    ger_itemserv_id_de_obj = db.relationship('')
    ger_itemserv_id_para = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço - Para')
    ger_itemserv_id_para_obj = db.relationship('')
    fator_mult = db.Column(db.Numeric(18, 6),   comment='Fator Multiplacao')
    qnt_compos = db.Column(db.Numeric(18, 6),   comment='Quantidade de Composicao')
    ativo = db.Column(db.String(1),  comment='Ativo')
    observacao = db.Column(db.String(250), comment='Observação')
    ordem = db.Column(db.String(50),  comment='Ordem')
    qnt_altura = db.Column(db.Numeric(18, 6),  comment='Quantidade - Altura')
    qnt_largura = db.Column(db.Numeric(18, 6), comment='Quantidade - Largura')
    qnt_comprimento = db.Column(db.Numeric(18, 6), comment='Quantidade - Cumprimento')

    ger_itemserv_compos_tipo = relationship('GerItemservComposTipo')
    ger_itemserv = relationship('GerItemserv', primaryjoin='GerItemservCompo.ger_itemserv_id_de == GerItemserv.id')
    ger_itemserv1 = relationship('GerItemserv', primaryjoin='GerItemservCompo.ger_itemserv_id_para == GerItemserv.id')
    


class GerItemservLocal(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_local'
    __table_args__ = {'comment': 'Geral-Item/Serviço x Localização'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    desc_local1 = db.Column(db.String(50),  comment='Local 1')
    desc_local2 = db.Column(db.String(100), comment='Local 2')
    desc_local3 = db.Column(db.String(100), comment='Local 3')
    observacao = db.Column(db.String(250), comment='Observação')

    ger_itemserv = relationship('GerItemserv')
    


class GerItemservPessoa(generic_model, db.Model):
    __tablename__ = 'ger_itemserv_pessoa'
    __table_args__ = {'comment': 'Geral-Item/Serviço x Pessoa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    cod_itemserv_ext = db.Column(db.String(50),  comment='Código Externo Item/Serviço da Pessoa')

    ger_itemserv = relationship('GerItemserv')
    ger_pessoa = relationship('GerPessoa')
    


class GerProcessoBloq(generic_model, db.Model):
    __tablename__ = 'ger_processo_bloq'
    __table_args__ = {'comment': 'Geral-Bloqueio de Processo por Data'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    tipo_processo = db.Column(db.String(50),  comment='Tipo de Processo')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    data_lib_inicial = db.Column(Date, comment='Data liberada - Inicial')
    data_lib_final = db.Column(Date, comment='Data liberada - Final')
    observacao = db.Column(db.String(250),  comment='Observação')

    ger_empresa = relationship('GerEmpresa')
    


class IndVrAno(generic_model, db.Model):
    __tablename__ = 'ind_vr_ano'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Ano'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrBimestre(generic_model, db.Model):
    __tablename__ = 'ind_vr_bimestre'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Bimestre'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrDia(generic_model, db.Model):
    __tablename__ = 'ind_vr_dia'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Dia'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrMe(generic_model, db.Model):
    __tablename__ = 'ind_vr_mes'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Mês'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrQuadrimestre(generic_model, db.Model):
    __tablename__ = 'ind_vr_quadrimestre'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Quadrimestre'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrQuinzena(generic_model, db.Model):
    __tablename__ = 'ind_vr_quinzena'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Quinzena'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrSemana(generic_model, db.Model):
    __tablename__ = 'ind_vr_semana'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Semana'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrSemestre(generic_model, db.Model):
    __tablename__ = 'ind_vr_semestre'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Semestre'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class IndVrTrimestre(generic_model, db.Model):
    __tablename__ = 'ind_vr_trimestre'
    __table_args__ = {'comment': 'Indicador-Valores Indicador por Trimestre'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_per_id = db.Column(db.ForeignKey('ger_per.id'),  comment='ID do Período')
    ger_per_id_obj = db.relationship('')
    ind_id = db.Column(db.String(36),  comment='ID do Indicador')
    atributo = db.Column(db.String(100),  comment='Atributo')
    valor_real = db.Column(db.Numeric(18, 6),   comment='Valor Real')
    valor_meta = db.Column(db.Numeric(18, 6),   comment='Valor da Meta')
    aprovado_exibicao = db.Column(db.String(1),  comment='Aprovado para Exibição')

    ger_empresa = relationship('GerEmpresa')
    ger_per = relationship('GerPer')
    


class Mov(generic_model, db.Model):
    __tablename__ = 'mov'
    __table_args__ = {'comment': 'Movimentação-Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    nr_externo = db.Column(db.String(50), comment='Número Externo')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa - Cliente/Fornecedor')
    ger_pessoa_id_obj = db.relationship('')
    ger_pessoa_endereco_id_fiscal = db.Column(db.ForeignKey('ger_pessoa_endereco.id'),  comment='ID do Endereço da Pessoa - Fiscal')
    ger_pessoa_endereco_id_fiscal_obj = db.relationship('')
    mov_operacao_id = db.Column(db.ForeignKey('mov_operacao.id'), comment='ID da Opeação do Movimento')
    mov_operacao_id_obj = db.relationship('')
    fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condição de Pag/Rec')
    fin_cond_pagrec_id_obj = db.relationship('')
    data_mov = db.Column(TIMESTAMP(precision=6), comment='Data Movimento')
    numero_mov = db.Column(Integer, comment='Numero do Movimento')
    data_emissao = db.Column(TIMESTAMP(precision=6), comment='Data de Emissao do Movimento')
    fis_doc_tipo_id = db.Column(db.ForeignKey('fis_doc_tipo.id'), comment='ID do Tipo de Documento')
    fis_doc_tipo_id_obj = db.relationship('')
    serie_mov = db.Column(db.String(3), comment='Serie do Movimento')
    mov_status_id = db.Column(db.ForeignKey('mov_status.id'), comment='ID do Status do Movimento')
    mov_status_id_obj = db.relationship('')
    valor_total = db.Column(db.Numeric(18, 6),  comment='Valor Total do Movimento')
    observacao = db.Column(db.String(250), comment='Observação do Movimento')
    tipo_frete = db.Column(Integer,  comment='Tipo de Frete (0 - Por conta do emitente; 1 - Por conta do destinatário/remetente; 2 - Por conta de terceiros; 9 - Sem frete)')
    data_entrega = db.Column(Date, comment='Data de Entrega')
    data_entrada_saida = db.Column(Date, comment='Data de Entrada/Saída')
    ger_pessoa_endereco_id_entrega = db.Column(db.ForeignKey('ger_pessoa_endereco.id'),  comment='ID do Endereço da Pessoa - Entrega')
    ger_pessoa_endereco_id_entrega_obj = db.relationship('')
    ger_cidade_id_carreg = db.Column(db.ForeignKey('ger_cidade.id'), comment='ID da Cidade - Carregamento da Carga')
    ger_cidade_id_carreg_obj = db.relationship('')
    ger_cidade_id_descarreg = db.Column(db.ForeignKey('ger_cidade.id'), comment='ID da Cidade - Descarregamento da Carga')
    ger_cidade_id_descarreg_obj = db.relationship('')
    tipo_emissao_carga = db.Column(Integer, comment='Tipo de Emissao da Carga (1 - Prestador de serviço de transporte; 2 - Transportador de Carga Própria)')
    tipo_modal_carga = db.Column(db.String(2), comment='Tipo do Modal da Carga')
    tipo_transportador_carga = db.Column(Integer, comment='Tipo de Transportador da Carga')
    valor_carga = db.Column(db.Numeric(18, 6), comment='Valor total da Carga')
    tipo_umedida_carga = db.Column(db.String(2), comment='Tipo de Unidade Medida da Carga (01-KG; 02-TON)')
    qnt_carga = db.Column(db.Numeric(18, 6), comment='Quantidade da Carga')
    ger_pessoa_endereco_id_reme = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - Remetente')
    ger_pessoa_endereco_id_reme_obj = db.relationship('')
    ger_pessoa_endereco_id_dest = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - Destinatário')
    ger_pessoa_endereco_id_dest_obj = db.relationship('')
    ger_pessoa_endereco_id_rece = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - Recebedor')
    ger_pessoa_endereco_id_rece_obj = db.relationship('')
    ger_pessoa_endereco_id_expe = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - Expedidor')
    ger_pessoa_endereco_id_expe_obj = db.relationship('')
    observacao_transp = db.Column(db.String(250), comment='Obervação - Transporte')
    observacao_serv = db.Column(db.String(250), comment='Observação - Serviço')
    tipo_fretamento = db.Column(Integer, comment='Tipo de Fretamento')
    tipo_serv_frete = db.Column(Integer, comment='Tipo do Serviço de Frete')
    tipo_tomador_serv_frete = db.Column(Integer, comment='Tipo Tomador de Serviço de Frete')
    taf = db.Column(db.String(50), comment='Termo de Autorização de Fretamento')
    data_anulacao = db.Column(Date, comment='Data Anulação')
    observacao_item = db.Column(db.String(250), comment='Observação do Item predominante')
    valor_financeiro_total = db.Column(db.Numeric(18, 6), comment='Valor Financeiro Total')
    valor_item_frete_total = db.Column(db.Numeric(18, 6), comment='Valor de Item do Frete')
    observacao_fiscal = db.Column(db.String(250), comment='Observação Fiscal')
    ger_pessoa_endereco_id_inter = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - Intermediário')
    ger_pessoa_endereco_id_inter_obj = db.relationship('')
    fis_tipo_resp_reten = db.Column(db.String(1), comment='Tipo Responsável pela Retençao do ISS: 1 – Tomador, 2 – Intermediário')
    fis_exig_iss_nfs = db.Column(db.String(1), comment='Tipo Exigibilidade ISS da NFS: 1 - Exigível, 2 - Não incidência, 3 - Isenção, 4 - Exportação, 5 - Imunidade, 6 - Exigibilidade Suspensa por Decisão Judicial, 7 - Exigibilidade Suspensa por Processo Administrativo')
    fis_iss_retido_nfs = db.Column(db.String(1), comment='ISS retido na NFS: S-Sim, N-Não')
    fis_nat_ope_nfs = db.Column(db.String(1), comment='Natureza Operação da NFS: 1 – Tributação no município, 2 - Tributação fora do município, 3 - Isenção, 4 - Imune, 5 – Exigibilidade suspensa por decisão judicial, 6 – Exigibilidade suspensa por procedimento administrativo')
    numero_mov_pre = db.Column(Integer, comment='Numero do Movimento Pré')
    serio_mov_pre = db.Column(db.String(3), comment='Série do Movimento Pré')
    cep_carreg = db.Column(db.String(50), comment='Cep - Carregamento da Carga')
    cep_descarreg = db.Column(db.String(50), comment='Cep - Descarregamento da Carga')
    tipo_carga = db.Column(db.String(2), comment='Tipo Carga: 01-Granel sólido, 02-Granel líquido, 03-Frigorificada, 04-Conteinerizada, 05-Carga Geral, 06-Neogranel, 07-Perigosa (granel sólido), 08-Perigosa (granel líquido), 09-Perigosa (carga frigorificada), 10-Perigosa (conteinerizada), 11-Perigosa (carga geral)')
    sys_user_id_resp = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário - Responsável')
    sys_user_id_resp_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_cond_pagrec = relationship('FinCondPagrec')
    fis_doc_tipo = relationship('FisDocTipo')
    ger_cidade = relationship('GerCidade', primaryjoin='Mov.ger_cidade_id_carreg == GerCidade.id')
    ger_cidade1 = relationship('GerCidade', primaryjoin='Mov.ger_cidade_id_descarreg == GerCidade.id')
    ger_empresa = relationship('GerEmpresa')
    ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_dest == GerPessoaEndereco.id')
    ger_pessoa_endereco1 = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_entrega == GerPessoaEndereco.id')
    ger_pessoa_endereco2 = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_expe == GerPessoaEndereco.id')
    ger_pessoa_endereco3 = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_fiscal == GerPessoaEndereco.id')
    ger_pessoa_endereco4 = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_inter == GerPessoaEndereco.id')
    ger_pessoa_endereco5 = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_rece == GerPessoaEndereco.id')
    ger_pessoa_endereco6 = relationship('GerPessoaEndereco', primaryjoin='Mov.ger_pessoa_endereco_id_reme == GerPessoaEndereco.id')
    ger_pessoa = relationship('GerPessoa')
    mov_operacao = relationship('MovOperacao')
    mov_status = relationship('MovStatu')
    sys_user = relationship('SysUser')
    


class MovEstNivel(generic_model, db.Model):
    __tablename__ = 'mov_est_nivel'
    __table_args__ = {'comment': 'Movimentação-Nivel de Estoque do Item/Serviço'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ger_est_nivel_id = db.Column(db.ForeignKey('ger_est_nivel.id'),  comment='ID do Nivel de Estoque')
    ger_est_nivel_id_obj = db.relationship('')
    qnt_min = db.Column(db.Numeric(18, 6),  comment='Quantidade Minima')
    qnt_max = db.Column(db.Numeric(18, 6),  comment='Quantidade Maxima')
    qnt_nesc = db.Column(db.Numeric(18, 6),  comment='Quantidade Necessária')
    observacao = db.Column(db.String(250), comment='Observação')

    ger_est_nivel = relationship('GerEstNivel')
    ger_itemserv = relationship('GerItemserv')
    


class OpeCentro2(generic_model, db.Model):
    __tablename__ = 'ope_centro2'
    __table_args__ = {'comment': 'Operação-Centro Nível 2 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    sigla_centro2 = db.Column(db.String(50),  comment='Sigla Centro Nível 2 Entrada/Saída')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'),  comment='ID do Centro Nível 1 Entrada/Saída')
    ope_centro1_id_obj = db.relationship('')
    ope_centro_subgrupo_id = db.Column(db.ForeignKey('ope_centro_subgrupo.id'),  comment='ID do Sub-Tipo de Centro Entrada/Saída')
    ope_centro_subgrupo_id_obj = db.relationship('')
    utiliza_compart = db.Column(db.String(1),  comment='Utiliza Compartimento (S-Sim,N-Não)')
    observacao = db.Column(db.String(250), comment='Observação')
    ope_centro_rat_tipo_id = db.Column(db.ForeignKey('ope_centro_rat_tipo.id'), comment='ID do Tipo de Rateio de Centro de Entrada/Saída')
    ope_centro_rat_tipo_id_obj = db.relationship('')
    ger_marca_modelo_id = db.Column(db.ForeignKey('ger_marca_modelo.id'),  comment='ID do Modelo')
    ger_marca_modelo_id_obj = db.relationship('')
    tipo_prop = db.Column(db.String(1), comment='Tipo P-Proprio, T-Terceiro')
    ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoal')
    ger_pessoa_endereco_id_obj = db.relationship('')
    tipo_destinacao = db.Column(db.String(1), comment='Tipo destinação: P-Pessoa, E-Equipamento, T-Estoque, A-Area')
    tipo_ctb_comp = db.Column(db.String(1), comment='Tipo Componente Contábil: 1-Centro1, 2-Centro2, 3-SubGrupo Centro')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'), comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'), comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    ope_regiao_id = db.Column(db.ForeignKey('ope_regiao.id'), comment='ID da Região')
    ope_regiao_id_obj = db.relationship('')
    medicao_trab_centro = db.Column(db.String(1),  comment='Medição Trabalho: A-Ativa, I-Inativa, T-Automática')
    valida_seq_medicao_trab_centro = db.Column(db.String(1),  comment='Valida sequencia medição do centro trabalho: S-Sim, N-Não, A-Aviso')
    data_valid = db.Column(Date, comment='Data de Validação')

    ctb_comp = relationship('CtbComp')
    ger_marca_modelo = relationship('GerMarcaModelo')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    ger_umedida = relationship('GerUmedida')
    ope_centro1 = relationship('OpeCentro1')
    ope_centro_rat_tipo = relationship('OpeCentroRatTipo')
    ope_centro_subgrupo = relationship('OpeCentroSubgrupo')
    ope_regiao = relationship('OpeRegiao')
    


class OpeCompartItemserv(generic_model, db.Model):
    __tablename__ = 'ope_compart_itemserv'
    __table_args__ = {'comment': 'Operação-Item/Serviço do Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    observacao = db.Column(db.String(250), comment='Observação')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ger_itemserv_id = db.Column(db.String(36),  comment='ID do Item/Serviço')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'),  comment='ID do Compartamento')
    ope_compart_id_obj = db.relationship('')

    ope_compart = relationship('OpeCompart')
    


class OpeFrenteTrabalho(generic_model, db.Model):
    __tablename__ = 'ope_frente_trabalho'
    __table_args__ = {'comment': 'Operação-Frente de Trabalho'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100),  comment='Nome')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    sigla_frente_trabalho = db.Column(db.String(50), comment='Sigla da Frente de Trabalho')

    ger_empresa = relationship('GerEmpresa')
    


class OpeOcorCompartMov(generic_model, db.Model):
    __tablename__ = 'ope_ocor_compart_mov'
    __table_args__ = {'comment': 'Operação-Movimentação de Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    observacao = db.Column(db.String(250), comment='Observação')
    data_mov = db.Column(Date, comment='Data do Movimento')
    numero = db.Column(db.String(50), comment='Número do Movimento')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'), comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_pessoa_endereco_id_exec = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa')
    ger_pessoa_endereco_id_exec_obj = db.relationship('')

    ger_empresa = relationship('GerEmpresa')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    


class OpeOcorMov(generic_model, db.Model):
    __tablename__ = 'ope_ocor_mov'
    __table_args__ = {'comment': 'Operação-Movimentação de Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    observacao = db.Column(db.String(250), comment='Observação')
    data_mov = db.Column(Date,  comment='Data do Movimento')
    numero = db.Column(db.String(50),  comment='Número do Movimento')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ger_pessoa_endereco_id_exec = db.Column(db.ForeignKey('ger_pessoa_endereco.id'),  comment='ID do Endereço da Pessoa')
    ger_pessoa_endereco_id_exec_obj = db.relationship('')
    ope_ocor_tipo_id = db.Column(db.ForeignKey('ope_ocor_tipo.id'),  comment='ID do Tipo de Ocorrência')
    ope_ocor_tipo_id_obj = db.relationship('')

    ger_empresa = relationship('GerEmpresa')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    ope_ocor_tipo = relationship('OpeOcorTipo')
    


class CtbLancDet(generic_model, db.Model):
    __tablename__ = 'ctb_lanc_det'
    __table_args__ = {'comment': 'Contábil-Laçamento Detalhe'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ctb_lanc_id = db.Column(db.ForeignKey('ctb_lanc.id', ondelete='CASCADE'),  comment='ID do Lançamento Contábil')
    ctb_lanc_id_obj = db.relationship('')
    ctb_conta_id = db.Column(db.ForeignKey('ctb_conta.id'),  comment='ID da Conta Contábil')
    ctb_conta_id_obj = db.relationship('')
    tipo_dc = db.Column(db.String(1),  comment='Tipo: D-Débito, C-Crédito')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'), comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'), comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor Contábil')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')
    origem_tipo = db.Column(db.String(50),  comment='Tipo: MANUAL, Etc')
    origem_id = db.Column(db.String(36),  comment='ID da Origem')
    observacao = db.Column(db.String(250), comment='Observação')
    qnt = db.Column(db.Numeric(18, 6),   comment='Quantidade')

    ctb_comp = relationship('CtbComp')
    ctb_conta = relationship('CtbConta')
    ctb_lanc = relationship('CtbLanc')
    ope_atividade = relationship('OpeAtividade')
    ope_centro2 = relationship('OpeCentro2')
    process = relationship('SysProcessLog')
    


class FinPagrecBanco(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_banco'
    __table_args__ = {'comment': 'Financeiro-Movimento Bancário de Pag/Rec '}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    data_mov = db.Column(Date,  comment='Data Movimento')
    fin_conta_id = db.Column(db.ForeignKey('fin_conta.id'),  comment='ID da Conta Bancária')
    fin_conta_id_obj = db.relationship('')
    numero_doc_pagrec = db.Column(db.String(50),  comment='Numero Documento do Pag/Rec')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor')
    observacao = db.Column(db.String(250), comment='Observação')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_conta = relationship('FinConta')
    ger_empresa = relationship('GerEmpresa')
    


class FinPagrecBancoExtrato(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_banco_extrato'
    __table_args__ = {'comment': 'Financeiro-Extrato Mov. Bancario'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    data_extrato = db.Column(Date,  comment='Data do Extrato')
    fin_conta_id = db.Column(db.ForeignKey('fin_conta.id'),  comment='ID da Conta')
    fin_conta_id_obj = db.relationship('')
    numero_doc = db.Column(db.String(50),  comment='Numero Documento do Extrato')
    descricao = db.Column(db.String(250), comment='Descrição do Extrato')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor do Extrato')
    status = db.Column(db.String(2),  server_default=text("'PD'::character varying"), comment='Satus: PD-Pendente, EA-Em analise, CD-Consciliado')
    status_observacao = db.Column(db.String(250), comment='Observação do Status')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')

    fin_conta = relationship('FinConta')
    process = relationship('SysProcessLog')
    


class FinPagrecBancoTransf(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_banco_transf'
    __table_args__ = {'comment': 'Financeiro-Transferência de Pag/Rec '}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    data_mov = db.Column(Date,  comment='Data Movimento')
    fin_conta_id_origem = db.Column(db.ForeignKey('fin_conta.id'),  comment='ID da Conta Bancária - Origem')
    fin_conta_id_origem_obj = db.relationship('')
    fin_conta_id_destino = db.Column(db.ForeignKey('fin_conta.id'),  comment='ID da Conta Bancária - Destino')
    fin_conta_id_destino_obj = db.relationship('')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor')
    observacao = db.Column(db.String(250), comment='Observação')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_conta = relationship('FinConta', primaryjoin='FinPagrecBancoTransf.fin_conta_id_destino == FinConta.id')
    fin_conta1 = relationship('FinConta', primaryjoin='FinPagrecBancoTransf.fin_conta_id_origem == FinConta.id')
    ger_empresa = relationship('GerEmpresa')
    process = relationship('SysProcessLog')
    


class FinPagrecParc(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_parc'
    __table_args__ = {'comment': 'Financeiro-Baixa de Parcela de Titulos Pag/Rec'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    numero_parc = db.Column(Integer,  comment='Numero Parcela')
    fin_pagrec_id = db.Column(db.ForeignKey('fin_pagrec.id'),  comment='ID do Pag/Rec')
    fin_pagrec_id_obj = db.relationship('')
    fin_doc_tipo_id = db.Column(db.ForeignKey('fin_doc_tipo.id'),  comment='ID do Tipo de Documento')
    fin_doc_tipo_id_obj = db.relationship('')
    valor_pagrec = db.Column(db.Numeric(18, 2),   comment='Valor do Pag/Rec')
    valor_juro = db.Column(db.Numeric(18, 2),   comment='Valor do Juro')
    valor_desconto = db.Column(db.Numeric(18, 2),   comment='Valor do Desconto')
    valor_multa = db.Column(db.Numeric(18, 2),   comment='Valor da Multa')
    data_venc = db.Column(Date, comment='Data Vencimento')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_doc_tipo = relationship('FinDocTipo')
    fin_pagrec = relationship('FinPagrec')
    


class FinPagrecPrevDest(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_prev_dest'
    __table_args__ = {'comment': 'Financeiro-Pag/Rec Previsto - Destinação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_pagrec_prev_id = db.Column(db.ForeignKey('fin_pagrec_prev.id', ondelete='CASCADE'),  comment='ID da Previsão Pag/Rec')
    fin_pagrec_prev_id_obj = db.relationship('')
    ope_centro1_id_dest_pri = db.Column(db.ForeignKey('ope_centro1.id'),  comment='ID do Centro Nível 1 Entrada/Saída - Destino Primário')
    ope_centro1_id_dest_pri_obj = db.relationship('')
    ope_centro2_id_dest_pri = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída - Destino Primário')
    ope_centro2_id_dest_pri_obj = db.relationship('')
    ope_centro1_id_dest_sec = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída - Destino Secundário')
    ope_centro1_id_dest_sec_obj = db.relationship('')
    ope_centro2_id_dest_sec = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída - Destino Secundário')
    ope_centro2_id_dest_sec_obj = db.relationship('')
    valor01 = db.Column(db.Numeric(18, 2),   comment='Valor 01')
    valor02 = db.Column(db.Numeric(18, 2),   comment='Valor 02')
    valor03 = db.Column(db.Numeric(18, 2),   comment='Valor 03')
    valor04 = db.Column(db.Numeric(18, 2),   comment='Valor 04')
    valor05 = db.Column(db.Numeric(18, 2),   comment='Valor 05')
    valor06 = db.Column(db.Numeric(18, 2),   comment='Valor 06')
    valor07 = db.Column(db.Numeric(18, 2),   comment='Valor 07')
    valor08 = db.Column(db.Numeric(18, 2),   comment='Valor 08')
    valor09 = db.Column(db.Numeric(18, 2),   comment='Valor 09')
    valor10 = db.Column(db.Numeric(18, 2),   comment='Valor 10')
    valor11 = db.Column(db.Numeric(18, 2),   comment='Valor 11')
    valor12 = db.Column(db.Numeric(18, 2),   comment='Valor 12')
    valor13 = db.Column(db.Numeric(18, 2),   comment='Valor 13')
    valor14 = db.Column(db.Numeric(18, 2),   comment='Valor 14')
    valor15 = db.Column(db.Numeric(18, 2),   comment='Valor 15')
    valor16 = db.Column(db.Numeric(18, 2),   comment='Valor 16')
    valor17 = db.Column(db.Numeric(18, 2),   comment='Valor 17')
    valor18 = db.Column(db.Numeric(18, 2),   comment='Valor 18')
    valor19 = db.Column(db.Numeric(18, 2),   comment='Valor 19')
    valor20 = db.Column(db.Numeric(18, 2),   comment='Valor 20')
    valor21 = db.Column(db.Numeric(18, 2),   comment='Valor 21')
    valor22 = db.Column(db.Numeric(18, 2),   comment='Valor 22')
    valor23 = db.Column(db.Numeric(18, 2),   comment='Valor 23')
    valor24 = db.Column(db.Numeric(18, 2),   comment='Valor 24')
    valor25 = db.Column(db.Numeric(18, 2),   comment='Valor 25')
    valor26 = db.Column(db.Numeric(18, 2),   comment='Valor 26')
    valor27 = db.Column(db.Numeric(18, 2),   comment='Valor 27')
    valor28 = db.Column(db.Numeric(18, 2),   comment='Valor 28')
    valor29 = db.Column(db.Numeric(18, 2),   comment='Valor 29')
    valor30 = db.Column(db.Numeric(18, 2),   comment='Valor 30')
    valor31 = db.Column(db.Numeric(18, 2),   comment='Valor 31')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'),  comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_pagrec_prev = relationship('FinPagrecPrev')
    ope_atividade = relationship('OpeAtividade')
    ope_centro1 = relationship('OpeCentro1', primaryjoin='FinPagrecPrevDest.ope_centro1_id_dest_pri == OpeCentro1.id')
    ope_centro11 = relationship('OpeCentro1', primaryjoin='FinPagrecPrevDest.ope_centro1_id_dest_sec == OpeCentro1.id')
    ope_centro2 = relationship('OpeCentro2', primaryjoin='FinPagrecPrevDest.ope_centro2_id_dest_pri == OpeCentro2.id')
    ope_centro21 = relationship('OpeCentro2', primaryjoin='FinPagrecPrevDest.ope_centro2_id_dest_sec == OpeCentro2.id')
    


class FinPagrecPrevVar(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_prev_var'
    __table_args__ = {'comment': 'Financeiro-Pag/Rec Previsto - Variação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_pagrec_prev_id = db.Column(db.ForeignKey('fin_pagrec_prev.id', ondelete='CASCADE'),  comment='ID da Previsão Pag/Rec')
    fin_pagrec_prev_id_obj = db.relationship('')
    fin_tipo_variacao_id = db.Column(db.ForeignKey('fin_tipo_variacao.id'),  comment='ID do Tipo de Variação')
    fin_tipo_variacao_id_obj = db.relationship('')
    valor01 = db.Column(db.Numeric(18, 2),   comment='Valor 01')
    valor02 = db.Column(db.Numeric(18, 2),   comment='Valor 02')
    valor03 = db.Column(db.Numeric(18, 2),   comment='Valor 03')
    valor04 = db.Column(db.Numeric(18, 2),   comment='Valor 04')
    valor05 = db.Column(db.Numeric(18, 2),   comment='Valor 05')
    valor06 = db.Column(db.Numeric(18, 2),   comment='Valor 06')
    valor07 = db.Column(db.Numeric(18, 2),   comment='Valor 07')
    valor08 = db.Column(db.Numeric(18, 2),   comment='Valor 08')
    valor09 = db.Column(db.Numeric(18, 2),   comment='Valor 09')
    valor10 = db.Column(db.Numeric(18, 2),   comment='Valor 10')
    valor11 = db.Column(db.Numeric(18, 2),   comment='Valor 11')
    valor12 = db.Column(db.Numeric(18, 2),   comment='Valor 12')
    valor13 = db.Column(db.Numeric(18, 2),   comment='Valor 13')
    valor14 = db.Column(db.Numeric(18, 2),   comment='Valor 14')
    valor15 = db.Column(db.Numeric(18, 2),   comment='Valor 15')
    valor16 = db.Column(db.Numeric(18, 2),   comment='Valor 16')
    valor17 = db.Column(db.Numeric(18, 2),   comment='Valor 17')
    valor18 = db.Column(db.Numeric(18, 2),   comment='Valor 18')
    valor19 = db.Column(db.Numeric(18, 2),   comment='Valor 19')
    valor20 = db.Column(db.Numeric(18, 2),   comment='Valor 20')
    valor21 = db.Column(db.Numeric(18, 2),   comment='Valor 21')
    valor22 = db.Column(db.Numeric(18, 2),   comment='Valor 22')
    valor23 = db.Column(db.Numeric(18, 2),   comment='Valor 23')
    valor24 = db.Column(db.Numeric(18, 2),   comment='Valor 24')
    valor25 = db.Column(db.Numeric(18, 2),   comment='Valor 25')
    valor26 = db.Column(db.Numeric(18, 2),   comment='Valor 26')
    valor27 = db.Column(db.Numeric(18, 2),   comment='Valor 27')
    valor28 = db.Column(db.Numeric(18, 2),   comment='Valor 28')
    valor29 = db.Column(db.Numeric(18, 2),   comment='Valor 29')
    valor30 = db.Column(db.Numeric(18, 2),   comment='Valor 30')
    valor31 = db.Column(db.Numeric(18, 2),   comment='Valor 31')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_pagrec_prev = relationship('FinPagrecPrev')
    fin_tipo_variacao = relationship('FinTipoVariacao')
    


class FisDoc(generic_model, db.Model):
    __tablename__ = 'fis_doc'
    __table_args__ = {'comment': 'Fiscal-Documentos'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    mov_id = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    data_emissao = db.Column(TIMESTAMP(precision=6),  comment='Data Emissão')
    chave = db.Column(db.String(50), comment='Chave Emissão')
    numero = db.Column(Integer,  comment='Numero do Documento')
    serie = db.Column(db.String(3),  comment='Série')
    fis_doc_tipo_id = db.Column(db.ForeignKey('fis_doc_tipo.id'),  comment='ID do Tipo de Documento')
    fis_doc_tipo_id_obj = db.relationship('')
    numero_ini = db.Column(Integer, comment='Numero Inicial')
    numero_fin = db.Column(Integer, comment='Numero Final')
    data_autorizado = db.Column(TIMESTAMP(precision=6), comment='Data Autorizado')
    data_cancelado = db.Column(TIMESTAMP(precision=6), comment='Data Cancelado')
    data_encerrado = db.Column(TIMESTAMP(precision=6), comment='Data Encerrado')
    xml_assinado = db.Column(Text, comment='XML Assinado')
    ambiente = db.Column(Integer,  comment='Ambiente (1 - Producao 2 - Homologacao)')
    tipo_emissao = db.Column(Integer,  comment='Tipo de Emissao (1 - Normal; 2 - SCAN; 9 - Off-Line)')
    status_sefaz = db.Column(Integer, comment='Código SEFAZ')
    xml_protocolado = db.Column(Text, comment='XML Protocolado')
    pdf_emitido = db.Column(Text, comment='PDF do Documento Emitido')
    numero_pre = db.Column(Integer, comment='Número Pré')
    serie_pre = db.Column(db.String(3), comment='Série Pré')

    fis_doc_tipo = relationship('FisDocTipo')
    ger_empresa = relationship('GerEmpresa')
    mov = relationship('Mov')
    


class GerProcessoBloqUser(generic_model, db.Model):
    __tablename__ = 'ger_processo_bloq_user'
    __table_args__ = {'comment': 'Geral-Bloqueio de Processo por Data - Usuário'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_processo_bloq_id = db.Column(db.ForeignKey('ger_processo_bloq.id'),  comment='ID do Bloqueio de Processo')
    ger_processo_bloq_id_obj = db.relationship('')
    sys_user_id = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    tipo_bloq = db.Column(db.String(255), comment='Tipo: E-Excluir do Bloqueio, I-Incluir no Bloqueio')

    ger_processo_bloq = relationship('GerProcessoBloq')
    sys_user = relationship('SysUser')
    


class MovCiot(generic_model, db.Model):
    __tablename__ = 'mov_ciot'
    __table_args__ = {'comment': 'Movimentação-CIOT do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_pessoa_id_responsavel = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Responsável')
    ger_pessoa_id_responsavel_obj = db.relationship('')
    nr_ciot = db.Column(db.String(50), comment='Numero do CIOT')

    ger_pessoa = relationship('GerPessoa')
    mov = relationship('Mov')
    


class MovComp(generic_model, db.Model):
    __tablename__ = 'mov_comp'
    __table_args__ = {'comment': 'Movimentação-Entrega do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    nome_comp = db.Column(db.String(50),  comment='Nome do Componente')
    qnt_comp = db.Column(db.Numeric(18, 6),  comment='Quantidade Componente')

    mov = relationship('Mov')
    


class MovCondutor(generic_model, db.Model):
    __tablename__ = 'mov_condutor'
    __table_args__ = {'comment': 'Movimentação-Condutor do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_pessoa_id_condutor = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Condutor')
    ger_pessoa_id_condutor_obj = db.relationship('')

    ger_pessoa = relationship('GerPessoa')
    mov = relationship('Mov')
    


class MovCotacao(generic_model, db.Model):
    __tablename__ = 'mov_cotacao'
    __table_args__ = {'comment': 'Movimentação-Cotação do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa')
    ger_pessoa_endereco_id_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    observacao1 = db.Column(db.String(250), comment='Observação 1')
    observacao2 = db.Column(db.String(250), comment='Observação 2')
    qnt_cot = db.Column(db.Numeric(18, 6),   comment='Quantidade')
    valor_unit_cot = db.Column(db.Numeric(18, 6),   comment='Valor Unitário')
    valor_total_cot = db.Column(db.Numeric(18, 6),   comment='Valor Total')
    valor_desc_cot = db.Column(db.Numeric(18, 6),   comment='Valor Desconto')
    valor_frete_cot = db.Column(db.Numeric(18, 6),   comment='Valor Frete')
    valor_outro_cot = db.Column(db.Numeric(18, 6),  comment='Valor Outros')
    valor_total_trib_cot = db.Column(db.Numeric(18, 6),   comment='Valor Total de Tributos')
    status = db.Column(db.String(1),  server_default=text("'P'::character varying"), comment='Status: P-Pendente, A-Aprovado, C-Cancelado')
    data_status = db.Column(DateTime, comment='Data do Status')
    sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador')
    sys_user_id_aprov_obj = db.relationship('')
    fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'),  comment='ID da Condiçao de Pag/Rec')
    fin_cond_pagrec_id_obj = db.relationship('')

    fin_cond_pagrec = relationship('FinCondPagrec')
    ger_itemserv = relationship('GerItemserv')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    ger_pessoa = relationship('GerPessoa')
    mov = relationship('Mov')
    sys_user = relationship('SysUser')
    


class MovCotacaoAnal(generic_model, db.Model):
    __tablename__ = 'mov_cotacao_anal'
    __table_args__ = {'comment': 'MOV-Analise de Cotação do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    c01_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C01')
    c01_ger_pessoa_id_obj = db.relationship('')
    c01_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C01')
    c01_ger_pessoa_endereco_id_obj = db.relationship('')
    c01_observacao1 = db.Column(db.String(250), comment='Observação 1 - C01')
    c01_observacao2 = db.Column(db.String(250), comment='Observação 2 - C01')
    c01_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C01')
    c01_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C01')
    c01_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C01')
    c01_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C01')
    c01_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C01')
    c01_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C01')
    c01_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C01')
    c01_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C01')
    c01_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C01')
    c01_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C01')
    c01_sys_user_id_aprov_obj = db.relationship('')
    c02_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C02')
    c02_ger_pessoa_id_obj = db.relationship('')
    c02_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C02')
    c02_ger_pessoa_endereco_id_obj = db.relationship('')
    c02_observacao1 = db.Column(db.String(250), comment='Observação 1 - C02')
    c02_observacao2 = db.Column(db.String(250), comment='Observação 2 - C02')
    c02_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C02')
    c02_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C02')
    c02_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C02')
    c02_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C02')
    c02_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C02')
    c02_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C02')
    c02_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C02')
    c02_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C02')
    c02_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C02')
    c02_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C02')
    c02_sys_user_id_aprov_obj = db.relationship('')
    c03_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C03')
    c03_ger_pessoa_id_obj = db.relationship('')
    c03_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C03')
    c03_ger_pessoa_endereco_id_obj = db.relationship('')
    c03_observacao1 = db.Column(db.String(250), comment='Observação 1 - C03')
    c03_observacao2 = db.Column(db.String(250), comment='Observação 2 - C03')
    c03_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C03')
    c03_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C03')
    c03_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C03')
    c03_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C03')
    c03_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C03')
    c03_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C03')
    c03_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C03')
    c03_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C03')
    c03_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C03')
    c03_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C03')
    c03_sys_user_id_aprov_obj = db.relationship('')
    c04_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C04')
    c04_ger_pessoa_id_obj = db.relationship('')
    c04_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C04')
    c04_ger_pessoa_endereco_id_obj = db.relationship('')
    c04_observacao1 = db.Column(db.String(250), comment='Observação 1 - C04')
    c04_observacao2 = db.Column(db.String(250), comment='Observação 2 - C04')
    c04_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C04')
    c04_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C04')
    c04_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C04')
    c04_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C04')
    c04_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C04')
    c04_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C04')
    c04_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C04')
    c04_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C04')
    c04_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C04')
    c04_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C04')
    c04_sys_user_id_aprov_obj = db.relationship('')
    c05_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C05')
    c05_ger_pessoa_id_obj = db.relationship('')
    c05_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C05')
    c05_ger_pessoa_endereco_id_obj = db.relationship('')
    c05_observacao1 = db.Column(db.String(250), comment='Observação 1 - C05')
    c05_observacao2 = db.Column(db.String(250), comment='Observação 2 - C05')
    c05_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C05')
    c05_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C05')
    c05_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C05')
    c05_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C05')
    c05_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C05')
    c05_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C05')
    c05_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C05')
    c05_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C05')
    c05_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C05')
    c05_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C05')
    c05_sys_user_id_aprov_obj = db.relationship('')
    c06_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C06')
    c06_ger_pessoa_id_obj = db.relationship('')
    c06_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C06')
    c06_ger_pessoa_endereco_id_obj = db.relationship('')
    c06_observacao1 = db.Column(db.String(250), comment='Observação 1 - C06')
    c06_observacao2 = db.Column(db.String(250), comment='Observação 2 - C06')
    c06_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C06')
    c06_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C06')
    c06_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C06')
    c06_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C06')
    c06_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C06')
    c06_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C06')
    c06_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C06')
    c06_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C06')
    c06_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C06')
    c06_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C06')
    c06_sys_user_id_aprov_obj = db.relationship('')
    c07_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C07')
    c07_ger_pessoa_id_obj = db.relationship('')
    c07_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C07')
    c07_ger_pessoa_endereco_id_obj = db.relationship('')
    c07_observacao1 = db.Column(db.String(250), comment='Observação 1 - C07')
    c07_observacao2 = db.Column(db.String(250), comment='Observação 2 - C07')
    c07_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C07')
    c07_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C07')
    c07_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C07')
    c07_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C07')
    c07_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C07')
    c07_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C07')
    c07_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C07')
    c07_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C07')
    c07_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C07')
    c07_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C07')
    c07_sys_user_id_aprov_obj = db.relationship('')
    c08_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C08')
    c08_ger_pessoa_id_obj = db.relationship('')
    c08_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C08')
    c08_ger_pessoa_endereco_id_obj = db.relationship('')
    c08_observacao1 = db.Column(db.String(250), comment='Observação 1 - C08')
    c08_observacao2 = db.Column(db.String(250), comment='Observação 2 - C08')
    c08_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C08')
    c08_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C08')
    c08_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C08')
    c08_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C08')
    c08_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C08')
    c08_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C08')
    c08_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C08')
    c08_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C08')
    c08_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C08')
    c08_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C08')
    c08_sys_user_id_aprov_obj = db.relationship('')
    c09_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C09')
    c09_ger_pessoa_id_obj = db.relationship('')
    c09_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C09')
    c09_ger_pessoa_endereco_id_obj = db.relationship('')
    c09_observacao1 = db.Column(db.String(250), comment='Observação 1 - C09')
    c09_observacao2 = db.Column(db.String(250), comment='Observação 2 - C09')
    c09_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C09')
    c09_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C09')
    c09_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C09')
    c09_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C09')
    c09_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C09')
    c09_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C09')
    c09_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C09')
    c09_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C09')
    c09_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C09')
    c09_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C09')
    c09_sys_user_id_aprov_obj = db.relationship('')
    c10_ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa - C10')
    c10_ger_pessoa_id_obj = db.relationship('')
    c10_ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa - C10')
    c10_ger_pessoa_endereco_id_obj = db.relationship('')
    c10_observacao1 = db.Column(db.String(250), comment='Observação 1 - C10')
    c10_observacao2 = db.Column(db.String(250), comment='Observação 2 - C10')
    c10_qnt_cot = db.Column(db.Numeric(18, 6),  comment='Quantidade - C10')
    c10_valor_unit_cot = db.Column(db.Numeric(18, 6),  comment='Valor Unitário - C10')
    c10_valor_total_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total - C10')
    c10_valor_desc_cot = db.Column(db.Numeric(18, 6),  comment='Valor Desconto - C10')
    c10_valor_frete_cot = db.Column(db.Numeric(18, 6),  comment='Valor Frete - C10')
    c10_valor_outro_cot = db.Column(db.Numeric(18, 6), comment='Valor Outros - C10')
    c10_valor_total_trib_cot = db.Column(db.Numeric(18, 6),  comment='Valor Total de Tributos - C10')
    c10_status = db.Column(db.String(1), server_default=text("'P'::character varying"), comment='Status - C10')
    c10_data_status = db.Column(TIMESTAMP(precision=6), comment='Data do Status - C10')
    c10_sys_user_id_aprov = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário Aprovador - C10')
    c10_sys_user_id_aprov_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    c01_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C01')
    c01_fin_cond_pagrec_id_obj = db.relationship('')
    c02_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C02')
    c02_fin_cond_pagrec_id_obj = db.relationship('')
    c03_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C03')
    c03_fin_cond_pagrec_id_obj = db.relationship('')
    c04_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C04')
    c04_fin_cond_pagrec_id_obj = db.relationship('')
    c05_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C05')
    c05_fin_cond_pagrec_id_obj = db.relationship('')
    c06_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C06')
    c06_fin_cond_pagrec_id_obj = db.relationship('')
    c07_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C07')
    c07_fin_cond_pagrec_id_obj = db.relationship('')
    c08_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C08')
    c08_fin_cond_pagrec_id_obj = db.relationship('')
    c09_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C09')
    c09_fin_cond_pagrec_id_obj = db.relationship('')
    c10_fin_cond_pagrec_id = db.Column(db.ForeignKey('fin_cond_pagrec.id'), comment='ID da Condiçao de Pag/Rec - C10')
    c10_fin_cond_pagrec_id_obj = db.relationship('')

    c01_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c01_fin_cond_pagrec_id == FinCondPagrec.id')
    c01_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c01_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c01_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c01_ger_pessoa_id == GerPessoa.id')
    sys_user = relationship('SysUser', primaryjoin='MovCotacaoAnal.c01_sys_user_id_aprov == SysUser.id')
    c02_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c02_fin_cond_pagrec_id == FinCondPagrec.id')
    c02_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c02_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c02_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c02_ger_pessoa_id == GerPessoa.id')
    sys_user1 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c02_sys_user_id_aprov == SysUser.id')
    c03_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c03_fin_cond_pagrec_id == FinCondPagrec.id')
    c03_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c03_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c03_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c03_ger_pessoa_id == GerPessoa.id')
    sys_user2 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c03_sys_user_id_aprov == SysUser.id')
    c04_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c04_fin_cond_pagrec_id == FinCondPagrec.id')
    c04_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c04_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c04_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c04_ger_pessoa_id == GerPessoa.id')
    sys_user3 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c04_sys_user_id_aprov == SysUser.id')
    c05_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c05_fin_cond_pagrec_id == FinCondPagrec.id')
    c05_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c05_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c05_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c05_ger_pessoa_id == GerPessoa.id')
    sys_user4 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c05_sys_user_id_aprov == SysUser.id')
    c06_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c06_fin_cond_pagrec_id == FinCondPagrec.id')
    c06_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c06_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c06_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c06_ger_pessoa_id == GerPessoa.id')
    sys_user5 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c06_sys_user_id_aprov == SysUser.id')
    c07_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c07_fin_cond_pagrec_id == FinCondPagrec.id')
    c07_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c07_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c07_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c07_ger_pessoa_id == GerPessoa.id')
    sys_user6 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c07_sys_user_id_aprov == SysUser.id')
    c08_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c08_fin_cond_pagrec_id == FinCondPagrec.id')
    c08_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c08_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c08_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c08_ger_pessoa_id == GerPessoa.id')
    sys_user7 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c08_sys_user_id_aprov == SysUser.id')
    c09_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c09_fin_cond_pagrec_id == FinCondPagrec.id')
    c09_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c09_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c09_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c09_ger_pessoa_id == GerPessoa.id')
    sys_user8 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c09_sys_user_id_aprov == SysUser.id')
    c10_fin_cond_pagrec = relationship('FinCondPagrec', primaryjoin='MovCotacaoAnal.c10_fin_cond_pagrec_id == FinCondPagrec.id')
    c10_ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovCotacaoAnal.c10_ger_pessoa_endereco_id == GerPessoaEndereco.id')
    c10_ger_pessoa = relationship('GerPessoa', primaryjoin='MovCotacaoAnal.c10_ger_pessoa_id == GerPessoa.id')
    sys_user9 = relationship('SysUser', primaryjoin='MovCotacaoAnal.c10_sys_user_id_aprov == SysUser.id')
    ger_itemserv = relationship('GerItemserv')
    mov = relationship('Mov')
    


class MovEntrega(generic_model, db.Model):
    __tablename__ = 'mov_entrega'
    __table_args__ = {'comment': 'Movimentação-Entrega do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_cidade_id = db.Column(db.ForeignKey('ger_cidade.id'), comment='ID da Cidade')
    ger_cidade_id_obj = db.relationship('')

    ger_cidade = relationship('GerCidade')
    mov = relationship('Mov')
    


class MovItemserv(generic_model, db.Model):
    __tablename__ = 'mov_itemserv'
    __table_args__ = {'comment': 'Movimentação-Item/Serviço'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    qnt_orig = db.Column(db.Numeric(18, 6),   comment='Quantidade Original')
    valor_unit_orig = db.Column(db.Numeric(18, 6),   comment='Valor Unitário Original')
    ger_umedida_id_conv = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da U.Medida - Conversão')
    ger_umedida_id_conv_obj = db.relationship('')
    qnt_conv = db.Column(db.Numeric(18, 6),   comment='Quantidade - Convertido')
    valor_unit_conv = db.Column(db.Numeric(18, 6),   comment='Valor Unitário - Convertido')
    valor_bruto = db.Column(db.Numeric(18, 6),   comment='Valor Bruto')
    valor_desconto = db.Column(db.Numeric(18, 6),   comment='Valor Desconto')
    valor_acrecimo = db.Column(db.Numeric(18, 6),   comment='Valor Acrecimo')
    valor_outros = db.Column(db.Numeric(18, 6),   comment='Valor Outros')
    valor_liquido = db.Column(db.Numeric(18, 6),   comment='Valor Liquido')
    qnt_devolvida = db.Column(db.Numeric(18, 6),   comment='Quantidade Devolvida')
    valor_frete = db.Column(db.Numeric(18, 6),  comment='Valor Frete')
    valor_seguro = db.Column(db.Numeric(18, 6),  comment='Valor Seguro')
    observacao = db.Column(db.String(250), comment='Observação')
    valor_tributo_retido = db.Column(db.Numeric(18, 6),   comment='Valor Tributo Retido')
    fis_cfop_id = db.Column(db.ForeignKey('fis_cfop.id'), comment='ID do CFOP')
    fis_cfop_id_obj = db.relationship('')
    valor_tributo_total = db.Column(db.Numeric(18, 6),  comment='Valor de Tributos Total')
    qnt_altura = db.Column(db.Numeric(18, 6),  comment='Quantidade - Altura')
    qnt_largura = db.Column(db.Numeric(18, 6),  comment='Quantidade - Largura')
    qnt_comprimento = db.Column(db.Numeric(18, 6),  comment='Quantidade - Comprimento')
    nome_itemserv = db.Column(db.String(250), comment='Nome Item/Serv - Genérico')
    ger_itemserv_var_id = db.Column(db.ForeignKey('ger_itemserv_var.id'), comment='ID da Variação do Item/Serviço')
    ger_itemserv_var_id_obj = db.relationship('')
    ger_itemserv_lote_id = db.Column(db.ForeignKey('ger_itemserv_lote.id'), comment='ID do Lote do Item/Serviço')
    ger_itemserv_lote_id_obj = db.relationship('')
    fis_obra_art = db.Column(db.String(50), comment='Art da Obra do Serviço')
    fis_obra_cei = db.Column(db.String(50), comment='Cei da Obra do Serviço')
    fis_numero_proc_susp_nfs = db.Column(db.String(50), comment='Numero do processo suspenção NFS')
    fis_doc_cnae_nfs = db.Column(db.String(50), comment='Documento Cnae da NFS')
    valor_outros_tributo_ret = db.Column(db.Numeric(18, 6),  comment='Valor de outros Tributos Retidos')
    valor_desconto_cond = db.Column(db.Numeric(18, 6),  comment='Valor Desconto Condicionado')
    valor_desconto_incond = db.Column(db.Numeric(18, 6),  comment='Valor Desconto Incondicionado')
    valor_deducao = db.Column(db.Numeric(18, 6),  comment='Valor de Dedução')
    qnt_min_pessoa_cot = db.Column(Integer,  comment='Quantidade Minima de Cli/For para Cotação')
    data_valid = db.Column(Date, comment='Data de Validação')

    fis_cfop = relationship('FisCfop')
    ger_itemserv = relationship('GerItemserv')
    ger_itemserv_lote = relationship('GerItemservLote')
    ger_itemserv_var = relationship('GerItemservVar')
    ger_umedida = relationship('GerUmedida')
    mov = relationship('Mov')
    


class MovLacre(generic_model, db.Model):
    __tablename__ = 'mov_lacre'
    __table_args__ = {'comment': 'Movimentação-Lacre do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    lacres = db.Column(db.String(250), comment='Lacre')

    mov = relationship('Mov')
    


class MovMedida(generic_model, db.Model):
    __tablename__ = 'mov_medida'
    __table_args__ = {'comment': 'Movimentação-Entrega do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da Unidade Medida')
    ger_umedida_id_obj = db.relationship('')
    tipo_medida = db.Column(db.String(50),  comment='Tipo da Medida')
    qnt_medida = db.Column(db.Numeric(18, 6),  comment='Quantidade da Medida')
    marca = db.Column(db.String(50), comment='Marca')
    nr_volume = db.Column(db.Numeric(18, 6), comment='Número de Volume')
    peso_liquido = db.Column(db.Numeric(18, 6),  comment='Peso Liquido')
    peso_bruto = db.Column(db.Numeric(18, 6),  comment='Peso Bruto')

    ger_umedida = relationship('GerUmedida')
    mov = relationship('Mov')
    


class MovPedagio(generic_model, db.Model):
    __tablename__ = 'mov_pedagio'
    __table_args__ = {'comment': 'Movimentação-Pedagio do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_pessoa_id_emp_pedagio = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Empresa do Pedágio')
    ger_pessoa_id_emp_pedagio_obj = db.relationship('')
    ger_pessoa_id_responsavel = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Responsável')
    ger_pessoa_id_responsavel_obj = db.relationship('')
    valor_pedagio = db.Column(db.Numeric(18, 6),  comment='Valor do Vale Pedagio')
    nr_comprovante = db.Column(db.String(50), comment='Numero do Comprovante')

    ger_pessoa = relationship('GerPessoa', primaryjoin='MovPedagio.ger_pessoa_id_emp_pedagio == GerPessoa.id')
    ger_pessoa1 = relationship('GerPessoa', primaryjoin='MovPedagio.ger_pessoa_id_responsavel == GerPessoa.id')
    mov = relationship('Mov')
    


class MovPercurso(generic_model, db.Model):
    __tablename__ = 'mov_percurso'
    __table_args__ = {'comment': 'Movimentação-Percurso do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_cidade_id = db.Column(db.ForeignKey('ger_cidade.id'), comment='ID da Cidade')
    ger_cidade_id_obj = db.relationship('')

    ger_cidade = relationship('GerCidade')
    mov = relationship('Mov')
    


class MovSeguradora(generic_model, db.Model):
    __tablename__ = 'mov_seguradora'
    __table_args__ = {'comment': 'Movimentação-Seguro do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_pessoa_id_responsavel = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Responsável')
    ger_pessoa_id_responsavel_obj = db.relationship('')
    ger_pessoa_id_seguradora = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Seguradora')
    ger_pessoa_id_seguradora_obj = db.relationship('')
    nr_apolice = db.Column(db.String(50), comment='Numero da Apolice')
    nr_averbacao = db.Column(db.String(50), comment='Numero da Averbacao')
    valor = db.Column(db.Numeric(18, 6), comment='Valor Seguro')
    tipo_responsavel = db.Column(Integer, comment='Tipo Responsável')

    ger_pessoa = relationship('GerPessoa', primaryjoin='MovSeguradora.ger_pessoa_id_responsavel == GerPessoa.id')
    ger_pessoa1 = relationship('GerPessoa', primaryjoin='MovSeguradora.ger_pessoa_id_seguradora == GerPessoa.id')
    mov = relationship('Mov')
    


class MovTomador(generic_model, db.Model):
    __tablename__ = 'mov_tomador'
    __table_args__ = {'comment': 'Movimentação-Tomador do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ger_pessoa_id_responsavel = db.Column(db.ForeignKey('ger_pessoa.id'),  comment='ID da Pessoal - Responsável')
    ger_pessoa_id_responsavel_obj = db.relationship('')

    ger_pessoa = relationship('GerPessoa')
    mov = relationship('Mov')
    


class OpeCentro2Area(generic_model, db.Model):
    __tablename__ = 'ope_centro2_area'
    __table_args__ = {'comment': 'Operação-Sistema da Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ativo = db.Column(db.String(1),  comment='Ativo')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id', ondelete='CASCADE'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_periodo_id = db.Column(db.ForeignKey('ope_periodo.id'), comment='ID do Período da Operação')
    ope_periodo_id_obj = db.relationship('')
    ger_umedida_id = db.Column(db.ForeignKey('ger_umedida.id'),  comment='ID da U.Medida')
    ger_umedida_id_obj = db.relationship('')
    ope_tipo_solo_id = db.Column(db.ForeignKey('ope_tipo_solo.id'), comment='ID do Tipo de Solo')
    ope_tipo_solo_id_obj = db.relationship('')
    ope_espac_id = db.Column(db.ForeignKey('ope_espac.id'), comment='ID do Espacamento')
    ope_espac_id_obj = db.relationship('')
    ope_atividade_sistema_id_cult = db.Column(db.ForeignKey('ope_atividade_sistema.id'), comment='ID do Sistema da Atividade - Cultivo')
    ope_atividade_sistema_id_cult_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ger_itemserv_var_id = db.Column(db.ForeignKey('ger_itemserv_var.id'), comment='ID da Variação do Item/Serviço')
    ger_itemserv_var_id_obj = db.relationship('')
    ger_itemserv_id_ult = db.Column(db.ForeignKey('ger_itemserv.id'), comment='ID do Item/Serviço - Ultimo')
    ger_itemserv_id_ult_obj = db.relationship('')
    ger_itemserv_var_id_ult = db.Column(db.ForeignKey('ger_itemserv_var.id'), comment='ID da Variação do Item/Serviço - Ultimo')
    ger_itemserv_var_id_ult_obj = db.relationship('')
    qnt_area_prod = db.Column(db.Numeric(18, 6),   comment='Quantidade Área - Produtiva')
    qnt_area_improd = db.Column(db.Numeric(18, 6),   comment='Quantidade Área - Improdutiva')
    qnt_plantas_estande = db.Column(db.Numeric(18, 6),  comment='Quantidade de Plantas Estande')
    bloco_col = db.Column(db.String(100), comment='Bloco de Colheita')
    observacao = db.Column(db.String(250), comment='Observação')
    lat_x = db.Column(db.String(100), comment='Latitude X')
    long_y = db.Column(db.String(100), comment='Longitude Y')
    alt_z = db.Column(db.String(100), comment='Altitude Z')
    data_ini_plan = db.Column(Date, comment='Data Inicial de Plantio')
    data_fin_plan = db.Column(Date, comment='Data Final de Plantio')
    data_ult_plan = db.Column(Date, comment='Ultima Data de Plantio')
    data_ini_col = db.Column(Date, comment='Data Inicial de Colheita')
    data_fin_col = db.Column(Date, comment='Data Final de Colheita')
    data_ult_col = db.Column(Date, comment='Ultima Data de Colheita')
    data_emerg = db.Column(Date, comment='Data de Emergencia')
    data_florada_1 = db.Column(Date, comment='Data de 1 Florada')
    ope_atividade_sistema_id_plan = db.Column(db.ForeignKey('ope_atividade_sistema.id'), comment='ID do Sistema da Atividade - Plantio')
    ope_atividade_sistema_id_plan_obj = db.relationship('')
    ope_atividade_sistema_id_col = db.Column(db.ForeignKey('ope_atividade_sistema.id'), comment='ID do Sistema da Atividade - Colheita')
    ope_atividade_sistema_id_col_obj = db.relationship('')
    ope_estagio_id = db.Column(db.ForeignKey('ope_estagio.id'), comment='ID do Estágio')
    ope_estagio_id_obj = db.relationship('')

    ger_itemserv = relationship('GerItemserv', primaryjoin='OpeCentro2Area.ger_itemserv_id == GerItemserv.id')
    ger_itemserv1 = relationship('GerItemserv', primaryjoin='OpeCentro2Area.ger_itemserv_id_ult == GerItemserv.id')
    ger_itemserv_var = relationship('GerItemservVar', primaryjoin='OpeCentro2Area.ger_itemserv_var_id == GerItemservVar.id')
    ger_itemserv_var1 = relationship('GerItemservVar', primaryjoin='OpeCentro2Area.ger_itemserv_var_id_ult == GerItemservVar.id')
    ger_umedida = relationship('GerUmedida')
    ope_atividade_sistema = relationship('OpeAtividadeSistema', primaryjoin='OpeCentro2Area.ope_atividade_sistema_id_col == OpeAtividadeSistema.id')
    ope_atividade_sistema1 = relationship('OpeAtividadeSistema', primaryjoin='OpeCentro2Area.ope_atividade_sistema_id_cult == OpeAtividadeSistema.id')
    ope_atividade_sistema2 = relationship('OpeAtividadeSistema', primaryjoin='OpeCentro2Area.ope_atividade_sistema_id_plan == OpeAtividadeSistema.id')
    ope_centro2 = relationship('OpeCentro2')
    ope_espac = relationship('OpeEspac')
    ope_estagio = relationship('OpeEstagio')
    ope_periodo = relationship('OpePeriodo')
    ope_tipo_solo = relationship('OpeTipoSolo')
    


class OpeCentro2Equip(generic_model, db.Model):
    __tablename__ = 'ope_centro2_equip'
    __table_args__ = {'comment': 'Operação-Dados de Equipamento do Centro Nível 2 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    tipo_rodado = db.Column(db.String(100),  comment='Tipo do Rodado (00 - Não Aplicável; 01 - Truck; 02 - Toco; 03 - Cavalo Mecânico; 04 - Van; 05 - Utilitário; 06 - Outros)')
    tipo_carroceria = db.Column(db.String(100),  comment='Tipo do Carroceria (00 - Não Aplicável; 01 - Aberta; 02 - Fechada/Baú; 03 - Graneleira; 04 - Porta Container; 05 - Siber)')
    ger_cidade_id = db.Column(db.ForeignKey('ger_cidade.id'),  comment='ID Cidade')
    ger_cidade_id_obj = db.relationship('')
    placa = db.Column(db.String(100), comment='Placa')
    renavam = db.Column(db.String(100), comment='Renavam')
    tara = db.Column(db.Numeric(18, 6), comment='Tara')
    capacidade_kg = db.Column(db.Numeric(18, 6), comment='Capacidade em Kg')
    capacidade_m3 = db.Column(db.Numeric(18, 6), comment='Capacidade em M3')
    potencia = db.Column(db.String(100), comment='Potência')
    nr_chassi = db.Column(db.String(100), comment='Numero Chassi')
    nr_serie = db.Column(db.String(100), comment='Numero Série')
    liberado_abastec = db.Column(db.String(1),  comment='Liberado para abastecimento')
    largura = db.Column(db.Numeric(18, 6), comment='Largura')
    altura = db.Column(db.Numeric(18, 6), comment='Altura')
    nr_registro_estadual = db.Column(db.String(50), comment='Numero Registro Estadual')
    tipo_tracao = db.Column(Integer, comment='Tipo 0-Tração, 1-Reboque/Implemento')
    tipo_transp_auto_carga = db.Column(Integer, comment='Tipo Transp. Automo Carga 1-Agreg; 2-Indenp; 3-Outros')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id', ondelete='CASCADE'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_frente_trabalho_id = db.Column(db.ForeignKey('ope_frente_trabalho.id'), comment='ID da Frente de Trabalho')
    ope_frente_trabalho_id_obj = db.relationship('')
    data_venc_licenciamento = db.Column(Date, comment='Data de vencimento de Licenciamento')
    data_venc_imposto = db.Column(Date, comment='Data de vencimento do Imposto')

    ger_cidade = relationship('GerCidade')
    ope_centro2 = relationship('OpeCentro2')
    ope_frente_trabalho = relationship('OpeFrenteTrabalho')
    


class OpeCentro2Estoque(generic_model, db.Model):
    __tablename__ = 'ope_centro2_estoque'
    __table_args__ = {'comment': 'Operação-Dados de Estoque do Centro Nível 2 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id', ondelete='CASCADE'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    tipo = db.Column(db.String(1), comment='Tipo: E-Externo, I-Interno')

    ope_centro2 = relationship('OpeCentro2')
    


class OpeCentro2MovMedia(generic_model, db.Model):
    __tablename__ = 'ope_centro2_mov_media'
    __table_args__ = {'comment': 'Operação-Mov. Médio do Compart. x Centro Nível 2 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id', ondelete='CASCADE'), comment='ID do Centro Nível 2 de Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'),  comment='ID do Compartimento')
    ope_compart_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    qnt_media_min = db.Column(db.Numeric(18, 6),   comment='Quantidade Média Mínima')
    qnt_media_max = db.Column(db.Numeric(18, 6),   comment='Quantidade Média Máxima')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'),  comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ger_marca_modelo_id = db.Column(db.ForeignKey('ger_marca_modelo.id'), comment='ID do Modelo')
    ger_marca_modelo_id_obj = db.relationship('')
    capacidade = db.Column(db.Numeric(18, 6),  comment='Capacidade')
    dt_valid_ini = db.Column(Date,  comment='Data validade inicial')

    ger_itemserv = relationship('GerItemserv')
    ger_marca_modelo = relationship('GerMarcaModelo')
    ope_centro2 = relationship('OpeCentro2')
    ope_compart = relationship('OpeCompart')
    


class OpeCentro2ParamPer(generic_model, db.Model):
    __tablename__ = 'ope_centro2_param_per'
    __table_args__ = {'comment': 'Operação-Parâmetros por Período do Centro Nível 2 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    dt_valid_ini = db.Column(Date,  server_default=text("now()"), comment='Data validade inicial')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'), comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ope_frente_trabalho_id = db.Column(db.ForeignKey('ope_frente_trabalho.id'), comment='ID da Frente de Trabalho')
    ope_frente_trabalho_id_obj = db.relationship('')

    ger_empresa = relationship('GerEmpresa')
    ope_centro2 = relationship('OpeCentro2')
    ope_frente_trabalho = relationship('OpeFrenteTrabalho')
    


class OpeCentro2Pessoa(generic_model, db.Model):
    __tablename__ = 'ope_centro2_pessoa'
    __table_args__ = {'comment': 'Operação-Dados de Pessoa do Centro Nível 2 de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_frente_trabalho_id = db.Column(db.ForeignKey('ope_frente_trabalho.id'), comment='ID da Frente de Trabalho')
    ope_frente_trabalho_id_obj = db.relationship('')
    pto_idenf_tipo = db.Column(db.String(1), comment='Tipo de Identificação do Ponto: 1-Cpf / Senha')
    pto_idenf = db.Column(db.String(50), comment='Identificação do Ponto')

    ope_centro2 = relationship('OpeCentro2')
    ope_frente_trabalho = relationship('OpeFrenteTrabalho')
    


class OpeCentroConfig(generic_model, db.Model):
    __tablename__ = 'ope_centro_config'
    __table_args__ = {'comment': 'Operação-Regra de Configuração'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    tipo_regra = db.Column(db.String(1),  comment='Tipo Regra: E-Exclusão, I-Inclusão')
    ope_centro2_ord_tipo_id = db.Column(db.ForeignKey('ope_centro2_ord_tipo.id'), comment='ID do Tipo da Ordem')
    ope_centro2_ord_tipo_id_obj = db.relationship('')
    mov_operacao_id = db.Column(db.ForeignKey('mov_operacao.id'), comment='ID da Operação do Movimento')
    mov_operacao_id_obj = db.relationship('')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'), comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída')
    ope_centro1_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'), comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    ger_itemserv_grupo_id = db.Column(db.ForeignKey('ger_itemserv_grupo.id'), comment='ID do Grupo do Item/Serviço')
    ger_itemserv_grupo_id_obj = db.relationship('')
    ger_itemserv_subgrupo_id = db.Column(db.ForeignKey('ger_itemserv_subgrupo.id'), comment='ID do Sub-Grupo de Item/Serviço')
    ger_itemserv_subgrupo_id_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'), comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ope_compart_grupo_id = db.Column(db.ForeignKey('ope_compart_grupo.id'), comment='ID de Grupo do Compartimento')
    ope_compart_grupo_id_obj = db.relationship('')
    ope_compart_subgrupo_id = db.Column(db.ForeignKey('ope_compart_subgrupo.id'), comment='ID de Sub-Grupo do Compartimento')
    ope_compart_subgrupo_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartimento')
    ope_compart_id_obj = db.relationship('')
    ope_centro_tipo_id = db.Column(db.ForeignKey('ope_centro_tipo.id'), comment='ID do Tipo de Centro Entrada/Saída')
    ope_centro_tipo_id_obj = db.relationship('')
    ope_centro_subtipo_id = db.Column(db.ForeignKey('ope_centro_subtipo.id'), comment='ID do Sub-Tipo de Centro Entrada/Saída')
    ope_centro_subtipo_id_obj = db.relationship('')
    ope_centro_grupo_id = db.Column(db.ForeignKey('ope_centro_grupo.id'), comment='ID do Grupo de Centro Entrada/Saída')
    ope_centro_grupo_id_obj = db.relationship('')
    ope_centro_subgrupo_id = db.Column(db.ForeignKey('ope_centro_subgrupo.id'), comment='ID do Sub-Grupo de Centro Entrada/Saída')
    ope_centro_subgrupo_id_obj = db.relationship('')
    ope_estagio_id = db.Column(db.ForeignKey('ope_estagio.id'), comment='ID do Estágio')
    ope_estagio_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    ativo = db.Column(db.String(1),  comment='Ativo: S-Sim, N-Não')

    ger_empresa = relationship('GerEmpresa')
    ger_itemserv_grupo = relationship('GerItemservGrupo')
    ger_itemserv = relationship('GerItemserv')
    ger_itemserv_subgrupo = relationship('GerItemservSubgrupo')
    mov_operacao = relationship('MovOperacao')
    ope_atividade = relationship('OpeAtividade')
    ope_centro1 = relationship('OpeCentro1')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro2_ord_tipo = relationship('OpeCentro2OrdTipo')
    ope_centro_grupo = relationship('OpeCentroGrupo')
    ope_centro_subgrupo = relationship('OpeCentroSubgrupo')
    ope_centro_subtipo = relationship('OpeCentroSubtipo')
    ope_centro_tipo = relationship('OpeCentroTipo')
    ope_compart_grupo = relationship('OpeCompartGrupo')
    ope_compart = relationship('OpeCompart')
    ope_compart_subgrupo = relationship('OpeCompartSubgrupo')
    ope_estagio = relationship('OpeEstagio')
    


class OpeCentroPrev(generic_model, db.Model):
    __tablename__ = 'ope_centro_prev'
    __table_args__ = {'comment': 'Operacional-Previsão por Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro_versao_id = db.Column(db.ForeignKey('ope_centro_versao.id'),  comment='ID da Versão da Operação')
    ope_centro_versao_id_obj = db.relationship('')
    data_per = db.Column(Date,  comment='Data do Período')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'),  comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    ope_periodo_id = db.Column(db.ForeignKey('ope_periodo.id'),  comment='ID do Período da Operação')
    ope_periodo_id_obj = db.relationship('')
    qnt01 = db.Column(db.Numeric(18, 2),   comment='Quantidade 01')
    qnt02 = db.Column(db.Numeric(18, 2),   comment='Quantidade 02')
    qnt03 = db.Column(db.Numeric(18, 2),   comment='Quantidade 03')
    qnt04 = db.Column(db.Numeric(18, 2),   comment='Quantidade 04')
    qnt05 = db.Column(db.Numeric(18, 2),   comment='Quantidade 05')
    qnt06 = db.Column(db.Numeric(18, 2),   comment='Quantidade 06')
    qnt07 = db.Column(db.Numeric(18, 2),   comment='Quantidade 07')
    qnt08 = db.Column(db.Numeric(18, 2),   comment='Quantidade 08')
    qnt09 = db.Column(db.Numeric(18, 2),   comment='Quantidade 09')
    qnt10 = db.Column(db.Numeric(18, 2),   comment='Quantidade 10')
    qnt11 = db.Column(db.Numeric(18, 2),   comment='Quantidade 11')
    qnt12 = db.Column(db.Numeric(18, 2),   comment='Quantidade 12')
    qnt13 = db.Column(db.Numeric(18, 2),   comment='Quantidade 13')
    qnt14 = db.Column(db.Numeric(18, 2),   comment='Quantidade 14')
    qnt15 = db.Column(db.Numeric(18, 2),   comment='Quantidade 15')
    qnt16 = db.Column(db.Numeric(18, 2),   comment='Quantidade 16')
    qnt17 = db.Column(db.Numeric(18, 2),   comment='Quantidade 17')
    qnt18 = db.Column(db.Numeric(18, 2),   comment='Quantidade 18')
    qnt19 = db.Column(db.Numeric(18, 2),   comment='Quantidade 19')
    qnt20 = db.Column(db.Numeric(18, 2),   comment='Quantidade 20')
    qnt21 = db.Column(db.Numeric(18, 2),   comment='Quantidade 21')
    qnt22 = db.Column(db.Numeric(18, 2),   comment='Quantidade 22')
    qnt23 = db.Column(db.Numeric(18, 2),   comment='Quantidade 23')
    qnt24 = db.Column(db.Numeric(18, 2),   comment='Quantidade 24')
    qnt25 = db.Column(db.Numeric(18, 2),   comment='Quantidade 25')
    qnt26 = db.Column(db.Numeric(18, 2),   comment='Quantidade 26')
    qnt27 = db.Column(db.Numeric(18, 2),   comment='Quantidade 27')
    qnt28 = db.Column(db.Numeric(18, 2),   comment='Quantidade 28')
    qnt29 = db.Column(db.Numeric(18, 2),   comment='Quantidade 29')
    qnt30 = db.Column(db.Numeric(18, 2),   comment='Quantidade 30')
    qnt31 = db.Column(db.Numeric(18, 2),   comment='Quantidade 31')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_centro2_ord_tipo_id = db.Column(db.ForeignKey('ope_centro2_ord_tipo.id'), comment='ID do Tipo da Ordem')
    ope_centro2_ord_tipo_id_obj = db.relationship('')
    ordem_exec = db.Column(db.String(3), comment='Ordem Execução')
    tipo_executor = db.Column(db.String(1), comment='Tipo Executor: P-Próprio / T-Terceiro')

    ger_empresa = relationship('GerEmpresa')
    ope_atividade = relationship('OpeAtividade')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro2_ord_tipo = relationship('OpeCentro2OrdTipo')
    ope_centro_versao = relationship('OpeCentroVersao')
    ope_periodo = relationship('OpePeriodo')
    process = relationship('SysProcessLog')
    


class OpeCentroRatFator(generic_model, db.Model):
    __tablename__ = 'ope_centro_rat_fator'
    __table_args__ = {'comment': 'Operação-Fator de Rateio de Centro de Entrada/Saída'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 de Entrada/Saída')
    ope_centro1_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 de Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_periodo_id = db.Column(db.ForeignKey('ope_periodo.id'), comment='ID do Operação do Período')
    ope_periodo_id_obj = db.relationship('')
    ctb_centro_id = db.Column(db.ForeignKey('ctb_centro.id'), comment='ID do Centro Contábil')
    ctb_centro_id_obj = db.relationship('')
    ope_centro_subtipo_id = db.Column(db.ForeignKey('ope_centro_subtipo.id'),  comment='ID do Sub-Tipo de Centro Entrada/Saída')
    ope_centro_subtipo_id_obj = db.relationship('')
    fator_rat = db.Column(db.Numeric(18, 6),   comment='Fator de Rateio')
    perc_rat = db.Column(db.Numeric(18, 6),  comment='Percentual de Rateio')
    ope_centro_rat_periodo_id = db.Column(db.ForeignKey('ope_centro_rat_periodo.id'),  comment='ID do Período de Rateio do Centro do Entrada/Saída')
    ope_centro_rat_periodo_id_obj = db.relationship('')

    ctb_centro = relationship('CtbCentro')
    ger_empresa = relationship('GerEmpresa')
    ope_centro1 = relationship('OpeCentro1')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro_rat_periodo = relationship('OpeCentroRatPeriodo')
    ope_centro_subtipo = relationship('OpeCentroSubtipo')
    ope_periodo = relationship('OpePeriodo')
    


class OpeCentroRendFator(generic_model, db.Model):
    __tablename__ = 'ope_centro_rend_fator'
    __table_args__ = {'comment': 'Operacional-Fator de rendimentos por Atividade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'), comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'),  comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    fator_rend = db.Column(db.Numeric(18, 4),   comment='Fator de Rendimento')
    fator_util = db.Column(db.Numeric(18, 4),  server_default=text("100"), comment='Fator de Utilização')
    ope_centro_rend_id = db.Column(db.ForeignKey('ope_centro_rend.id', ondelete='CASCADE', onupdate='CASCADE'),  comment='ID do Rendimento de Componente')
    ope_centro_rend_id_obj = db.relationship('')

    ctb_comp = relationship('CtbComp')
    ger_itemserv = relationship('GerItemserv')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro_rend = relationship('OpeCentroRend')
    


class OpeOcorCompartMovDet(generic_model, db.Model):
    __tablename__ = 'ope_ocor_compart_mov_det'
    __table_args__ = {'comment': 'Operação-Detalhe da Movimentação de Compartimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_compart_mov_id = db.Column(db.ForeignKey('ope_ocor_compart_mov.id'),  comment='ID da Movimentação do Compartimento')
    ope_compart_mov_id_obj = db.relationship('')
    ope_compart_ocor_id = db.Column(db.ForeignKey('ope_compart_ocor.id'),  comment='ID da Ocorrência do Compartimento')
    ope_compart_ocor_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'),  comment='ID do Compartimento')
    ope_compart_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    qnt_medicao = db.Column(db.Numeric(18, 6),   comment='Quantidade da Medição')

    ope_compart = relationship('OpeCompart')
    ope_compart_mov = relationship('OpeOcorCompartMov')
    ope_compart_ocor = relationship('OpeCompartOcor')
    


class OpeOcorMovDest(generic_model, db.Model):
    __tablename__ = 'ope_ocor_mov_dest'
    __table_args__ = {'comment': 'Operação-Destinação da Movimentação de Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_ocor_mov_id = db.Column(db.ForeignKey('ope_ocor_mov.id', ondelete='CASCADE', onupdate='CASCADE'),  comment='ID do Movimento de Ocorrência')
    ope_ocor_mov_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartimento')
    ope_compart_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')

    ope_centro2 = relationship('OpeCentro2')
    ope_compart = relationship('OpeCompart')
    ope_ocor_mov = relationship('OpeOcorMov')
    


class OpeOcorPrev(generic_model, db.Model):
    __tablename__ = 'ope_ocor_prev'
    __table_args__ = {'comment': 'Operação-Previsão de Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_ocor_id = db.Column(db.ForeignKey('ope_ocor.id'),  comment='ID da Ocorrência')
    ope_ocor_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartimento')
    ope_compart_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    data_ult_solucao = db.Column(Date, comment='Data Última Solução')
    qnt_limite = db.Column(Integer,   comment='Quantidade Limite')
    qnt_aviso = db.Column(Integer,   comment='Quantidade Aviso')
    qnt_dia_limite = db.Column(Integer,   comment='Quantidade Dias Limite')
    qnt_dia_aviso = db.Column(Integer,   comment='Quantidade Dias Aviso')
    data_valid_ini = db.Column(Date,  comment='Data de Validade Inicial')

    ope_centro2 = relationship('OpeCentro2')
    ope_compart = relationship('OpeCompart')
    ope_ocor = relationship('OpeOcor')
    


class BorDispositivo(generic_model, db.Model):
    __tablename__ = 'bor_dispositivo'
    __table_args__ = {'comment': 'Bordo-Dispositivos'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    nome = db.Column(db.String(100), comment='Nome')
    ativo = db.Column(db.String(1), comment='Ativo')
    numero_serie = db.Column(db.String(50),  unique=True, comment='Número de Série')
    ope_centro2_equip_id = db.Column(db.ForeignKey('ope_centro2_equip.id'), comment='ID do Centro Nível 2 - Equipamento')
    ope_centro2_equip_id_obj = db.relationship('')
    tipo = db.Column(db.String(1), comment='Tipo Dispositivo: 1-Bordo, 2-IButton')
    ope_centro2_pessoa_id = db.Column(db.ForeignKey('ope_centro2_pessoa.id'), comment='ID do Centro Nível 2 - Pessoal')
    ope_centro2_pessoa_id_obj = db.relationship('')

    ope_centro2_equip = relationship('OpeCentro2Equip')
    ope_centro2_pessoa = relationship('OpeCentro2Pessoa')
    


class FinPagrecBaixa(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_baixa'
    __table_args__ = {'comment': 'Financeiro-Baixa de Titulo Pag/Rec'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    tipo = db.Column(db.String(1),  comment='Tipo de Baixa: N-Normal; A-Agrupamento; E-Encontro')
    fin_pagrec_parc_id = db.Column(db.ForeignKey('fin_pagrec_parc.id'),  comment='ID da Parcela do Pag/Rec')
    fin_pagrec_parc_id_obj = db.relationship('')
    fin_conta_id = db.Column(db.ForeignKey('fin_conta.id'),  comment='ID da Conta')
    fin_conta_id_obj = db.relationship('')
    fin_doc_tipo_id = db.Column(db.ForeignKey('fin_doc_tipo.id'),  comment='ID do Tipo de Documento')
    fin_doc_tipo_id_obj = db.relationship('')
    fin_lote_id = db.Column(db.ForeignKey('fin_lote.id'),  comment='ID do Lote')
    fin_lote_id_obj = db.relationship('')
    numero_doc_pagrec = db.Column(db.String(50),  comment='Numero Documento do Pag/Rec (Cheque,Outros)')
    valor_pagrec = db.Column(db.Numeric(18, 2),   comment='Valor do Pag/Rec')
    data_baixa = db.Column(Date, comment='Data da Baixa')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_conta = relationship('FinConta')
    fin_doc_tipo = relationship('FinDocTipo')
    fin_lote = relationship('FinLote')
    fin_pagrec_parc = relationship('FinPagrecParc')
    


class FinPagrecClas(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_class'
    __table_args__ = {'comment': 'Financeiro-Classificação do Titulo Pag/Rec'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_pagrec_id = db.Column(db.ForeignKey('fin_pagrec.id'), comment='ID do Pag/Rec')
    fin_pagrec_id_obj = db.relationship('')
    fin_class_id = db.Column(db.ForeignKey('fin_class.id'),  comment='ID da Classificação ')
    fin_class_id_obj = db.relationship('')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor')
    fator_rat = db.Column(db.Numeric(18, 6),   comment='Fator de Rateio')
    perc_rat = db.Column(db.Numeric(18, 6),   comment='Percentual de Rateio')
    fin_pagrec_banco_id = db.Column(db.ForeignKey('fin_pagrec_banco.id'), comment='ID da Movimento Bancário de Pag/Rec ')
    fin_pagrec_banco_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_class = relationship('FinClas')
    fin_pagrec_banco = relationship('FinPagrecBanco')
    fin_pagrec = relationship('FinPagrec')
    


class FinPagrecParcVar(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_parc_var'
    __table_args__ = {'comment': 'Financeiro-Variação da Baixa de Parcela '}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_pagrec_parc_id = db.Column(db.ForeignKey('fin_pagrec_parc.id'),  comment='ID da Parcela de Pag/Rec')
    fin_pagrec_parc_id_obj = db.relationship('')
    fin_tipo_variacao_id = db.Column(db.ForeignKey('fin_tipo_variacao.id'),  comment='ID do Tipo de Variação')
    fin_tipo_variacao_id_obj = db.relationship('')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_pagrec_parc = relationship('FinPagrecParc')
    fin_tipo_variacao = relationship('FinTipoVariacao')
    


class FisDocEvento(generic_model, db.Model):
    __tablename__ = 'fis_doc_evento'
    __table_args__ = {'comment': 'Fiscal-Evento do Documento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fis_doc_id = db.Column(db.ForeignKey('fis_doc.id'),  comment='ID do Documento')
    fis_doc_id_obj = db.relationship('')
    xml_retorno = db.Column(Text,  comment='XML Retorno')
    tipo_evento = db.Column(Integer,  comment='1 - Autorizacao; 2 - Cancelamento; 3 - Inutilizacao; 4 - Carta de Correcao')
    nr_protocolo = db.Column(db.String(50),  comment='Numero Protocolo')
    qnt_evento = db.Column(Integer, comment='Quantidade do Evento')
    descricao_evento = db.Column(Text, comment='Descricao do Evento')
    pdf_retorno = db.Column(Text, comment='PDF Retorno')

    fis_doc = relationship('FisDoc')
    


class FisTributacao(generic_model, db.Model):
    __tablename__ = 'fis_tributacao'
    __table_args__ = (
        CheckConstraint('((mov_id IS NOT NULL) AND (mov_itemserv_id IS NULL)) OR ((mov_id IS NULL) AND (mov_itemserv_id IS NOT NULL))'),
        {'comment': 'Fiscal-Tributação'}
    )

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fis_tributo_id = db.Column(db.ForeignKey('fis_tributo.id'),  comment='ID do Tributo')
    fis_tributo_id_obj = db.relationship('')
    mov_id = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    mov_itemserv_id = db.Column(db.ForeignKey('mov_itemserv.id'), comment='ID do Item/Serv do Movimento')
    mov_itemserv_id_obj = db.relationship('')
    cst = db.Column(db.String(4),  comment='CST/CSOSN')
    modalidade_base_calc = db.Column(Integer,  comment='Modalidade da Base de Calculo')
    valor_base_calc = db.Column(db.Numeric(18, 6),   comment='Valor da Base de Calculo')
    perc_aliquota = db.Column(db.Numeric(18, 6),   comment='Percentual da Aliquota')
    valor_imposto = db.Column(db.Numeric(18, 6),   comment='Valor do Imposto')
    valor_base_calc_isento = db.Column(db.Numeric(18, 6),   comment='Valor da Base de Calculo Insento')
    perc_aliquota_isento = db.Column(db.Numeric(18, 6),   comment='Percentual da Aliquota Insento')
    valor_imposto_isento = db.Column(db.Numeric(18, 6),   comment='Valor do Imposto Isento')
    valor_base_calc_st = db.Column(db.Numeric(18, 6),   comment='Valor da Base de Calculo ST')
    margem_agregada_st = db.Column(db.Numeric(18, 6),   comment='Margem de Valor Agregado ST')
    perc_aliquota_st = db.Column(db.Numeric(18, 6),   comment='Percentual da Aliquota do Imposto ST')
    valor_imposto_st = db.Column(db.Numeric(18, 6),   comment='Valor do Imposto ST')
    perc_reducao_base_calc = db.Column(db.Numeric(18, 6),   comment='Percentual de Reduçao de Base de Calculo ICMS')
    observacao = db.Column(db.String(250), comment='Observação')
    valor_imposto_operacao = db.Column(db.Numeric(18, 6),   comment='Valor do Imposto da Operacao')
    valor_imposto_diferido = db.Column(db.Numeric(18, 6),   comment='Valor do Imposto Diferido')
    perc_credito_sn = db.Column(db.Numeric(18, 6),   comment='Percentual de crédito aplicavel ao SN')
    valor_credito_sn = db.Column(db.Numeric(18, 6),   comment='Valor do crédito do ICMS')
    valor_base_calc_fcp = db.Column(db.Numeric(18, 6),   comment='Valor da Base de Calculo FCP')
    perc_aliquota_fcp = db.Column(db.Numeric(18, 6),   comment='Percentual da Aliquota FCP')
    valor_imposto_fcp = db.Column(db.Numeric(18, 6),   comment='Valor do FCP')
    valor_base_calc_fcp_st = db.Column(db.Numeric(18, 6),   comment='Valor da Base de Calculo FCP ST')
    perc_aliquota_fcp_st = db.Column(db.Numeric(18, 6),   comment='Percentual da Aliquota FCP ST')
    valor_imposto_fcp_st = db.Column(db.Numeric(18, 6),   comment='Valor do FCP ST')
    fin_pagrec_id = db.Column(db.ForeignKey('fin_pagrec.id'), comment='ID do Pag/Rec')
    fin_pagrec_id_obj = db.relationship('')
    ger_pessoa_endereco_id = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoa')
    ger_pessoa_endereco_id_obj = db.relationship('')
    perc_uf_fim_fcp = db.Column(db.Numeric(18, 6),  comment='Percentual do ICMS relativo ao Fundo de Combate à pobreza (FCP) na UF de término da prestação do serviço de transporte')
    valor_total_uf_fim_fcp = db.Column(db.Numeric(18, 6),  comment='Valor do ICMS relativo ao Fundo de Combate á Pobreza (FCP) da UF de término da prestação')
    valor_imposto_fcp_st_ret = db.Column(db.Numeric(18, 6),  comment='Valor do FCP ST retido anteriormente')
    valor_base_calc_fcp_st_ret = db.Column(db.Numeric(18, 6),  comment='Valor da Base de Calculo FCP ST retido anteriormente')
    perc_aliquota_fcp_st_ret = db.Column(db.Numeric(18, 6),  comment='Percentual da Aliquota FCP ST retido anteriormente')
    valor_imposto_desonerado = db.Column(db.Numeric(18, 6),  comment='Valor do desonerado')
    motivo_imposto_desonerado = db.Column(Integer, comment='Motivo da desoneração do ICMS Valores permitidos: 1-táxi, 3-produtor agropecuário, 4-frotista/locadora, 5-diplomático/consular, 6-utilitários e motocicletas, 7-SUFRAMA, 9-outros, 10-deficiente condutor, 11-deficiente não condutor, 12-órgão de fomento e desenvolvimento agropecuário, 16-Olimpíadas Rio 2016')
    modalidade_base_calc_st = db.Column(Integer, comment='Modalidade de determinação da base de cálculo do ICMS ST. Valores permitidos 0-preço tabelado ou máximo sugerido, 1-lista negativa (valor), 2-lista positiva (valor), 3-lista neutra (valor), 4-margem de valor agregado (%), 5-pauta (valor)')
    valor_base_calc_st_ret = db.Column(db.Numeric(18, 6),  comment='Valor da base de cálculo do ICMS retido anteriormente')
    valor_imposto_st_ret = db.Column(db.Numeric(18, 6),  comment='Valor do ICMS retido anteriormente')
    perc_aliquota_red_base_calc_efetiva = db.Column(db.Numeric(18, 6),  comment='Informado apenas para icms_situacao_tributaria = 60 ou 500. Percentual de redução, caso estivesse submetida ao regime comum de tributação, para obtenção da base de cálculo efetiva (icms_base_calculo_efetiva). Obs.: opcional a critério da UF')
    valor_base_calc_efetiva = db.Column(db.Numeric(18, 6),  comment='Informado apenas para icms_situacao_tributaria = 60 ou 500. Valor da base de cálculo que seria atribuída à operação própria do contribuinte substituído, caso estivesse submetida ao regime comum de tributação, obtida pelo produto do valor_bruto do item por (1- icms_reducao_base_calculo_efetiva/100.0). Obs.: opcional a critério da UF')
    perc_aliquota_efetiva = db.Column(db.Numeric(18, 6),  comment='Informado apenas para icms_situacao_tributaria = 60 ou 500. Alíquota do ICMS na operação a consumidor final, caso estivesse submetida ao regime comum de tributação. Obs.: opcional a critério da UF')
    valor_imposto_efetiva = db.Column(db.Numeric(18, 6),  comment='Informado apenas para icms_situacao_tributaria = 60 ou 500. Obtido pelo produto do valor do campo icms_aliquota_efetiva pelo valor do campo icms_base_calculo_efetiva, caso estivesse submetida ao regime comum de tributação. Obs.: opcional a critério da UF')
    perc_aliquota_credito = db.Column(db.Numeric(18, 6),  comment='Alíquota aplicável de cálculo do crédito (Apenas Simples Nacional)')
    valor_imposto_credito = db.Column(db.Numeric(18, 6),  comment='Valor crédito do ICMS que pode ser aproveitado nos termos do art. 23 da LC 123 (Apenas Simples Nacional)')
    valor_base_calc_uf_fim = db.Column(db.Numeric(18, 6),  comment='Valor da BC do ICMS na UF de término da prestação do serviço de transporte')
    perc_interna_uf_fim = db.Column(db.Numeric(18, 6),  comment='Alíquota interna da UF de término da prestação do serviço de transporte')
    perc_interestadual_uf_fim = db.Column(db.Numeric(18, 6),  comment='Alíquota interestadual das UF envolvidas')
    perc_partilha_uf_fim = db.Column(db.Numeric(18, 6),  comment='Percentual provisório de partilha entre os estados. (Valor padrão de 100% a partir de 2019)')
    valor_partilha_uf_fim = db.Column(db.Numeric(18, 6),  comment='Valor do ICMS de partilha para a UF de término da prestação do serviço de transporte')
    valor_partilha_uf_inicio = db.Column(db.Numeric(18, 6),  comment='Valor do ICMS de partilha para a UF de início da prestação do serviço de transporte')
    valor_imposto_substituto = db.Column(db.Numeric(18, 6), comment='Valor do Imposto Substituto')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_pagrec = relationship('FinPagrec')
    fis_tributo = relationship('FisTributo')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    mov = relationship('Mov')
    mov_itemserv = relationship('MovItemserv')
    


class MovEntregaDoc(generic_model, db.Model):
    __tablename__ = 'mov_entrega_doc'
    __table_args__ = (
        CheckConstraint('((mov_id IS NOT NULL) AND (mov_entrega_id IS NULL)) OR ((mov_id IS NULL) AND (mov_entrega_id IS NOT NULL))'),
        {'comment': 'Movimentação-Documento da Entrega do Movimento'}
    )

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    mov_entrega_id = db.Column(db.ForeignKey('mov_entrega.id'), comment='ID da Entrega do Movimento')
    mov_entrega_id_obj = db.relationship('')
    valor_total = db.Column(db.Numeric(18, 6),  comment='Valor Total do Documento')
    mov_id_interno = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento - Interno')
    mov_id_interno_obj = db.relationship('')
    chave_documento = db.Column(db.String(50), comment='Chave do Documento')
    modelo_documento = db.Column(db.String(2), comment='Modelo do Documento')
    serie_documento = db.Column(db.String(3), comment='Serie do Documento')
    nr_documento = db.Column(db.String(50), comment='Numero do Documento')
    subserie_documento = db.Column(db.String(2), comment='Subsérie do Documento')
    data_emissao = db.Column(Date, comment='Data Emissão')

    mov_entrega = relationship('MovEntrega')
    mov = relationship('Mov', primaryjoin='MovEntregaDoc.mov_id == Mov.id')
    mov1 = relationship('Mov', primaryjoin='MovEntregaDoc.mov_id_interno == Mov.id')
    


class MovFrete(generic_model, db.Model):
    __tablename__ = 'mov_frete'
    __table_args__ = {'comment': 'Movimentação-Frete do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ope_centro2_id_equip = db.Column(db.ForeignKey('ope_centro2_equip.id'), comment='ID do Entrada/Saida - Nível2 - Veiculo')
    ope_centro2_id_equip_obj = db.relationship('')
    ger_pessoa_endereco_id_condutor = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID da Pessoa - Condutor')
    ger_pessoa_endereco_id_condutor_obj = db.relationship('')
    ger_pessoa_endereco_id_transp = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID da Pessoa - Tranportador')
    ger_pessoa_endereco_id_transp_obj = db.relationship('')
    valor_frete = db.Column(db.Numeric(18, 6),  comment='Valor do Frete')
    adic_frete_base_cal_icms = db.Column(db.String(1),  comment='Adiciona Frete Base de Calculo - ICMS')
    valor_base_calc = db.Column(db.Numeric(18, 6),  comment='Valor da Base de Calculo - ICMS')
    perc_aliquota = db.Column(db.Numeric(18, 6),  comment='Percentual da Aliquota - ICMS')
    valor_imposto = db.Column(db.Numeric(18, 6),  comment='Valor do Imposto - ICMS')
    valor_pis = db.Column(db.Numeric(18, 6),  comment='Valor do Imposto - PIS')
    valor_cofins = db.Column(db.Numeric(18, 6),  comment='Valor do Imposto - COFINS')

    ger_pessoa_endereco = relationship('GerPessoaEndereco', primaryjoin='MovFrete.ger_pessoa_endereco_id_condutor == GerPessoaEndereco.id')
    ger_pessoa_endereco1 = relationship('GerPessoaEndereco', primaryjoin='MovFrete.ger_pessoa_endereco_id_transp == GerPessoaEndereco.id')
    mov = relationship('Mov')
    ope_centro2_equip = relationship('OpeCentro2Equip')
    


class MovOrigem(generic_model, db.Model):
    __tablename__ = 'mov_origem'
    __table_args__ = {'comment': 'Movimentação-Tomador do Movimento'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento - Atual')
    mov_id_obj = db.relationship('')
    mov_id_origem = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento - Origem')
    mov_id_origem_obj = db.relationship('')
    mov_itemserv_id = db.Column(db.ForeignKey('mov_itemserv.id'), comment='ID do Movimento de Item/Serviço - Atual')
    mov_itemserv_id_obj = db.relationship('')
    mov_itemserv_id_origem = db.Column(db.ForeignKey('mov_itemserv.id'), comment='ID do Movimento de Item/Serviço - Origem')
    mov_itemserv_id_origem_obj = db.relationship('')
    tipo = db.Column(db.String(50), comment='Tipo Origem')

    mov = relationship('Mov', primaryjoin='MovOrigem.mov_id == Mov.id')
    mov1 = relationship('Mov', primaryjoin='MovOrigem.mov_id_origem == Mov.id')
    mov_itemserv = relationship('MovItemserv', primaryjoin='MovOrigem.mov_itemserv_id == MovItemserv.id')
    mov_itemserv1 = relationship('MovItemserv', primaryjoin='MovOrigem.mov_itemserv_id_origem == MovItemserv.id')
    


class MovReboque(generic_model, db.Model):
    __tablename__ = 'mov_reboque'
    __table_args__ = {'comment': 'Movimentação-Reboque'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    mov_id = db.Column(db.ForeignKey('mov.id'),  comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    ope_centro2_id_equip = db.Column(db.ForeignKey('ope_centro2_equip.id'), comment='ID do Entrada/Saida - Nível2 - Veiculo Reboque')
    ope_centro2_id_equip_obj = db.relationship('')

    mov = relationship('Mov')
    ope_centro2_equip = relationship('OpeCentro2Equip')
    


class OpeCentro2MapaCoord(generic_model, db.Model):
    __tablename__ = 'ope_centro2_mapa_coord'
    __table_args__ = {'comment': 'Operação-Dados de Mapa Long = X, Lat = Y'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_id_area = db.Column(db.ForeignKey('ope_centro2_area.id', ondelete='CASCADE'),  comment='ID do Centro Nível 2 - Area')
    ope_centro2_id_area_obj = db.relationship('')
    lat_x = db.Column(db.String(100),  comment='Latitude X')
    long_y = db.Column(db.String(100),  comment='Longitude Y')
    ordem = db.Column(Integer,  comment='Ordem')

    ope_centro2_area = relationship('OpeCentro2Area')
    


class OpeCentro2MapaGeometria(generic_model, db.Model):
    __tablename__ = 'ope_centro2_mapa_geometria'
    __table_args__ = {'comment': 'Operação-Dados de Mapa Geometria'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_id_area = db.Column(db.ForeignKey('ope_centro2_area.id', ondelete='CASCADE'),  index=True, comment='ID do Centro Nível 2 - Área')
    ope_centro2_id_area_obj = db.relationship('')
    geom = db.Column(NullType, index=True, comment='Geometria')

    ope_centro2_area = relationship('OpeCentro2Area')
    


class OpeCentro2Ord(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord'
    __table_args__ = {'comment': 'Operação-Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ger_empresa_id = db.Column(db.ForeignKey('ger_empresa.id'),  comment='ID da Empresa')
    ger_empresa_id_obj = db.relationship('')
    ope_periodo_id = db.Column(db.ForeignKey('ope_periodo.id'),  comment='ID do Período da Operação')
    ope_periodo_id_obj = db.relationship('')
    ope_centro2_pessoa_id_solic = db.Column(db.ForeignKey('ope_centro2_pessoa.id'), comment='ID do Centro Nível 2 - Pessoa - Solicitante')
    ope_centro2_pessoa_id_solic_obj = db.relationship('')
    data_ini_exec = db.Column(Date,  comment='Data Inicial Execução')
    data_fin_exec = db.Column(Date,  comment='Data Final Execução')
    ope_centro2_ord_status_id = db.Column(db.ForeignKey('ope_centro2_ord_status.id'),  comment='ID da Ordem - Status')
    ope_centro2_ord_status_id_obj = db.relationship('')
    data_status = db.Column(Date,  comment='Data Status')
    observacao_interna = db.Column(db.String(250), comment='Observacao Interna')
    observacao_externa = db.Column(db.String(250), comment='Observação Externa')
    ger_pessoa_endereco_id_exec = db.Column(db.ForeignKey('ger_pessoa_endereco.id'), comment='ID do Endereço da Pessoal - Proprietário / Terceirizado')
    ger_pessoa_endereco_id_exec_obj = db.relationship('')
    ope_centro2_ord_tipo_id = db.Column(db.ForeignKey('ope_centro2_ord_tipo.id'),  comment='ID do Tipo da Ordem')
    ope_centro2_ord_tipo_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'),  comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_frente_trabalho_id = db.Column(db.ForeignKey('ope_frente_trabalho.id'), comment='ID da Frente de Trabalho')
    ope_frente_trabalho_id_obj = db.relationship('')
    data_ini_exec_prev = db.Column(Date, comment='Data Inicial Execução Prevista')
    data_fin_exec_prev = db.Column(Date, comment='Data Final Execução Prevista')
    ope_centro_versao_id = db.Column(db.ForeignKey('ope_centro_versao.id'), comment='ID da Versão da Operação')
    ope_centro_versao_id_obj = db.relationship('')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')
    numero_ord = db.Column(db.String(50), comment='Número Ordem')
    data_valid = db.Column(Date, comment='Data de Validação')

    ger_empresa = relationship('GerEmpresa')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro2_ord_status = relationship('OpeCentro2OrdStatu')
    ope_centro2_ord_tipo = relationship('OpeCentro2OrdTipo')
    ope_centro2_pessoa = relationship('OpeCentro2Pessoa')
    ope_centro_versao = relationship('OpeCentroVersao')
    ope_frente_trabalho = relationship('OpeFrenteTrabalho')
    ope_periodo = relationship('OpePeriodo')
    process = relationship('SysProcessLog')
    


class OpeCentroDest(generic_model, db.Model):
    __tablename__ = 'ope_centro_dest'
    __table_args__ = {'comment': 'Operação-Destinação de Valores/Quantidade'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro1_id_dest_pri = db.Column(db.ForeignKey('ope_centro1.id'),  comment='ID do Centro Nível 1 Entrada/Saída - Destino Primário')
    ope_centro1_id_dest_pri_obj = db.relationship('')
    ope_centro2_id_dest_pri = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída - Destino Primário')
    ope_centro2_id_dest_pri_obj = db.relationship('')
    ope_centro1_id_dest_sec = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída - Destino Secundário')
    ope_centro1_id_dest_sec_obj = db.relationship('')
    ope_centro2_id_dest_sec = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída - Destino Secundário')
    ope_centro2_id_dest_sec_obj = db.relationship('')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor')
    qnt = db.Column(db.Numeric(18, 6),  comment='Quantidade')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'), comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    mov_itemserv_id = db.Column(db.ForeignKey('mov_itemserv.id'), comment='ID do Movimento de Item/Serviço - Origem')
    mov_itemserv_id_obj = db.relationship('')
    fin_pagrec_id = db.Column(db.ForeignKey('fin_pagrec.id'), comment='ID do Pag/Rec - Origem')
    fin_pagrec_id_obj = db.relationship('')
    fin_pagrec_banco_id = db.Column(db.ForeignKey('fin_pagrec_banco.id'), comment='ID da Movimento Bancário de Pag/Rec - Origem')
    fin_pagrec_banco_id_obj = db.relationship('')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída - Origem')
    ope_centro1_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída - Origem')
    ope_centro2_id_obj = db.relationship('')
    tipo_es = db.Column(db.String(1),  comment='Tipo: E-Entrada, S-Saída')
    ope_periodo_id_desc_pri = db.Column(db.ForeignKey('ope_periodo.id'), comment='ID do Período da Operação - Destino Primário')
    ope_periodo_id_desc_pri_obj = db.relationship('')
    ope_periodo_id_desc_sec = db.Column(db.ForeignKey('ope_periodo.id'), comment='ID do Período da Operação - Destino Secundário')
    ope_periodo_id_desc_sec_obj = db.relationship('')
    ope_compart_id_pri = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartimento - Primário')
    ope_compart_id_pri_obj = db.relationship('')
    ope_compart_id_sec = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartimento - Secundário')
    ope_compart_id_sec_obj = db.relationship('')

    fin_pagrec_banco = relationship('FinPagrecBanco')
    fin_pagrec = relationship('FinPagrec')
    mov_itemserv = relationship('MovItemserv')
    ope_atividade = relationship('OpeAtividade')
    ope_centro1 = relationship('OpeCentro1', primaryjoin='OpeCentroDest.ope_centro1_id == OpeCentro1.id')
    ope_centro11 = relationship('OpeCentro1', primaryjoin='OpeCentroDest.ope_centro1_id_dest_pri == OpeCentro1.id')
    ope_centro12 = relationship('OpeCentro1', primaryjoin='OpeCentroDest.ope_centro1_id_dest_sec == OpeCentro1.id')
    ope_centro2 = relationship('OpeCentro2', primaryjoin='OpeCentroDest.ope_centro2_id == OpeCentro2.id')
    ope_centro21 = relationship('OpeCentro2', primaryjoin='OpeCentroDest.ope_centro2_id_dest_pri == OpeCentro2.id')
    ope_centro22 = relationship('OpeCentro2', primaryjoin='OpeCentroDest.ope_centro2_id_dest_sec == OpeCentro2.id')
    ope_compart = relationship('OpeCompart', primaryjoin='OpeCentroDest.ope_compart_id_pri == OpeCompart.id')
    ope_compart1 = relationship('OpeCompart', primaryjoin='OpeCentroDest.ope_compart_id_sec == OpeCompart.id')
    ope_periodo = relationship('OpePeriodo', primaryjoin='OpeCentroDest.ope_periodo_id_desc_pri == OpePeriodo.id')
    ope_periodo1 = relationship('OpePeriodo', primaryjoin='OpeCentroDest.ope_periodo_id_desc_sec == OpePeriodo.id')
    


class OpeCentroPrevDest(generic_model, db.Model):
    __tablename__ = 'ope_centro_prev_dest'
    __table_args__ = {'comment': 'Operacional-Previsão por Atividade - Destinação'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro_prev_id = db.Column(db.ForeignKey('ope_centro_prev.id', ondelete='CASCADE'),  comment='ID da Previsão por Atividade')
    ope_centro_prev_id_obj = db.relationship('')
    tipo_prev = db.Column(db.String(1),  comment='Tipo Previsão: 1-Produção, 2-Equipamentos, 3-Pessoa, 4-Item/Serviço')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'),  comment='ID do Centro Nível 1 Entrada/Saída')
    ope_centro1_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'), comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'),  comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    qnt01 = db.Column(db.Numeric(18, 2),   comment='Quantidade 01')
    qnt02 = db.Column(db.Numeric(18, 2),   comment='Quantidade 02')
    qnt03 = db.Column(db.Numeric(18, 2),   comment='Quantidade 03')
    qnt04 = db.Column(db.Numeric(18, 2),   comment='Quantidade 04')
    qnt05 = db.Column(db.Numeric(18, 2),   comment='Quantidade 05')
    qnt06 = db.Column(db.Numeric(18, 2),   comment='Quantidade 06')
    qnt07 = db.Column(db.Numeric(18, 2),   comment='Quantidade 07')
    qnt08 = db.Column(db.Numeric(18, 2),   comment='Quantidade 08')
    qnt09 = db.Column(db.Numeric(18, 2),   comment='Quantidade 09')
    qnt10 = db.Column(db.Numeric(18, 2),   comment='Quantidade 10')
    qnt11 = db.Column(db.Numeric(18, 2),   comment='Quantidade 11')
    qnt12 = db.Column(db.Numeric(18, 2),   comment='Quantidade 12')
    qnt13 = db.Column(db.Numeric(18, 2),   comment='Quantidade 13')
    qnt14 = db.Column(db.Numeric(18, 2),   comment='Quantidade 14')
    qnt15 = db.Column(db.Numeric(18, 2),   comment='Quantidade 15')
    qnt16 = db.Column(db.Numeric(18, 2),   comment='Quantidade 16')
    qnt17 = db.Column(db.Numeric(18, 2),   comment='Quantidade 17')
    qnt18 = db.Column(db.Numeric(18, 2),   comment='Quantidade 18')
    qnt19 = db.Column(db.Numeric(18, 2),   comment='Quantidade 19')
    qnt20 = db.Column(db.Numeric(18, 2),   comment='Quantidade 20')
    qnt21 = db.Column(db.Numeric(18, 2),   comment='Quantidade 21')
    qnt22 = db.Column(db.Numeric(18, 2),   comment='Quantidade 22')
    qnt23 = db.Column(db.Numeric(18, 2),   comment='Quantidade 23')
    qnt24 = db.Column(db.Numeric(18, 2),   comment='Quantidade 24')
    qnt25 = db.Column(db.Numeric(18, 2),   comment='Quantidade 25')
    qnt26 = db.Column(db.Numeric(18, 2),   comment='Quantidade 26')
    qnt27 = db.Column(db.Numeric(18, 2),   comment='Quantidade 27')
    qnt28 = db.Column(db.Numeric(18, 2),   comment='Quantidade 28')
    qnt29 = db.Column(db.Numeric(18, 2),   comment='Quantidade 29')
    qnt30 = db.Column(db.Numeric(18, 2),   comment='Quantidade 30')
    qnt31 = db.Column(db.Numeric(18, 2),   comment='Quantidade 31')
    process_id = db.Column(db.ForeignKey('sys_process_log.id'), comment='ID do Processo')
    process_id_obj = db.relationship('')

    ctb_comp = relationship('CtbComp')
    ger_itemserv = relationship('GerItemserv')
    ope_centro1 = relationship('OpeCentro1')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro_prev = relationship('OpeCentroPrev')
    process = relationship('SysProcessLog')
    


class OpeOcorMovDet(generic_model, db.Model):
    __tablename__ = 'ope_ocor_mov_det'
    __table_args__ = {'comment': 'Operação-Detalhe da Movimentação de Ocorrência'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_ocor_mov_id = db.Column(db.ForeignKey('ope_ocor_mov.id', ondelete='CASCADE', onupdate='CASCADE'),  comment='ID do Movimento de Ocorrência')
    ope_ocor_mov_id_obj = db.relationship('')
    ope_ocor_id = db.Column(db.ForeignKey('ope_ocor.id'),  comment='ID da Ocorrência')
    ope_ocor_id_obj = db.relationship('')
    observacao = db.Column(db.String(250), comment='Observação')
    qnt_ocor = db.Column(db.Numeric(18, 6),   comment='Quantidade da Ocorrência')
    qnt_ocor_calc = db.Column(db.Numeric(18, 6),   comment='Quantidade Cálculada da Ocorrência')
    ope_ocor_status_id = db.Column(db.ForeignKey('ope_ocor_status.id'),   comment='ID do Status da Ocorrência')
    ope_ocor_status_id_obj = db.relationship('')
    data_status = db.Column(Date,  comment='Data do Status')
    lat_x = db.Column(db.String(50), comment='Latitude X')
    long_y = db.Column(db.String(50), comment='Longitude Y')
    ponto = db.Column(db.String(50), comment='Descrição do Ponto')
    ope_ocor_mov_dest_id = db.Column(db.ForeignKey('ope_ocor_mov_dest.id'), comment='ID da Destinação da Movimentação da Ocorrência')
    ope_ocor_mov_dest_id_obj = db.relationship('')

    ope_ocor = relationship('OpeOcor')
    ope_ocor_mov_dest = relationship('OpeOcorMovDest')
    ope_ocor_mov = relationship('OpeOcorMov')
    ope_ocor_status = relationship('OpeOcorStatu')
    


class FinPagrecBaixaVar(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_baixa_var'
    __table_args__ = {'comment': 'Financeiro-Variação da Baixa'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_pagrec_baixa_id = db.Column(db.ForeignKey('fin_pagrec_baixa.id'),  comment='ID da Baixa de Pag/Rec')
    fin_pagrec_baixa_id_obj = db.relationship('')
    fin_tipo_variacao_id = db.Column(db.ForeignKey('fin_tipo_variacao.id'),  comment='ID do Tipo de Variação')
    fin_tipo_variacao_id_obj = db.relationship('')
    valor = db.Column(db.Numeric(18, 2),   comment='Valor')
    observacao = db.Column(db.String(250), comment='Observação')
    data_valid = db.Column(Date, comment='Data de Validação')

    fin_pagrec_baixa = relationship('FinPagrecBaixa')
    fin_tipo_variacao = relationship('FinTipoVariacao')
    


class FinPagrecOrigem(generic_model, db.Model):
    __tablename__ = 'fin_pagrec_origem'
    __table_args__ = {'comment': 'Financeiro-Origem de Pag/Rec'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    fin_pagrec_id = db.Column(db.ForeignKey('fin_pagrec.id'),  comment='ID do Pag/Rec')
    fin_pagrec_id_obj = db.relationship('')
    fin_pagrec_id_origem = db.Column(db.ForeignKey('fin_pagrec.id'), comment='ID do Pag/Rec - Origem')
    fin_pagrec_id_origem_obj = db.relationship('')
    fin_pagrec_parc_id = db.Column(db.ForeignKey('fin_pagrec_parc.id'), comment='ID da Parcela do Pag/Rec')
    fin_pagrec_parc_id_obj = db.relationship('')
    fin_pagrec_parc_id_origem = db.Column(db.ForeignKey('fin_pagrec_parc.id'), comment='ID da Parcela do Pag/Rec - Origem')
    fin_pagrec_parc_id_origem_obj = db.relationship('')
    tipo = db.Column(db.String(50), comment='Tipo Origem')
    mov_id = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    fin_pagrec_baixa_id = db.Column(db.ForeignKey('fin_pagrec_baixa.id'), comment='ID da Baixa Pag/Rec')
    fin_pagrec_baixa_id_obj = db.relationship('')
    fin_extrato_id = db.Column(db.ForeignKey('fin_pagrec_banco_extrato.id'), comment='ID da Extrato Mov. Bancario')
    fin_extrato_id_obj = db.relationship('')
    fin_recibo_id = db.Column(db.ForeignKey('fin_recibo.id'), comment='ID do Recibo')
    fin_recibo_id_obj = db.relationship('')
    fin_pagrec_banco_id = db.Column(db.ForeignKey('fin_pagrec_banco.id'), comment='ID da Movimento Bancário de Pag/Rec')
    fin_pagrec_banco_id_obj = db.relationship('')

    fin_extrato = relationship('FinPagrecBancoExtrato')
    fin_pagrec_baixa = relationship('FinPagrecBaixa')
    fin_pagrec_banco = relationship('FinPagrecBanco')
    fin_pagrec = relationship('FinPagrec', primaryjoin='FinPagrecOrigem.fin_pagrec_id == FinPagrec.id')
    fin_pagrec1 = relationship('FinPagrec', primaryjoin='FinPagrecOrigem.fin_pagrec_id_origem == FinPagrec.id')
    fin_pagrec_parc = relationship('FinPagrecParc', primaryjoin='FinPagrecOrigem.fin_pagrec_parc_id == FinPagrecParc.id')
    fin_pagrec_parc1 = relationship('FinPagrecParc', primaryjoin='FinPagrecOrigem.fin_pagrec_parc_id_origem == FinPagrecParc.id')
    fin_recibo = relationship('FinRecibo')
    mov = relationship('Mov')
    


class OpeCentro2OrdAtiv(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord_ativ'
    __table_args__ = {'comment': 'Operação-Atividades da Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_ord_id = db.Column(db.ForeignKey('ope_centro2_ord.id'),  comment='ID da Ordem de Operação')
    ope_centro2_ord_id_obj = db.relationship('')
    observacao_interna = db.Column(db.String(250), comment='Observação Interna')
    observacao_externa = db.Column(db.String(250), comment='Observação Externa')
    ope_atividade_id = db.Column(db.ForeignKey('ope_atividade.id'),  comment='ID da Atividade')
    ope_atividade_id_obj = db.relationship('')
    ordem_exec = db.Column(db.String(3),  comment='Ordem Execução')
    ope_frente_trabalho_id = db.Column(db.ForeignKey('ope_frente_trabalho.id'), comment='ID da Frente de Trabalho')
    ope_frente_trabalho_id_obj = db.relationship('')
    tipo_executor = db.Column(db.String(1),  comment='Tipo Executor: P-Próprio / T-Terceiro')
    data_valid = db.Column(Date, comment='Data de Validação')

    ope_atividade = relationship('OpeAtividade')
    ope_centro2_ord = relationship('OpeCentro2Ord')
    ope_frente_trabalho = relationship('OpeFrenteTrabalho')
    


class OpeCentro2OrdDest(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord_dest'
    __table_args__ = {'comment': 'Operação-Destino da Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    ope_centro2_ord_id = db.Column(db.ForeignKey('ope_centro2_ord.id'), comment='ID da Ordem de Operação')
    ope_centro2_ord_id_obj = db.relationship('')
    ope_centro2_id_dest = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 - Objeto')
    ope_centro2_id_dest_obj = db.relationship('')
    ger_umedida_id_dest = db.Column(db.ForeignKey('ger_umedida.id'), comment='ID da U.Medida - Objeto')
    ger_umedida_id_dest_obj = db.relationship('')
    qnt_obj = db.Column(db.Numeric(18, 6), comment='Quantidade - Real - Objeto - Hec/Hs/Ton/Etc')
    qnt_prev_obj = db.Column(db.Numeric(18, 6), comment='Quantidade - Prevista - Objeto - Hec/Hs/Ton/Etc')
    valor_unit_prev = db.Column(db.Numeric(18, 6), comment='Valor Unitário - Previsto')
    valor_total_prev = db.Column(db.Numeric(18, 6), comment='Valor Total - Previsto')
    observacao_interna = db.Column(db.String(250), comment='Observação Interna')
    observacao_externa = db.Column(db.String(250), comment='Observação Externa')
    valor_unit = db.Column(db.Numeric(18, 6), comment='Valor Unitário - Real')
    valor_total = db.Column(db.Numeric(18, 6), comment='Valor Total - Real')
    data_valid = db.Column(Date, comment='Data de Validação')

    ger_umedida = relationship('GerUmedida')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro2_ord = relationship('OpeCentro2Ord')
    


class SysDocument(generic_model, db.Model):
    __tablename__ = 'sys_document'
    __table_args__ = {'comment': 'System-Documento'}

    sys_user_id = db.Column(db.ForeignKey('sys_user.id'), comment='ID do Usuário')
    sys_user_id_obj = db.relationship('')
    title = db.Column(Text, comment='Titulo')
    description = db.Column(Text, comment='Descrição')
    category_id = db.Column(db.ForeignKey('sys_document_category.id'), comment='ID da Categoria')
    category_id_obj = db.relationship('')
    submission_date = db.Column(Date, comment='Data de Submissão')
    archive_date = db.Column(Date, comment='Data de Arquivo')
    filename = db.Column(Text, comment='Nome do Arquivo')
    mov_id = db.Column(db.ForeignKey('mov.id'), comment='ID do Movimento')
    mov_id_obj = db.relationship('')
    fin_pagrec_id = db.Column(db.ForeignKey('fin_pagrec.id'), comment='ID do Pag/Rec')
    fin_pagrec_id_obj = db.relationship('')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída')
    ope_centro1_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ope_centro2_ord_id = db.Column(db.ForeignKey('ope_centro2_ord.id'), comment='ID da Operação-Ordem')
    ope_centro2_ord_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartamento')
    ope_compart_id_obj = db.relationship('')
    ope_compart_ocor_id = db.Column(db.ForeignKey('ope_compart_ocor.id'), comment='ID do Compartamento da Ocorrência')
    ope_compart_ocor_id_obj = db.relationship('')
    ope_ocor_id = db.Column(db.ForeignKey('ope_ocor.id'), comment='ID da Ocorrência')
    ope_ocor_id_obj = db.relationship('')
    ger_pessoa_id = db.Column(db.ForeignKey('ger_pessoa.id'), comment='ID da Pessoa')
    ger_pessoa_id_obj = db.relationship('')
    crm_mov_id = db.Column(db.ForeignKey('crm_mov.id'), comment='ID do Movimento - Atendimento')
    crm_mov_id_obj = db.relationship('')
    content_type = db.Column(db.String(50), comment='Tipo de Conteudo')

    category = relationship('SysDocumentCategory')
    crm_mov = relationship('CrmMov')
    fin_pagrec = relationship('FinPagrec')
    ger_pessoa = relationship('GerPessoa')
    mov = relationship('Mov')
    ope_centro1 = relationship('OpeCentro1')
    ope_centro2 = relationship('OpeCentro2')
    ope_centro2_ord = relationship('OpeCentro2Ord')
    ope_compart = relationship('OpeCompart')
    ope_compart_ocor = relationship('OpeCompartOcor')
    ope_ocor = relationship('OpeOcor')
    sys_user = relationship('SysUser')


class OpeCentro2OrdItemserv(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord_itemserv'
    __table_args__ = {'comment': 'Operação-Item/Serviço das Atividades da Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    observacao_interna = db.Column(db.String(250), comment='Observação Interna')
    observacao_externa = db.Column(db.String(250), comment='Observação Externa')
    ope_centro2_ord_ativ_id = db.Column(db.ForeignKey('ope_centro2_ord_ativ.id'),  comment='ID da Atividade da Ordem de Operação')
    ope_centro2_ord_ativ_id_obj = db.relationship('')
    ger_itemserv_id = db.Column(db.ForeignKey('ger_itemserv.id'), comment='ID do Item/Serviço')
    ger_itemserv_id_obj = db.relationship('')
    qnt_rend = db.Column(db.Numeric(18, 6),   comment='Rendimento / Dosagem')
    perc_util = db.Column(db.Numeric(18, 6),   comment='Percentual de utilização')
    qnt_total_util = db.Column(db.Numeric(18, 6),   comment='Quantidade total de utilização')
    valor_unit_util = db.Column(db.Numeric(18, 6),   comment='Valor unitário de utilização')
    valor_total_util = db.Column(db.Numeric(18, 6),   comment='Valor total de utilização')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'),  comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    ctb_comp = relationship('CtbComp')
    ger_itemserv = relationship('GerItemserv')
    ope_centro2_ord_ativ = relationship('OpeCentro2OrdAtiv')
    


class OpeCentro2OrdRec(generic_model, db.Model):
    __tablename__ = 'ope_centro2_ord_rec'
    __table_args__ = {'comment': 'Operação-Recursos das Atividades da Ordem'}

    unit_id = db.Column(db.ForeignKey('sys_unit.id'),  comment='ID da Unidade')
    observacao_interna = db.Column(db.String(250), comment='Observação Interna')
    observacao_externa = db.Column(db.String(250), comment='Observação Externa')
    ope_centro2_ord_ativ_id = db.Column(db.ForeignKey('ope_centro2_ord_ativ.id'),  comment='ID da Atividade da Ordem de Operação')
    ope_centro2_ord_ativ_id_obj = db.relationship('')
    ope_centro1_id = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída')
    ope_centro1_id_obj = db.relationship('')
    ope_centro2_id = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída')
    ope_centro2_id_obj = db.relationship('')
    ger_pessoa_endereco_id_exec = db.Column(db.ForeignKey('ger_pessoa_endereco.id'),  comment='ID do Endereço da Pessoal - Proprietário / Terceirizado')
    ger_pessoa_endereco_id_exec_obj = db.relationship('')
    qnt_rend = db.Column(db.Numeric(18, 6),   comment='Rendimento / Dosagem')
    perc_util = db.Column(db.Numeric(18, 6),   comment='Percentual de utilização')
    qnt_total_util = db.Column(db.Numeric(18, 6),   comment='Quantidade total de utilização')
    valor_unit_util = db.Column(db.Numeric(18, 6),   comment='Valor unitário de utilização')
    valor_total_util = db.Column(db.Numeric(18, 6),   comment='Valor total de utilização')
    ope_centro1_id_imp01 = db.Column(db.ForeignKey('ope_centro1.id'), comment='ID do Centro Nível 1 Entrada/Saída - Implemento 01')
    ope_centro1_id_imp01_obj = db.relationship('')
    ope_centro2_id_imp01 = db.Column(db.ForeignKey('ope_centro2.id'), comment='ID do Centro Nível 2 Entrada/Saída - Implemento 01')
    ope_centro2_id_imp01_obj = db.relationship('')
    ctb_comp_id = db.Column(db.ForeignKey('ctb_comp.id'),  comment='ID do Componente Contábil')
    ctb_comp_id_obj = db.relationship('')
    ope_compart_id = db.Column(db.ForeignKey('ope_compart.id'), comment='ID do Compartimento')
    ope_compart_id_obj = db.relationship('')
    ctb_comp_id_imp01 = db.Column(db.ForeignKey('ctb_comp.id'), comment='ID do Componente Contábil - Implemento 01')
    ctb_comp_id_imp01_obj = db.relationship('')
    data_valid = db.Column(Date, comment='Data de Validação')

    ctb_comp = relationship('CtbComp', primaryjoin='OpeCentro2OrdRec.ctb_comp_id == CtbComp.id')
    ctb_comp1 = relationship('CtbComp', primaryjoin='OpeCentro2OrdRec.ctb_comp_id_imp01 == CtbComp.id')
    ger_pessoa_endereco = relationship('GerPessoaEndereco')
    ope_centro1 = relationship('OpeCentro1', primaryjoin='OpeCentro2OrdRec.ope_centro1_id == OpeCentro1.id')
    ope_centro11 = relationship('OpeCentro1', primaryjoin='OpeCentro2OrdRec.ope_centro1_id_imp01 == OpeCentro1.id')
    ope_centro2 = relationship('OpeCentro2', primaryjoin='OpeCentro2OrdRec.ope_centro2_id == OpeCentro2.id')
    ope_centro21 = relationship('OpeCentro2', primaryjoin='OpeCentro2OrdRec.ope_centro2_id_imp01 == OpeCentro2.id')
    ope_centro2_ord_ativ = relationship('OpeCentro2OrdAtiv')
    ope_compart = relationship('OpeCompart')
    





